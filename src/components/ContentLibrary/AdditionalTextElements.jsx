import React, { useState, useRef, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Card, 
  CardContent, 
  Avatar, 
  Accordion, 
  AccordionSummary, 
  AccordionDetails,
  Chip,
  Alert,
  AlertTitle,
  Grid,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Switch,
  Slider,
  IconButton,
  CircularProgress,
  Divider
} from '@mui/material';
import { styled } from '@mui/material/styles';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import StarIcon from '@mui/icons-material/Star';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ScheduleIcon from '@mui/icons-material/Schedule';
import PendingIcon from '@mui/icons-material/Pending';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import PhotoCameraIcon from '@mui/icons-material/PhotoCamera';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import EditableElementWrapper from './EditableElementWrapper';
import AnimationWrapper from './AnimationWrapper';
import AnimationControls from './AnimationControls';
import ColorPicker from '../ColorPicker/ColorPicker';
import ColorSettings from './TextComponents/ColorSettings';

// –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–∑—ã–≤–∞
export const TestimonialCard = ({ 
  name = '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
  role = '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
  company = '–û–û–û "–ö–æ–º–ø–∞–Ω–∏—è"',
  content = '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.',
  rating = 5,
  avatar = null,
  // –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  nameColor = '#1976d2',
  roleColor = '#666666',
  companyColor = '#888888',
  contentColor = '#333333',
  backgroundColor = '#ffffff',
  borderColor = '#e0e0e0',
  colorSettings = {},
  cardId = null,
  animationSettings = {
    animationType: 'fadeIn',
    delay: 0,
    triggerOnView: true,
    triggerOnce: true,
    threshold: 0.1,
    disabled: false
  },
  isPreview = false,
  constructorMode = false,
  isEditing = false,
  onUpdate = () => {},
  onSave = null,
  onCancel = null
}) => {
  const fileInputRef = useRef(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState('');
  const [localEditing, setLocalEditing] = useState(false);
  const [editData, setEditData] = useState({ 
    name, 
    role, 
    company, 
    content, 
    rating,
    avatar,
    nameColor,
    roleColor,
    companyColor,
    contentColor,
    backgroundColor,
    borderColor,
    colorSettings: colorSettings || {},
    cardId: cardId || `testimonial_${Date.now()}`,
    animationSettings: animationSettings || {
      animationType: 'fadeIn',
      delay: 0,
      triggerOnView: true,
      triggerOnce: true,
      threshold: 0.1,
      disabled: false
    }
  });

  const handleDoubleClick = () => {
    if (constructorMode) {
      setLocalEditing(true);
    }
  };

  const handleSave = () => {
    setLocalEditing(false);
    if (onSave) {
      onSave(editData);
    } else {
      onUpdate(editData);
    }
  };

  const handleCancel = () => {
    setLocalEditing(false);
    setEditData({ 
      name, 
      role, 
      company, 
      content, 
      rating, 
      avatar,
      nameColor,
      roleColor,
      companyColor,
      contentColor,
      backgroundColor,
      borderColor,
      colorSettings,
      cardId: cardId || `testimonial_${Date.now()}`,
      animationSettings 
    });
    if (onCancel) {
      onCancel();
    }
  };

  const handleAnimationUpdate = (newAnimationSettings) => {
    setEditData(prev => ({
      ...prev,
      animationSettings: newAnimationSettings
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsUploading(true);
    setUploadError('');

    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const { processImageUpload } = await import('../../utils/imageConverter');
      const { imageCacheService } = await import('../../utils/imageCacheService');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      const testimonialName = editData.name || 'testimonial';
      
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞:', editData.cardId, '–∫–ª–∏–µ–Ω—Ç:', testimonialName);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è)
      const result = await processImageUpload(file, editData.cardId, testimonialName);
      
      if (!result.success) {
        throw new Error(result.error);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–µ—à
      await imageCacheService.saveImage(result.fileName, result.file);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const metadata = {
        fileName: result.fileName,
        originalName: result.originalName,
        originalType: result.originalType,
        testimonialName: testimonialName,
        cardId: editData.cardId,
        size: result.size,
        width: result.width,
        height: result.height,
        uploadDate: new Date().toISOString(),
        processed: true,
        format: 'jpg',
        type: 'testimonial-avatar'
      };
      
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–∞:', metadata);
      await imageCacheService.saveMetadata(`testimonial-avatar-${result.fileName}`, metadata);
      
      // –ü–æ–ª—É—á–∞–µ–º blob –∏–∑ –∫–µ—à–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL
      const blob = await imageCacheService.getImage(result.fileName);
      const imageUrl = URL.createObjectURL(blob);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setEditData(prev => ({
        ...prev,
        avatar: imageUrl,
        avatarFileName: result.fileName
      }));
      
      console.log('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω:', {
        fileName: result.fileName,
        originalName: result.originalName,
        size: result.size,
        dimensions: `${result.width}x${result.height}`,
        cardId: editData.cardId
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      setUploadError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
    } finally {
      setIsUploading(false);
      // –û—á–∏—â–∞–µ–º input
      if (event.target) {
        event.target.value = '';
      }
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  const isCurrentlyEditing = isEditing || localEditing;

  // üîÑ –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ colorSettings
  useEffect(() => {
    if (JSON.stringify(colorSettings) !== JSON.stringify(editData.colorSettings)) {
      console.log('üîÑ [TestimonialCard] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ colorSettings:', colorSettings);
      setEditData(prev => ({
        ...prev,
        colorSettings: colorSettings || {}
      }));
    }
  }, [colorSettings]);

  const renderStars = (rating) => {
    return Array.from({ length: 5 }, (_, i) => (
      <StarIcon 
        key={i} 
        sx={{ 
          color: i < rating ? ratingColorFromSettings : '#e0e0e0',
          fontSize: '1.2rem'
        }} 
      />
    ));
  };

  if (isCurrentlyEditing) {
    return (
      <Paper sx={{ p: 3, mb: 2, border: '2px solid #1976d2' }}>
        <Typography variant="h6" color="primary" gutterBottom sx={{ mb: 3 }}>
          ‚≠ê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        </Typography>
        
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleImageUpload}
          accept="image/*"
          style={{ display: 'none' }}
        />
        
        <Accordion defaultExpanded={true}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Grid container spacing={2}>
              {/* –ê–≤–∞—Ç–∞—Ä */}
              <Grid item xs={12}>
                <Typography variant="subtitle2" gutterBottom>–ê–≤–∞—Ç–∞—Ä –∫–ª–∏–µ–Ω—Ç–∞:</Typography>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                  {editData.avatar ? (
                    <Avatar src={editData.avatar} sx={{ width: 80, height: 80 }} />
                  ) : (
                    <Avatar sx={{ width: 80, height: 80, bgcolor: 'primary.main', fontSize: '2rem' }}>
                      {editData.name.charAt(0).toUpperCase()}
                    </Avatar>
                  )}
                  <Box>
                    <Button
                      variant="contained"
                      startIcon={isUploading ? <CircularProgress size={16} /> : <PhotoCameraIcon />}
                      onClick={handleUploadClick}
                      disabled={isUploading}
                      sx={{ mb: 1 }}
                    >
                      {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'}
                    </Button>
                    {uploadError && (
                      <Alert severity="error" sx={{ mt: 1 }}>
                        {uploadError}
                      </Alert>
                    )}
                    {editData.avatar && (
                      <Alert severity="success" sx={{ mt: 1 }}>
                        ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ JPG –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                      </Alert>
                    )}
                  </Box>
                </Box>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
                  value={editData.name}
                  onChange={(e) => setEditData({ ...editData, name: e.target.value })}
                  variant="outlined"
                  size="small"
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                  value={editData.role}
                  onChange={(e) => setEditData({ ...editData, role: e.target.value })}
                  variant="outlined"
                  size="small"
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="–ö–æ–º–ø–∞–Ω–∏—è"
                  value={editData.company}
                  onChange={(e) => setEditData({ ...editData, company: e.target.value })}
                  variant="outlined"
                  size="small"
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞"
                  value={editData.content}
                  onChange={(e) => setEditData({ ...editData, content: e.target.value })}
                  variant="outlined"
                  multiline
                  rows={4}
                  size="small"
                />
              </Grid>
              
              <Grid item xs={12}>
                <Typography variant="subtitle2" gutterBottom>
                  –†–µ–π—Ç–∏–Ω–≥: {editData.rating} ‚≠ê
                </Typography>
                <Slider
                  value={editData.rating}
                  onChange={(_, value) => setEditData({ ...editData, rating: value })}
                  min={1}
                  max={5}
                  step={0.5}
                  marks={[
                    { value: 1, label: '1' },
                    { value: 2, label: '2' },
                    { value: 3, label: '3' },
                    { value: 4, label: '4' },
                    { value: 5, label: '5' }
                  ]}
                  sx={{ width: '100%' }}
                />
              </Grid>
            </Grid>
          </AccordionDetails>
        </Accordion>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
        <ColorSettings
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –æ—Ç–∑—ã–≤–∞"
          colorSettings={editData.colorSettings || {}}
          onUpdate={(newColorSettings) => setEditData({ ...editData, colorSettings: newColorSettings })}
          availableFields={[
            {
              name: 'name',
              label: '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞',
              description: '–¶–≤–µ—Ç –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞',
              defaultColor: '#1976d2'
            },
            {
              name: 'role',
              label: '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
              description: '–¶–≤–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
              defaultColor: '#666666'
            },
            {
              name: 'company',
              label: '–ö–æ–º–ø–∞–Ω–∏—è',
              description: '–¶–≤–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏',
              defaultColor: '#888888'
            },
            {
              name: 'content',
              label: '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
              description: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞',
              defaultColor: '#333333'
            },
            {
              name: 'rating',
              label: '–ó–≤–µ–∑–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞',
              description: '–¶–≤–µ—Ç –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞',
              defaultColor: '#ffc107'
            }
          ]}
          defaultColors={{
            textFields: {
              name: '#1976d2',
              role: '#666666',
              company: '#888888',
              content: '#333333',
              rating: '#ffc107'
            }
          }}
        />

        <Accordion defaultExpanded={false}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <AnimationControls
              animationSettings={editData.animationSettings}
              onUpdate={handleAnimationUpdate}
            />
          </AccordionDetails>
        </Accordion>

        <Divider sx={{ my: 3 }} />
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="contained"
            color="primary"
            onClick={handleSave}
            startIcon={<CloudUploadIcon />}
          >
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button
            variant="outlined"
            onClick={handleCancel}
          >
            ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
        </Box>
      </Paper>
    );
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º colorSettings –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const currentColorSettings = editData.colorSettings || {};
  const nameColorFromSettings = currentColorSettings.textFields?.name || currentColorSettings.textFields?.author || editData.nameColor || '#1976d2';
  const roleColorFromSettings = currentColorSettings.textFields?.role || currentColorSettings.textFields?.position || editData.roleColor || '#666666';
  const companyColorFromSettings = currentColorSettings.textFields?.company || editData.companyColor || '#888888';
  const contentColorFromSettings = currentColorSettings.textFields?.content || editData.contentColor || '#333333';
  const ratingColorFromSettings = currentColorSettings.textFields?.rating || '#ffc107';
  
  // –°—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ñ–æ–Ω–æ–º
  const containerStyles = { 
    mb: 2,
    display: 'flex',
    flexDirection: 'column',
    width: '100%'
  };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ –∏–∑ sectionBackground
  if (currentColorSettings.sectionBackground?.enabled) {
    const { sectionBackground } = currentColorSettings;
    if (sectionBackground.useGradient) {
      containerStyles.background = `linear-gradient(${sectionBackground.gradientDirection}, ${sectionBackground.gradientColor1}, ${sectionBackground.gradientColor2})`;
    } else {
      containerStyles.backgroundColor = sectionBackground.solidColor;
    }
    containerStyles.opacity = sectionBackground.opacity || 1;
  } else {
    containerStyles.backgroundColor = editData.backgroundColor || '#ffffff';
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞–Ω–∏—Ü—ã
  if (currentColorSettings.borderColor) {
    containerStyles.border = `${currentColorSettings.borderWidth || 1}px solid ${currentColorSettings.borderColor}`;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–¥–∏—É—Å —É–≥–ª–æ–≤
  if (currentColorSettings.borderRadius !== undefined) {
    containerStyles.borderRadius = `${currentColorSettings.borderRadius}px`;
  } else {
    containerStyles.borderRadius = '8px';
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
  if (currentColorSettings.padding !== undefined) {
    containerStyles.padding = `${currentColorSettings.padding}px`;
  } else {
    containerStyles.padding = '16px';
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–Ω—å
  if (currentColorSettings.boxShadow) {
    containerStyles.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
  }

  return (
    <EditableElementWrapper 
      editable={constructorMode} 
      onStartEdit={handleDoubleClick}
      isEditing={isCurrentlyEditing}
    >
      <AnimationWrapper {...editData.animationSettings}>
        <Box sx={containerStyles}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            {editData.avatar ? (
              <Avatar src={editData.avatar} sx={{ mr: 2, width: 60, height: 60 }} />
            ) : (
              <Avatar 
                sx={{ 
                  mr: 2, 
                  width: 60, 
                  height: 60,
                  bgcolor: 'primary.main',
                  fontSize: '1.5rem'
                }}
              >
                {editData.name.charAt(0).toUpperCase()}
              </Avatar>
            )}
            <Box>
              <Typography 
                variant="h6" 
                sx={{ 
                  mb: 0.5,
                  color: nameColorFromSettings,
                  fontWeight: 'bold'
                }}
              >
                {editData.name}
              </Typography>
              <Typography 
                variant="body2" 
                sx={{ 
                  mb: 0.5,
                  color: roleColorFromSettings
                }}
              >
                {editData.role}
              </Typography>
              <Typography 
                variant="body2" 
                sx={{ 
                  color: companyColorFromSettings
                }}
              >
                {editData.company}
              </Typography>
            </Box>
          </Box>
          
          <Box sx={{ mb: 2 }}>
            {renderStars(editData.rating)}
          </Box>
          
          <Typography 
            variant="body1" 
            sx={{ 
              fontStyle: 'italic',
              lineHeight: 1.6,
              color: contentColorFromSettings
            }}
          >
            "{editData.content}"
          </Typography>
        </Box>
      </AnimationWrapper>
    </EditableElementWrapper>
  );
};

// FAQ —Å–µ–∫—Ü–∏—è
export const FAQSection = ({ 
  title = '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
  items = [
    { question: '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?', answer: '–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.' },
    { question: '–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?', answer: '–¶–µ–Ω—ã –æ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ.' }
  ],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ ColorSettings
  colorSettings = {},
  
  animationSettings = {
    animationType: 'fadeIn',
    delay: 0,
    triggerOnView: true,
    triggerOnce: true,
    threshold: 0.1,
    disabled: false
  },
  isPreview = false,
  constructorMode = false,
  isEditing = false,
  onUpdate = () => {},
  onSave = null,
  onCancel = null
}) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('[FAQSection] Received props:', { title, items, isPreview, constructorMode, isEditing });
  const [localEditing, setLocalEditing] = useState(false);
  const [editData, setEditData] = useState({ 
    title, 
    items,
    colorSettings: colorSettings || {},
    animationSettings: animationSettings || {
      animationType: 'fadeIn',
      delay: 0,
      triggerOnView: true,
      triggerOnce: true,
      threshold: 0.1,
      disabled: false
    }
  });

  const handleDoubleClick = () => {
    if (constructorMode) {
      setLocalEditing(true);
    }
  };

  const handleSave = () => {
    setLocalEditing(false);
    if (onSave) {
      onSave(editData);
    } else {
      onUpdate(editData);
    }
  };

  const handleCancel = () => {
    setLocalEditing(false);
    setEditData({ 
      title, items, colorSettings, animationSettings 
    });
    if (onCancel) {
      onCancel();
    }
  };

  const handleAnimationUpdate = (newAnimationSettings) => {
    setEditData(prev => ({
      ...prev,
      animationSettings: newAnimationSettings
    }));
  };





  const isCurrentlyEditing = isEditing || localEditing;

  // üîÑ –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ colorSettings
  useEffect(() => {
    if (JSON.stringify(colorSettings) !== JSON.stringify(editData.colorSettings)) {
      console.log('üîÑ [FAQSection] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ colorSettings:', colorSettings);
      setEditData(prev => ({
        ...prev,
        colorSettings: colorSettings || {}
      }));
    }
  }, [colorSettings]);

  const addItem = () => {
    setEditData({
      ...editData,
      items: [...editData.items, { question: '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å?', answer: '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å' }]
    });
  };

  const handleColorUpdate = (newColorSettings) => {
    setEditData(prev => ({
      ...prev,
      colorSettings: newColorSettings
    }));
  };

  const removeItem = (index) => {
    setEditData({
      ...editData,
      items: editData.items.filter((_, i) => i !== index)
    });
  };

  const updateItem = (index, field, value) => {
    setEditData({
      ...editData,
      items: editData.items.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    });
  };

  if (isCurrentlyEditing) {
    return (
      <Paper 
        sx={{ 
          p: `${editData.colorSettings?.padding || 20}px`,
          mb: 2,
          borderRadius: `${editData.colorSettings?.borderRadius || 8}px`,
          ...(editData.colorSettings?.sectionBackground?.enabled ? {
            ...(editData.colorSettings.sectionBackground.useGradient ? {
              background: `linear-gradient(${editData.colorSettings.sectionBackground.gradientDirection}, ${editData.colorSettings.sectionBackground.gradientColor1}, ${editData.colorSettings.sectionBackground.gradientColor2})`
            } : {
              backgroundColor: editData.colorSettings.sectionBackground.solidColor
            }),
            opacity: editData.colorSettings.sectionBackground.opacity
          } : {}),
          ...(editData.colorSettings?.borderColor ? { 
            border: `${editData.colorSettings.borderWidth || 1}px solid ${editData.colorSettings.borderColor}` 
          } : { border: '1px solid #e0e0e0' }),
          ...(editData.colorSettings?.boxShadow ? { boxShadow: '0 2px 8px rgba(0,0,0,0.1)' } : {})
        }}
      >
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
          <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ —Å–µ–∫—Ü–∏–∏
          </Typography>
          
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
            
            <TextField
              label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"
              value={editData.title}
              onChange={(e) => setEditData({ ...editData, title: e.target.value })}
              fullWidth
              size="small"
              sx={{ mb: 2 }}
            />
          </Box>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:</Typography>
            
            {editData.items.map((item, index) => (
              <Paper key={index} sx={{ p: 2, mb: 2, border: '1px solid #e0e0e0' }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                  <Typography variant="body2" color="primary">
                    –í–æ–ø—Ä–æ—Å {index + 1}
                  </Typography>
                  <IconButton 
                    size="small" 
                    color="error" 
                    onClick={() => removeItem(index)}
                    disabled={editData.items.length <= 1}
                  >
                    <DeleteIcon fontSize="small" />
                  </IconButton>
                </Box>
                
                <TextField
                  label="–í–æ–ø—Ä–æ—Å"
                  value={item.question}
                  onChange={(e) => updateItem(index, 'question', e.target.value)}
                  fullWidth
                  size="small"
                  sx={{ mb: 1 }}
                />
                
                <TextField
                  label="–û—Ç–≤–µ—Ç"
                  value={item.answer}
                  onChange={(e) => updateItem(index, 'answer', e.target.value)}
                  fullWidth
                  multiline
                  rows={3}
                  size="small"
                />
              </Paper>
            ))}
            
            <Button
              startIcon={<AddIcon />}
              onClick={addItem}
              variant="outlined"
              size="small"
              sx={{ mt: 1 }}
            >
              –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
            </Button>
          </Box>









          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
            <ColorSettings
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ FAQ —Å–µ–∫—Ü–∏–∏"
              colorSettings={editData.colorSettings}
              onUpdate={handleColorUpdate}
              availableFields={[
                {
                  name: 'title',
                  label: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞',
                  description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ FAQ —Å–µ–∫—Ü–∏–∏',
                  defaultColor: '#333333'
                },
                {
                  name: 'question',
                  label: '–¶–≤–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤',
                  description: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤',
                  defaultColor: '#1976d2'
                },
                {
                  name: 'answer',
                  label: '–¶–≤–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤',
                  description: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤',
                  defaultColor: '#666666'
                },
                {
                  name: 'icon',
                  label: '–¶–≤–µ—Ç –∏–∫–æ–Ω–æ–∫',
                  description: '–¶–≤–µ—Ç –∏–∫–æ–Ω–æ–∫ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞',
                  defaultColor: '#1976d2'
                },
                {
                  name: 'accordionBg',
                  label: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞',
                  description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞',
                  defaultColor: '#fafafa'
                },
                {
                  name: 'accordionHover',
                  label: '–¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏',
                  description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω',
                  defaultColor: '#f0f0f0'
                }
              ]}
              defaultColors={{
                title: '#333333',
                question: '#1976d2',
                answer: '#666666',
                icon: '#1976d2',
                accordionBg: '#fafafa',
                accordionHover: '#f0f0f0'
              }}
            />
          </Box>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏:</Typography>
            <AnimationControls
              animationSettings={editData.animationSettings}
              onUpdate={handleAnimationUpdate}
            />
          </Box>
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button variant="contained" onClick={handleSave}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
            <Button variant="outlined" onClick={handleCancel}>
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
          </Box>
        </Box>
      </Paper>
    );
  }

  return (
    <EditableElementWrapper 
      editable={constructorMode} 
      onStartEdit={handleDoubleClick}
      isEditing={isCurrentlyEditing}
    >
      <AnimationWrapper {...editData.animationSettings}>
        <Paper 
          sx={{ 
            p: `${editData.colorSettings?.padding || 20}px`,
            mb: 2,
            borderRadius: `${editData.colorSettings?.borderRadius || 8}px`,
            ...(editData.colorSettings?.sectionBackground?.enabled ? {
              ...(editData.colorSettings.sectionBackground.useGradient ? {
                background: `linear-gradient(${editData.colorSettings.sectionBackground.gradientDirection}, ${editData.colorSettings.sectionBackground.gradientColor1}, ${editData.colorSettings.sectionBackground.gradientColor2})`
              } : {
                backgroundColor: editData.colorSettings.sectionBackground.solidColor
              }),
              opacity: editData.colorSettings.sectionBackground.opacity
            } : {}),
            ...(editData.colorSettings?.borderColor ? { 
              border: `${editData.colorSettings.borderWidth || 1}px solid ${editData.colorSettings.borderColor}` 
            } : { border: '1px solid #e0e0e0' }),
            ...(editData.colorSettings?.boxShadow ? { boxShadow: '0 2px 8px rgba(0,0,0,0.1)' } : {})
          }}
        >
          <Typography 
            variant="h4" 
            sx={{ 
              mb: 3,
              color: editData.colorSettings?.textFields?.title || '#333333',
              textAlign: 'center',
              fontWeight: 'bold'
            }}
          >
            {editData.title || title}
          </Typography>
          
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
            {(editData.items || items).map((item, index) => (
              <Accordion 
                key={index}
                sx={{
                  backgroundColor: editData.colorSettings?.textFields?.accordionBg || '#fafafa',
                  borderRadius: `${(editData.colorSettings?.borderRadius || 8) / 2}px !important`,
                  '&:hover': {
                    backgroundColor: editData.colorSettings?.textFields?.accordionHover || '#f0f0f0'
                  },
                  '&:before': {
                    display: 'none'
                  },
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                  mb: 1
                }}
              >
                <AccordionSummary 
                  expandIcon={
                    <ExpandMoreIcon 
                      sx={{ 
                        color: editData.colorSettings?.textFields?.icon || '#1976d2',
                        fontSize: '1.5rem'
                      }} 
                    />
                  }
                  sx={{
                    borderRadius: `${(editData.colorSettings?.borderRadius || 8) / 2}px`,
                    '&:hover': {
                      backgroundColor: 'rgba(0,0,0,0.04)'
                    }
                  }}
                >
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      color: editData.colorSettings?.textFields?.question || '#1976d2',
                      fontWeight: 'medium'
                    }}
                  >
                    {item.question}
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography 
                    variant="body1" 
                    sx={{ 
                      color: editData.colorSettings?.textFields?.answer || '#666666',
                      lineHeight: 1.6
                    }}
                  >
                    {item.answer}
                  </Typography>
                </AccordionDetails>
              </Accordion>
            ))}
          </Box>
        </Paper>
      </AnimationWrapper>
    </EditableElementWrapper>
  );
};

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
export const TimelineComponent = ({ 
  title: propTitle,
  events: propEvents,
  items: propItems, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AI –ø–∞—Ä—Å–µ—Ä–æ–º
  title = propTitle || '–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞',
  events = propEvents || propItems || [
    { date: '2024', title: '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞', description: '–ù–∞—á–∞–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', status: 'completed' },
    { date: '2024', title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π', status: 'in-progress' },
    { date: '2024', title: '–†–µ–ª–∏–∑', description: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è', status: 'pending' }
  ],
  // –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ ColorSettings
  colorSettings = {},
  
  animationSettings = {
    animationType: 'fadeIn',
    delay: 0,
    triggerOnView: true,
    triggerOnce: true,
    threshold: 0.1,
    disabled: false
  },
  isPreview = false,
  constructorMode = false,
  isConstructorMode = false,
  isEditing = false,
  onUpdate = () => {},
  onSave = null,
  onCancel = null
}) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('[TimelineComponent] Received props:', { 
    propTitle, 
    propEvents, 
    propItems,
    title,
    events,
    isPreview,
    constructorMode 
  });

  const [localEditing, setLocalEditing] = useState(false);
  const [editData, setEditData] = useState({ 
    title, 
    events, 
    colorSettings: colorSettings || {},
    animationSettings: animationSettings || {
      animationType: 'fadeIn',
      delay: 0,
      triggerOnView: true,
      triggerOnce: true,
      threshold: 0.1,
      disabled: false
    }
  });

  const handleDoubleClick = () => {
    if (constructorMode) {
      setLocalEditing(true);
    }
  };

  const handleSave = () => {
    setLocalEditing(false);
    if (onSave) {
      onSave(editData);
    } else {
      onUpdate(editData);
    }
  };

  const handleCancel = () => {
    setLocalEditing(false);
    setEditData({ 
      title, 
      events, 
      colorSettings: colorSettings || {},
      animationSettings 
    });
    if (onCancel) {
      onCancel();
    }
  };

  const handleAnimationUpdate = (newAnimationSettings) => {
    setEditData(prev => ({
      ...prev,
      animationSettings: newAnimationSettings
    }));
  };

  const isCurrentlyEditing = isEditing || localEditing;

  // üîÑ –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ colorSettings
  useEffect(() => {
    if (JSON.stringify(colorSettings) !== JSON.stringify(editData.colorSettings)) {
      console.log('üîÑ [TimelineComponent] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ colorSettings:', colorSettings);
      setEditData(prev => ({
        ...prev,
        colorSettings: colorSettings || {}
      }));
    }
  }, [colorSettings]);

  const getStatusIcon = (status) => {
    const statusColors = {
      completed: editData.colorSettings?.textFields?.completed || '#4caf50',
      'in-progress': editData.colorSettings?.textFields?.inProgress || '#ff9800',
      pending: editData.colorSettings?.textFields?.pending || '#2196f3'
    };
    
    switch (status) {
      case 'completed':
        return <CheckCircleIcon sx={{ color: statusColors.completed }} />;
      case 'in-progress':
        return <ScheduleIcon sx={{ color: statusColors['in-progress'] }} />;
      case 'pending':
        return <PendingIcon sx={{ color: statusColors.pending }} />;
      default:
        return <PendingIcon sx={{ color: 'grey.500' }} />;
    }
  };

  const getStatusColor = (status) => {
    const statusColors = {
      completed: editData.colorSettings?.textFields?.completed || '#4caf50',
      'in-progress': editData.colorSettings?.textFields?.inProgress || '#ff9800',
      pending: editData.colorSettings?.textFields?.pending || '#2196f3'
    };
    
    switch (status) {
      case 'completed':
        return statusColors.completed;
      case 'in-progress':
        return statusColors['in-progress'];
      case 'pending':
        return statusColors.pending;
      default:
        return 'grey.500';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleColorUpdate = (newColorSettings) => {
    setEditData(prev => ({
      ...prev,
      colorSettings: newColorSettings
    }));
  };

  if (isCurrentlyEditing) {
    return (
      <Paper sx={{ p: 3, mb: 2, borderRadius: 2 }}>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
          </Typography>
          
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
            
            <TextField
              label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"
              value={editData.title}
              onChange={(e) => setEditData({ ...editData, title: e.target.value })}
              fullWidth
              size="small"
              sx={{ mb: 2 }}
            />
          </Box>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>–°–æ–±—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã:</Typography>
            
            <TextField
              label="–°–æ–±—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–∞—Ç–∞|–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—Ç–∞—Ç—É—Å)"
              value={editData.events.map(event => `${event.date}|${event.title}|${event.description}|${event.status}`).join('\n')}
              onChange={(e) => {
                const events = e.target.value.split('\n').map(line => {
                  const [date, title, description, status] = line.split('|');
                  return { 
                    date: date || '', 
                    title: title || '', 
                    description: description || '', 
                    status: status || 'pending' 
                  };
                });
                setEditData({ ...editData, events });
              }}
              placeholder="–î–∞—Ç–∞|–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—Ç–∞—Ç—É—Å\n2024|–°–æ–±—ã—Ç–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|completed"
              fullWidth
              multiline
              rows={6}
              size="small"
              helperText="–ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –°—Ç–∞—Ç—É—Å: completed, in-progress, pending"
            />
          </Box>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
            <ColorSettings
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"
              colorSettings={editData.colorSettings}
              onUpdate={handleColorUpdate}
              availableFields={[
                { name: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã', defaultColor: '#000000' },
                { name: 'date', label: '–î–∞—Ç–∞', description: '–¶–≤–µ—Ç –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è', defaultColor: '#666666' },
                { name: 'text', label: '–¢–µ–∫—Å—Ç', description: '–¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è', defaultColor: '#333333' },
                { name: 'line', label: '–õ–∏–Ω–∏—è', description: '–¶–≤–µ—Ç —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏', defaultColor: '#e0e0e0' },
                { name: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', description: '–¶–≤–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π', defaultColor: '#4caf50' },
                { name: 'inProgress', label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', description: '–¶–≤–µ—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', defaultColor: '#ff9800' },
                { name: 'pending', label: '–û–∂–∏–¥–∞–Ω–∏–µ', description: '–¶–≤–µ—Ç –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π', defaultColor: '#2196f3' }
              ]}
              defaultColors={{
                title: '#000000',
                date: '#666666',
                text: '#333333',
                line: '#e0e0e0',
                completed: '#4caf50',
                inProgress: '#ff9800',
                pending: '#2196f3'
              }}
            />
          </Box>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏:</Typography>
            <AnimationControls
              animationSettings={editData.animationSettings}
              onUpdate={handleAnimationUpdate}
            />
          </Box>
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button variant="contained" onClick={handleSave}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
            <Button variant="outlined" onClick={handleCancel}>
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
          </Box>
        </Box>
      </Paper>
    );
  }

  return (
    <EditableElementWrapper 
      editable={constructorMode} 
      onStartEdit={handleDoubleClick}
      isEditing={isCurrentlyEditing}
    >
      <AnimationWrapper {...editData.animationSettings}>
        <Paper sx={{ 
          p: `${editData.colorSettings?.padding || 20}px`,
          mb: 2,
          borderRadius: `${editData.colorSettings?.borderRadius || 8}px`,
          ...(editData.colorSettings?.sectionBackground?.enabled ? {
            ...(editData.colorSettings.sectionBackground.useGradient ? {
              background: `linear-gradient(${editData.colorSettings.sectionBackground.gradientDirection}, ${editData.colorSettings.sectionBackground.gradientColor1}, ${editData.colorSettings.sectionBackground.gradientColor2})`
            } : {
              backgroundColor: editData.colorSettings.sectionBackground.solidColor
            }),
            opacity: editData.colorSettings.sectionBackground.opacity
          } : {}),
          ...(editData.colorSettings?.borderColor ? { 
            border: `${editData.colorSettings.borderWidth || 1}px solid ${editData.colorSettings.borderColor}` 
          } : { border: '1px solid #e0e0e0' }),
          ...(editData.colorSettings?.boxShadow ? { boxShadow: '0 2px 8px rgba(0,0,0,0.1)' } : {})
        }}>
          <Typography variant="h4" sx={{ 
            mb: 3, 
            textAlign: 'center', 
            color: editData.colorSettings?.textFields?.title || '#000000',
            fontWeight: 'bold'
          }}>
            {editData.title || title}
          </Typography>
          <Box sx={{ position: 'relative' }}>
            {(editData.events || events).map((event, index) => (
              <Box key={index} sx={{ display: 'flex', mb: 3 }}>
                <Box sx={{ 
                  display: 'flex', 
                  flexDirection: 'column', 
                  alignItems: 'center', 
                  mr: 2 
                }}>
                  {getStatusIcon(event.status)}
                  {index < (editData.events || events).length - 1 && (
                    <Box sx={{ 
                      width: 2, 
                      height: 40, 
                      bgcolor: editData.colorSettings?.textFields?.line || '#e0e0e0',
                      mt: 1
                    }} />
                  )}
                </Box>
                <Box sx={{ flex: 1 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Typography variant="h6" sx={{ 
                      mr: 1, 
                      color: editData.colorSettings?.textFields?.text || '#333333',
                      fontWeight: 'medium'
                    }}>
                      {event.title}
                    </Typography>
                    <Chip 
                      label={event.status} 
                      sx={{ 
                        backgroundColor: getStatusColor(event.status),
                        color: '#ffffff',
                        fontWeight: 'medium'
                      }}
                      size="small"
                    />
                  </Box>
                  <Typography variant="body2" sx={{ 
                    mb: 1, 
                    color: editData.colorSettings?.textFields?.date || '#666666',
                    fontWeight: '500'
                  }}>
                    {event.date}
                  </Typography>
                  <Typography variant="body1" sx={{ 
                    color: editData.colorSettings?.textFields?.text || '#333333',
                    lineHeight: 1.6
                  }}>
                    {event.description}
                  </Typography>
                </Box>
              </Box>
            ))}
          </Box>
        </Paper>
      </AnimationWrapper>
    </EditableElementWrapper>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const AlertComponent = ({ 
  title = '–í–Ω–∏–º–∞–Ω–∏–µ!',
  message = '–≠—Ç–æ –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
  type = 'info',
  showIcon = true,
  animationSettings = {
    animationType: 'fadeIn',
    delay: 0,
    triggerOnView: true,
    triggerOnce: true,
    threshold: 0.1,
    disabled: false
  },
  isPreview = false,
  constructorMode = false,
  isEditing = false,
  onUpdate = () => {},
  onSave = null,
  onCancel = null
}) => {
  const [localEditing, setLocalEditing] = useState(false);
  const [editData, setEditData] = useState({ 
    title, 
    message, 
    type, 
    showIcon, 
    animationSettings: animationSettings || {
      animationType: 'fadeIn',
      delay: 0,
      triggerOnView: true,
      triggerOnce: true,
      threshold: 0.1,
      disabled: false
    }
  });

  const handleDoubleClick = () => {
    if (constructorMode) {
      setLocalEditing(true);
    }
  };

  const handleSave = () => {
    setLocalEditing(false);
    if (onSave) {
      onSave(editData);
    } else {
      onUpdate(editData);
    }
  };

  const handleCancel = () => {
    setLocalEditing(false);
    setEditData({ title, message, type, showIcon, animationSettings });
    if (onCancel) {
      onCancel();
    }
  };

  const handleAnimationUpdate = (newAnimationSettings) => {
    setEditData(prev => ({
      ...prev,
      animationSettings: newAnimationSettings
    }));
  };

  const isCurrentlyEditing = isEditing || localEditing;

  if (isCurrentlyEditing) {
    return (
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
          <input
            type="text"
            value={editData.title}
            onChange={(e) => setEditData({ ...editData, title: e.target.value })}
            placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
            style={{ width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
          />
          <textarea
            value={editData.message}
            onChange={(e) => setEditData({ ...editData, message: e.target.value })}
            placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"
            style={{ width: '100%', minHeight: '80px', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
          />
          <select
            value={editData.type}
            onChange={(e) => setEditData({ ...editData, type: e.target.value })}
            style={{ width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
          >
            <option value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
            <option value="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
            <option value="error">–û—à–∏–±–∫–∞</option>
            <option value="success">–£—Å–ø–µ—Ö</option>
          </select>
          <label>
            <input
              type="checkbox"
              checked={editData.showIcon}
              onChange={(e) => setEditData({ ...editData, showIcon: e.target.checked })}
            />
            –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É
          </label>
          
          {constructorMode && (
            <AnimationControls
              animationSettings={editData.animationSettings}
              onUpdate={handleAnimationUpdate}
            />
          )}
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            <button onClick={handleSave} style={{ flex: 1, padding: '8px', backgroundColor: '#4caf50', color: 'white', border: 'none', borderRadius: '4px' }}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button onClick={handleCancel} style={{ flex: 1, padding: '8px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}>
              –û—Ç–º–µ–Ω–∞
            </button>
          </Box>
        </Box>
      </Paper>
    );
  }

  return (
    <EditableElementWrapper 
      editable={constructorMode} 
      onStartEdit={handleDoubleClick}
      isEditing={isCurrentlyEditing}
    >
      <AnimationWrapper {...editData.animationSettings}>
        <Alert 
          severity={type} 
          sx={{ mb: 2 }}
          icon={showIcon ? undefined : false}
        >
          <AlertTitle>{title}</AlertTitle>
          {message}
        </Alert>
      </AnimationWrapper>
    </EditableElementWrapper>
  );
}; 

// –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const ImageGallery = ({ 
  title = '–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
  description = '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
  images = [],
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
  galleryHeight = 400,
  galleryWidth = '100%',
  thumbnailSize = 80,
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ ColorSettings
  colorSettings = {},
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞
  slidesPerView = 1,
  spaceBetween = 20,
  showThumbnails = true,
  showNavigation = true,
  showPagination = true,
  autoplay = false,
  autoplayDelay = 3000,
  sectionId = null,
  animationSettings = {
    animationType: 'fadeIn',
    delay: 0,
    triggerOnView: true,
    triggerOnce: true,
    threshold: 0.1,
    disabled: false
  },
  isPreview = false,
  constructorMode = false,
  isEditing = false,
  onUpdate = () => {},
  onSave = null,
  onCancel = null
}) => {
  const fileInputRef = useRef(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState('');
  const [localEditing, setLocalEditing] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ sectionId
  const generateUniqueSectionId = () => {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 8);
    return `gallery_${timestamp}_${random}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏
  const clearOldGalleryCache = (oldSectionId) => {
    if (!oldSectionId) return;
    
    try {
      const allKeys = Object.keys(localStorage);
      const galleryKeys = allKeys.filter(key => 
        key.startsWith('gallery-image-') && 
        key.includes(oldSectionId)
      );
      
      galleryKeys.forEach(key => {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–µ—à: ${key}`);
      });
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏
  const clearAllGalleryCache = () => {
    try {
      const allKeys = Object.keys(localStorage);
      const galleryKeys = allKeys.filter(key => key.startsWith('gallery-image-'));
      
      console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${galleryKeys.length} –∫–ª—é—á–µ–π –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏`);
      
      galleryKeys.forEach(key => {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–µ—à: ${key}`);
      });
      
      console.log('‚úÖ –ö–µ—à –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏:', error);
    }
  };
  
  const [editData, setEditData] = useState({ 
    title,
    description,
    images,
    galleryHeight,
    galleryWidth,
    thumbnailSize,
    slidesPerView,
    spaceBetween,
    showThumbnails,
    showNavigation,
    showPagination,
    autoplay,
    autoplayDelay,
    sectionId: sectionId || generateUniqueSectionId(),
    colorSettings: colorSettings || {},
    animationSettings: animationSettings || {
      animationType: 'fadeIn',
      delay: 0,
      triggerOnView: true,
      triggerOnce: true,
      threshold: 0.1,
      disabled: false
    }
  });

  const handleDoubleClick = () => {
    if (constructorMode) {
      setLocalEditing(true);
    }
  };

  const handleSave = () => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    console.log('üìã editData –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:', editData);
    
    setLocalEditing(false);
    
    const oldSectionId = editData.sectionId;
    const newSectionId = editData.sectionId || generateUniqueSectionId();
    
    console.log('üÜî oldSectionId:', oldSectionId);
    console.log('üÜî newSectionId:', newSectionId);
    
    // –ï—Å–ª–∏ sectionId –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
    if (oldSectionId && oldSectionId !== newSectionId) {
      clearOldGalleryCache(oldSectionId);
    }
    
    // –ù–ï –æ—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ - —ç—Ç–æ —É–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∞–ª–µ—Ä–µ—é –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞');
    
    // –ï—Å–ª–∏ sectionId –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
    const dataToSave = {
      ...editData,
      sectionId: newSectionId
    };
    
    console.log('üíæ dataToSave:', dataToSave);
    console.log('üìû onSave:', onSave);
    console.log('üìû onUpdate:', onUpdate);
    
    if (onSave) {
      console.log('üíæ –í—ã–∑—ã–≤–∞–µ–º onSave');
      onSave(dataToSave);
    } else {
      console.log('üíæ –í—ã–∑—ã–≤–∞–µ–º onUpdate');
      onUpdate(dataToSave);
    }
  };

  const handleCancel = () => {
    setLocalEditing(false);
    setEditData({ 
      title,
      description,
      images,
      galleryHeight,
      galleryWidth,
      thumbnailSize,
      slidesPerView,
      spaceBetween,
      showThumbnails,
      showNavigation,
      showPagination,
      autoplay,
      autoplayDelay,
      sectionId: sectionId || generateUniqueSectionId(),
      colorSettings: colorSettings || {},
      animationSettings 
    });
    if (onCancel) {
      onCancel();
    }
  };

  const handleAnimationUpdate = (newAnimationSettings) => {
    setEditData(prev => ({
      ...prev,
      animationSettings: newAnimationSettings
    }));
  };

  const handleColorUpdate = (newColorSettings) => {
    setEditData(prev => ({
      ...prev,
      colorSettings: newColorSettings
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const handleImagesUpload = async (event) => {
    const files = Array.from(event.target.files);
    console.log('üìÅ –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', files);
    if (!files.length) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    setIsUploading(true);
    setUploadError('');

    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã...');
      const { processImageUpload } = await import('../../utils/imageConverter');
      const { imageCacheService } = await import('../../utils/imageCacheService');
      console.log('‚úÖ –£—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      
      const galleryName = editData.title || 'gallery';
      const processedImages = [];
      
      console.log('üìã –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏:', galleryName);
      console.log('üìã –¢–µ–∫—É—â–∏–π editData:', editData);
      
                              // –ù–ï –æ—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π - —ç—Ç–æ —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
                        console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞');
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –≥–∞–ª–µ—Ä–µ–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sectionId
      const oldSectionId = editData.sectionId;
      const currentSectionId = editData.sectionId || generateUniqueSectionId();
      
      // –ï—Å–ª–∏ sectionId –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
      if (oldSectionId && oldSectionId !== currentSectionId) {
        clearOldGalleryCache(oldSectionId);
      }
      
      if (!editData.sectionId) {
        setEditData(prev => ({ ...prev, sectionId: currentSectionId }));
      }
      
      console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏:`, currentSectionId);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å timestamp –∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        const imageNumber = editData.images.length + i + 1;
        const timestamp = Date.now();
        const random = Math.random().toString(36).substring(2, 8);
        const microTimestamp = performance.now().toString().replace('.', '');
        const imageName = `gallery_${timestamp}_${microTimestamp}_${random}_${imageNumber}`;
        
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${files.length}:`, imageName);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è)
        console.log(`üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/${files.length}:`, file.name);
        console.log(`üñºÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: sectionId=${currentSectionId}, imageName=${imageName}`);
        
        const result = await processImageUpload(file, currentSectionId, imageName);
        console.log(`üñºÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, result);
        
        if (!result.success) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, result.error);
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}: ${result.error}`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–µ—à
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–µ—à: ${result.fileName}`);
        await imageCacheService.saveImage(result.fileName, result.file);
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const metadata = {
          fileName: result.fileName,
          originalName: result.originalName,
          originalType: result.originalType,
          galleryName: galleryName,
          sectionId: currentSectionId,
          imageNumber: imageNumber,
          size: result.size,
          width: result.width,
          height: result.height,
          uploadDate: new Date().toISOString(),
          processed: true,
          format: 'jpg',
          type: 'gallery-image'
        };
        
        console.log('üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏:', metadata);
        const metadataKey = `gallery-image-${result.fileName}`;
        console.log('üîë –ö–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', metadataKey);
        await imageCacheService.saveMetadata(metadataKey, metadata);
        console.log(`‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
        
        // –ü–æ–ª—É—á–∞–µ–º blob –∏–∑ –∫–µ—à–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º blob –∏–∑ –∫–µ—à–∞: ${result.fileName}`);
        const blob = await imageCacheService.getImage(result.fileName);
        console.log(`üì¶ Blob –ø–æ–ª—É—á–µ–Ω:`, blob);
        
        const imageUrl = URL.createObjectURL(blob);
        console.log(`üîó URL —Å–æ–∑–¥–∞–Ω:`, imageUrl);
        
        const imageObject = {
          id: Date.now() + i,
          key: metadataKey, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
          url: imageUrl,
          fileName: result.fileName,
          alt: imageName,
          title: imageName,
          description: '',
          originalName: result.originalName,
          size: result.size,
          dimensions: `${result.width}x${result.height}`
        };
        
        console.log('üì∏ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏:', imageObject);
        processedImages.push(imageObject);
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ processedImages`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º editData —Å ${processedImages.length} –Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
      console.log(`üìã –¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ editData:`, editData.images);
      console.log(`üìã –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, processedImages);
      
      setEditData(prev => {
        const newState = {
        ...prev,
        images: [...prev.images, ...processedImages]
        };
        console.log(`üîÑ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ editData:`, newState);
        return newState;
      });
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${processedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      setUploadError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ' + error.message);
    } finally {
      setIsUploading(false);
      // –û—á–∏—â–∞–µ–º input
      if (event.target) {
        event.target.value = '';
      }
    }
  };

  const handleUploadClick = () => {
    console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ');
    console.log('üìÅ fileInputRef.current:', fileInputRef.current);
    console.log('üìÅ editData:', editData);
    fileInputRef.current?.click();
  };

  const handleRemoveImage = (imageIndex) => {
    setEditData(prev => ({
      ...prev,
      images: prev.images.filter((_, index) => index !== imageIndex)
    }));
  };

  const isCurrentlyEditing = isEditing || localEditing;

  // üîÑ –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ colorSettings
  useEffect(() => {
    if (JSON.stringify(colorSettings) !== JSON.stringify(editData.colorSettings)) {
      console.log('üîÑ [ImageGallery] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ colorSettings:', colorSettings);
      setEditData(prev => ({
        ...prev,
        colorSettings: colorSettings || {}
      }));
    }
  }, [colorSettings]);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º colorSettings –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const currentColorSettings = editData.colorSettings || colorSettings || {};
  const titleColorFromSettings = currentColorSettings.textFields?.title || '#1976d2';
  const descriptionColorFromSettings = currentColorSettings.textFields?.description || '#666666';
  const backgroundColorFromSettings = currentColorSettings.textFields?.background || 'transparent';
  const navigationColorFromSettings = currentColorSettings.textFields?.navigation || 'rgba(255,255,255,0.8)';
  const paginationColorFromSettings = currentColorSettings.textFields?.pagination || '#1976d2';
  const borderColorFromSettings = currentColorSettings.textFields?.border || '#e0e0e0';
  
  // –°—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ñ–æ–Ω–æ–º
  const containerStyles = { 
    width: '100%'
  };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ –∏–∑ sectionBackground
  if (currentColorSettings.sectionBackground?.enabled) {
    const { sectionBackground } = currentColorSettings;
    if (sectionBackground.useGradient) {
      containerStyles.background = `linear-gradient(${sectionBackground.gradientDirection}, ${sectionBackground.gradientColor1}, ${sectionBackground.gradientColor2})`;
    } else {
      containerStyles.backgroundColor = sectionBackground.solidColor;
    }
    containerStyles.opacity = sectionBackground.opacity || 1;
  } else {
    containerStyles.backgroundColor = backgroundColorFromSettings;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞–Ω–∏—Ü—ã
  if (currentColorSettings.borderColor) {
    containerStyles.border = `${currentColorSettings.borderWidth || 1}px solid ${currentColorSettings.borderColor}`;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–¥–∏—É—Å —É–≥–ª–æ–≤
  if (currentColorSettings.borderRadius !== undefined) {
    containerStyles.borderRadius = `${currentColorSettings.borderRadius}px`;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
  if (currentColorSettings.padding !== undefined) {
    containerStyles.padding = `${currentColorSettings.padding}px`;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–Ω—å
  if (currentColorSettings.boxShadow) {
    containerStyles.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
  }

  // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (isCurrentlyEditing) {
    return (
      <Paper sx={{ p: 3, mb: 2, border: '2px solid #1976d2' }}>
        <Typography variant="h6" color="primary" gutterBottom sx={{ mb: 3 }}>
          üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏
        </Typography>
        
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleImagesUpload}
          accept="image/*"
          multiple
          style={{ display: 'none' }}
        />
        
        <Accordion defaultExpanded={true}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏"
                  value={editData.title}
                  onChange={(e) => setEditData({ ...editData, title: e.target.value })}
                  variant="outlined"
                  size="small"
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="–û–ø–∏—Å–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏"
                  value={editData.description}
                  onChange={(e) => setEditData({ ...editData, description: e.target.value })}
                  variant="outlined"
                  multiline
                  rows={2}
                  size="small"
                />
              </Grid>
            </Grid>
          </AccordionDetails>
        </Accordion>

        <Accordion defaultExpanded={true}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ({editData.images.length})</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box sx={{ mb: 2 }}>
              <Button
                variant="contained"
                startIcon={isUploading ? <CircularProgress size={16} /> : <CloudUploadIcon />}
                onClick={handleUploadClick}
                disabled={isUploading}
                sx={{ mb: 2 }}
              >
                {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
              </Button>
              
              {uploadError && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {uploadError}
                </Alert>
              )}
              
              {editData.images.length > 0 && (
                <Alert severity="success" sx={{ mb: 2 }}>
                  ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JPG –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à
                </Alert>
              )}
            </Box>
            
            {editData.images.length > 0 && (
              <Grid container spacing={2}>
                {editData.images.map((image, index) => (
                  <Grid item xs={6} sm={4} md={3} key={image.id}>
                    <Box sx={{ 
                      position: 'relative', 
                      border: '1px solid #e0e0e0', 
                      borderRadius: 1,
                      overflow: 'hidden'
                    }}>
                      <img
                        src={image.url}
                        alt={image.alt}
                        style={{
                          width: '100%',
                          height: '80px',
                          objectFit: 'cover'
                        }}
                      />
                      <IconButton
                        size="small"
                        onClick={() => handleRemoveImage(index)}
                        sx={{
                          position: 'absolute',
                          top: 4,
                          right: 4,
                          backgroundColor: 'rgba(255,255,255,0.8)',
                          '&:hover': {
                            backgroundColor: 'rgba(255,255,255,0.9)'
                          }
                        }}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                      <Typography variant="caption" sx={{ 
                        position: 'absolute',
                        bottom: 0,
                        left: 0,
                        right: 0,
                        backgroundColor: 'rgba(0,0,0,0.7)',
                        color: 'white',
                        p: 0.5,
                        fontSize: '0.7rem'
                      }}>
                        {image.originalName}
                      </Typography>
                    </Box>
                  </Grid>
                ))}
              </Grid>
            )}
          </AccordionDetails>
        </Accordion>

        <Accordion defaultExpanded={false}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" gutterBottom>
                  –í—ã—Å–æ—Ç–∞ –≥–∞–ª–µ—Ä–µ–∏: {editData.galleryHeight}px
                </Typography>
                <Slider
                  value={editData.galleryHeight}
                  onChange={(_, value) => setEditData({ ...editData, galleryHeight: value })}
                  min={200}
                  max={800}
                  step={50}
                  marks={[
                    { value: 200, label: '–ú–∏–Ω–∏' },
                    { value: 400, label: '–°—Ä–µ–¥–Ω–∏–π' },
                    { value: 600, label: '–ë–æ–ª—å—à–æ–π' },
                    { value: 800, label: '–ú–∞–∫—Å–∏' }
                  ]}
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" gutterBottom>
                  –†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä: {editData.thumbnailSize}px
                </Typography>
                <Slider
                  value={editData.thumbnailSize}
                  onChange={(_, value) => setEditData({ ...editData, thumbnailSize: value })}
                  min={50}
                  max={150}
                  step={10}
                  marks={[
                    { value: 50, label: '–ú–µ–ª–∫–∏–π' },
                    { value: 80, label: '–°—Ä–µ–¥–Ω–∏–π' },
                    { value: 120, label: '–ö—Ä—É–ø–Ω—ã–π' }
                  ]}
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={editData.showThumbnails}
                      onChange={(e) => setEditData({ ...editData, showThumbnails: e.target.checked })}
                    />
                  }
                  label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã"
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={editData.showNavigation}
                      onChange={(e) => setEditData({ ...editData, showNavigation: e.target.checked })}
                    />
                  }
                  label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={editData.showPagination}
                      onChange={(e) => setEditData({ ...editData, showPagination: e.target.checked })}
                    />
                  }
                  label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é"
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={editData.autoplay}
                      onChange={(e) => setEditData({ ...editData, autoplay: e.target.checked })}
                    />
                  }
                  label="–ê–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ"
                />
              </Grid>
            </Grid>
          </AccordionDetails>
        </Accordion>

        <Accordion defaultExpanded={false}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">üé® –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <ColorSettings
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≥–∞–ª–µ—Ä–µ–∏"
              colorSettings={editData.colorSettings || {}}
              onUpdate={handleColorUpdate}
              availableFields={[
                {
                  name: 'title',
                  label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                  description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–∞–ª–µ—Ä–µ–∏',
                  defaultColor: '#333333'
                },
                {
                  name: 'description',
                  label: '–û–ø–∏—Å–∞–Ω–∏–µ',
                  description: '–¶–≤–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏',
                  defaultColor: '#666666'
                },
                {
                  name: 'background',
                  label: '–§–æ–Ω',
                  description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥–∞–ª–µ—Ä–µ–∏',
                  defaultColor: '#ffffff'
                },
                {
                  name: 'border',
                  label: '–ì—Ä–∞–Ω–∏—Ü–∞',
                  description: '–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≥–∞–ª–µ—Ä–µ–∏',
                  defaultColor: '#e0e0e0'
                },
                {
                  name: 'navigation',
                  label: '–ù–∞–≤–∏–≥–∞—Ü–∏—è',
                  description: '–¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
                  defaultColor: 'rgba(255,255,255,0.7)'
                },
                {
                  name: 'pagination',
                  label: '–ü–∞–≥–∏–Ω–∞—Ü–∏—è',
                  description: '–¶–≤–µ—Ç —Ç–æ—á–µ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏',
                  defaultColor: '#1976d2'
                },
                {
                  name: 'overlay',
                  label: '–û–≤–µ—Ä–ª–µ–∏',
                  description: '–¶–≤–µ—Ç –æ–≤–µ—Ä–ª–µ–µ–≤ (–Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)',
                  defaultColor: 'rgba(0,0,0,0.5)'
                }
              ]}
              defaultColors={{
                textFields: {
                  title: '#333333',
                  description: '#666666',
                  background: '#ffffff',
                  border: '#e0e0e0',
                  navigation: 'rgba(255,255,255,0.7)',
                  pagination: '#1976d2',
                  overlay: 'rgba(0,0,0,0.5)'
                }
              }}
            />
          </AccordionDetails>
        </Accordion>

        <Accordion defaultExpanded={false}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <AnimationControls
              animationSettings={editData.animationSettings}
              onUpdate={handleAnimationUpdate}
            />
          </AccordionDetails>
        </Accordion>

        <Divider sx={{ my: 3 }} />
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="contained"
            color="primary"
            onClick={handleSave}
            startIcon={<CloudUploadIcon />}
          >
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button
            variant="outlined"
            onClick={handleCancel}
          >
            ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
        </Box>
      </Paper>
    );
  }

  // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏
  if (editData.images.length === 0) {
    return (
      <EditableElementWrapper 
        editable={constructorMode} 
        onStartEdit={handleDoubleClick}
        isEditing={isCurrentlyEditing}
      >
        <AnimationWrapper {...editData.animationSettings}>
          <Box sx={{ 
            p: 4, 
            textAlign: 'center',
            backgroundColor: editData.backgroundColor,
            minHeight: editData.galleryHeight,
            width: '100%'
          }}>
            <Typography variant="h5" sx={{ color: editData.titleColor, mb: 2 }}>
              {editData.title}
            </Typography>
            <Typography variant="body1" sx={{ color: editData.descriptionColor, mb: 3 }}>
              {editData.description}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              üì∑ –ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
            </Typography>
          </Box>
        </AnimationWrapper>
      </EditableElementWrapper>
    );
  }

  return (
    <EditableElementWrapper 
      editable={constructorMode} 
      onStartEdit={handleDoubleClick}
      isEditing={isCurrentlyEditing}
    >
      <AnimationWrapper {...editData.animationSettings}>
        <Box sx={containerStyles}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
          <Box sx={{ mb: 3, textAlign: 'center' }}>
            <Typography variant="h4" sx={{ color: titleColorFromSettings, mb: 1 }}>
              {editData.title}
            </Typography>
            <Typography variant="body1" sx={{ color: descriptionColorFromSettings }}>
              {editData.description}
            </Typography>
          </Box>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è */}
          <Box sx={{ 
            height: editData.galleryHeight,
            width: '100%',
            overflow: 'hidden',
            position: 'relative'
          }}>
            {editData.images.length > 0 && (
              <img
                src={editData.images[selectedImageIndex]?.url}
                alt={editData.images[selectedImageIndex]?.alt}
                style={{
                  width: '100%',
                  height: '100%',
                  objectFit: 'cover'
                }}
              />
            )}
            
            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            {editData.showNavigation && editData.images.length > 1 && (
              <>
                <IconButton
                  onClick={() => setSelectedImageIndex(prev => 
                    prev === 0 ? editData.images.length - 1 : prev - 1
                  )}
                  sx={{
                    position: 'absolute',
                    left: 8,
                    top: '50%',
                    transform: 'translateY(-50%)',
                    backgroundColor: navigationColorFromSettings,
                    '&:hover': { backgroundColor: navigationColorFromSettings }
                  }}
                >
                  ‚Üê
                </IconButton>
                <IconButton
                  onClick={() => setSelectedImageIndex(prev => 
                    prev === editData.images.length - 1 ? 0 : prev + 1
                  )}
                  sx={{
                    position: 'absolute',
                    right: 8,
                    top: '50%',
                    transform: 'translateY(-50%)',
                    backgroundColor: navigationColorFromSettings,
                    '&:hover': { backgroundColor: navigationColorFromSettings }
                  }}
                >
                  ‚Üí
                </IconButton>
              </>
            )}
          </Box>

          {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã */}
          {editData.showThumbnails && editData.images.length > 1 && (
            <Box sx={{ 
              mt: 2, 
              display: 'flex', 
              gap: 1, 
              overflowX: 'auto',
              pb: 1
            }}>
              {editData.images.map((image, index) => (
                <Box
                  key={image.id}
                  onClick={() => setSelectedImageIndex(index)}
                  sx={{
                    width: editData.thumbnailSize,
                    height: editData.thumbnailSize,
                    flexShrink: 0,
                    cursor: 'pointer',
                    border: selectedImageIndex === index ? `3px solid ${paginationColorFromSettings}` : 'none',
                    overflow: 'hidden',
                    transition: 'all 0.2s ease',
                    opacity: selectedImageIndex === index ? 1 : 0.7,
                    '&:hover': {
                      opacity: 1
                    }
                  }}
                >
                  <img
                    src={image.url}
                    alt={image.alt}
                    style={{
                      width: '100%',
                      height: '100%',
                      objectFit: 'cover'
                    }}
                  />
                </Box>
              ))}
            </Box>
          )}

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          {editData.showPagination && (
            <Box sx={{ mt: 2, textAlign: 'center' }}>
              <Typography variant="body2" sx={{ color: paginationColorFromSettings }}>
                {selectedImageIndex + 1} –∏–∑ {editData.images.length}
              </Typography>
            </Box>
          )}
        </Box>
      </AnimationWrapper>
    </EditableElementWrapper>
  );
};

export default TestimonialCard; 
