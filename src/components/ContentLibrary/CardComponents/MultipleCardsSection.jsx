import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Typography,
  Paper,
  IconButton,
  Tooltip,
  Chip
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import ViewCarouselIcon from '@mui/icons-material/ViewCarousel';
import ImageCard from './ImageCard';
import BasicCard from './BasicCard';
import CardModal from './CardModal';
import AnimationWrapper from '../AnimationWrapper';

const MultipleCardsSection = ({
  cards = [],
  gridSize = 'medium',
  cardType = 'image-card',
  title = '–°–µ–∫—Ü–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏',
  description = '',
  colorSettings = {},
  sectionStyles = {
    titleColor: '#1976d2',
    descriptionColor: '#666666',
    backgroundColor: 'transparent',
    backgroundType: 'transparent',
    gradientDirection: 'to right',
    gradientStartColor: '#1976d2',
    gradientEndColor: '#42a5f5',
    padding: '20px',
    borderRadius: '0px'
  },
  sectionAnimationSettings = {
    animationType: 'fadeIn',
    delay: 0,
    triggerOnView: true,
    triggerOnce: true,
    threshold: 0.1,
    disabled: false
  },
  onEdit,
  onDelete,
  editable = true,
  onCardUpdate
}) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedCard, setSelectedCard] = useState(null);
  const [maxTitleHeight, setMaxTitleHeight] = useState(0);
  const [currentColorSettings, setCurrentColorSettings] = useState(colorSettings || {});
  const gridRef = useRef(null);

  // üîÑ –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ colorSettings
  useEffect(() => {
    console.log('üîç [MultipleCardsSection] useEffect –í–´–ó–í–ê–ù:', {
      'props.colorSettings': colorSettings,
      'state.currentColorSettings': currentColorSettings,
      'props type': typeof colorSettings,
      'props keys': colorSettings ? Object.keys(colorSettings) : [],
      'props textFields': colorSettings?.textFields,
      'equal': JSON.stringify(colorSettings) === JSON.stringify(currentColorSettings)
    });
    
    if (JSON.stringify(colorSettings) !== JSON.stringify(currentColorSettings)) {
      console.log('üîÑ [MultipleCardsSection] –û–ë–ù–û–í–õ–Ø–ï–ú colorSettings:', colorSettings);
      setCurrentColorSettings(colorSettings || {});
    } else {
      console.log('‚ö†Ô∏è [MultipleCardsSection] colorSettings –ù–ï –ò–ó–ú–ï–ù–ò–õ–ò–°–¨');
    }
  }, [colorSettings]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏
  const getColumnsCount = () => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ 4
    switch (gridSize) {
      case 'xs':
        return 1;
      case 'small':
        return 2;
      case 'medium':
        return 3;
      case 'large':
        return 4;
      case 'xl':
        return 4; // –ú–∞–∫—Å–∏–º—É–º 4 —Å—Ç–æ–ª–±—Ü–∞
      case 'full':
        return 4; // –ú–∞–∫—Å–∏–º—É–º 4 —Å—Ç–æ–ª–±—Ü–∞
      case 'extra-large':
        return 1;
      default:
        return 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —Å—Ç–æ–ª–±—Ü–∞ (–±—ã–ª–æ 3)
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
  const getCardSize = () => {
    // –ï—Å–ª–∏ gridSize –Ω–µ 'auto', –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    if (gridSize !== 'auto') {
      return gridSize;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    const count = cards.length;
    if (count === 1) return 'xxxl';
    if (count === 2) return 'xxl';
    if (count === 3) return 'xl';
    if (count === 4) return 'large';
    return 'medium';
  };

  // –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∏–ª–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const getCardStyles = () => {
    const count = cards.length;
    return {
      fontSize: count <= 2 ? '1.2rem' : count === 3 ? '1.1rem' : '1rem',
      padding: count <= 2 ? '24px' : count === 3 ? '20px' : '16px',
      minHeight: count <= 2 ? '320px' : count === 3 ? '280px' : '240px'
    };
  };

  const handleCardClick = (card, event) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (event && (
      event.target.closest('.MuiIconButton-root') ||
      event.target.closest('.MuiButton-root') ||
      event.target.closest('.card-overlay')
    )) {
      return;
    }
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const titleColor = currentColorSettings?.textFields?.cardTitle || colorSettings?.textFields?.cardTitle || '#333333';
    const contentColor = currentColorSettings?.textFields?.cardText || colorSettings?.textFields?.cardText || '#666666';
    const borderColor = currentColorSettings?.textFields?.border || colorSettings?.textFields?.border || '#e0e0e0';
    const backgroundColor = (currentColorSettings?.cardBackground?.enabled || colorSettings?.cardBackground?.enabled) ? 
      ((currentColorSettings?.cardBackground?.useGradient || colorSettings?.cardBackground?.useGradient) ? 
        `linear-gradient(${(currentColorSettings?.cardBackground?.gradientDirection || colorSettings?.cardBackground?.gradientDirection) || 'to right'}, ${(currentColorSettings?.cardBackground?.gradientColor1 || colorSettings?.cardBackground?.gradientColor1) || '#ffffff'}, ${(currentColorSettings?.cardBackground?.gradientColor2 || colorSettings?.cardBackground?.gradientColor2) || '#f0f0f0'})` :
        (currentColorSettings?.cardBackground?.solidColor || colorSettings?.cardBackground?.solidColor) || '#ffffff'
      ) : '#ffffff';
    
    const cardWithStyles = {
      ...card,
      titleColor,
      contentColor,
      backgroundColor,
      borderColor
    };
    
    setSelectedCard(cardWithStyles);
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setSelectedCard(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π —Ñ–æ–Ω–∞ —Å–µ–∫—Ü–∏–∏
  const getSectionBackgroundStyle = () => {
    const styles = {};
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç colorSettings –Ω–∞–¥ sectionStyles
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sectionBackground –≤ colorSettings, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç enabled
    if (currentColorSettings?.sectionBackground) {
      const { sectionBackground } = currentColorSettings;
      console.log('üé® [MultipleCardsSection] –ü—Ä–∏–º–µ–Ω—è–µ–º sectionBackground –∏–∑ colorSettings:', sectionBackground);
      
      if (sectionBackground.useGradient) {
        const direction = sectionBackground.gradientDirection || 'to right';
        const startColor = sectionBackground.gradientColor1 || '#0a0a2e';
        const endColor = sectionBackground.gradientColor2 || '#16213e';
        styles.background = `linear-gradient(${direction}, ${startColor}, ${endColor})`;
        if (sectionBackground.opacity !== undefined) {
          styles.opacity = sectionBackground.opacity;
        }
        console.log('üé® [MultipleCardsSection] –ü—Ä–∏–º–µ–Ω–∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç:', styles.background);
      } else {
        styles.backgroundColor = sectionBackground.solidColor || 'transparent';
        if (sectionBackground.opacity !== undefined) {
          styles.opacity = sectionBackground.opacity;
        }
        console.log('üé® [MultipleCardsSection] –ü—Ä–∏–º–µ–Ω–∏–ª–∏ —Å–ø–ª–æ—à–Ω–æ–π —Ü–≤–µ—Ç:', styles.backgroundColor);
      }
      return styles;
    }
    
    // Fallback –Ω–∞ sectionStyles
    if (!sectionStyles || typeof sectionStyles !== 'object') {
      return { backgroundColor: 'transparent' };
    }
    
    if (sectionStyles.backgroundType === 'gradient') {
      const direction = sectionStyles.gradientDirection || 'to right';
      const startColor = sectionStyles.gradientStartColor || '#1976d2';
      const endColor = sectionStyles.gradientEndColor || '#42a5f5';
      styles.background = `linear-gradient(${direction}, ${startColor}, ${endColor})`;
    } else if (sectionStyles.backgroundType === 'solid') {
      styles.backgroundColor = sectionStyles.backgroundColor || 'transparent';
    } else {
      styles.backgroundColor = 'transparent';
    }
    
    return styles;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const calculateMaxTitleHeight = () => {
    if (!gridRef.current || cards.length === 0) return;

    const titleElements = gridRef.current.querySelectorAll('.card-title');
    let maxHeight = 0;

    titleElements.forEach(element => {
      const height = element.offsetHeight;
      if (height > maxHeight) {
        maxHeight = height;
      }
    });

    setMaxTitleHeight(maxHeight);
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
  useEffect(() => {
    const timer = setTimeout(() => {
      calculateMaxTitleHeight();
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

    return () => clearTimeout(timer);
  }, [cards]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      calculateMaxTitleHeight();
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const renderCard = (card) => {
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ colorSettings
    const cardWithAppliedStyles = {
      ...card,
      // –¶–≤–µ—Ç–∞ –∏–∑ colorSettings –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      titleColor: colorSettings?.textFields?.cardTitle || '#333333',
      contentColor: colorSettings?.textFields?.cardText || '#666666',
      borderColor: colorSettings?.textFields?.border || '#e0e0e0',
      
      // –§–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ cardBackground –Ω–∞—Å—Ç—Ä–æ–µ–∫
      backgroundColor: colorSettings?.cardBackground?.enabled ? 
        (colorSettings.cardBackground.useGradient ? 
          `linear-gradient(${colorSettings.cardBackground.gradientDirection || 'to right'}, ${colorSettings.cardBackground.gradientColor1 || '#ffffff'}, ${colorSettings.cardBackground.gradientColor2 || '#f0f0f0'})` :
          colorSettings.cardBackground.solidColor || '#ffffff'
        ) : '#ffffff',
      useGradient: colorSettings?.cardBackground?.enabled && colorSettings.cardBackground.useGradient,
      gradientStart: colorSettings?.cardBackground?.gradientColor1 || '#ffffff',
      gradientEnd: colorSettings?.cardBackground?.gradientColor2 || '#f0f0f0',
      gradientDirection: colorSettings?.cardBackground?.gradientDirection || 'to right',
      opacity: colorSettings?.cardBackground?.opacity || 1
    };
    
    const commonProps = {
      key: card.id,
      id: card.id,
      editable: editable,
      onUpdate: (updatedData) => {
        const updatedCard = { ...card, ...updatedData };
        if (onCardUpdate) {
          const targetCardId = updatedData.cardId || card.id;
          onCardUpdate(targetCardId, updatedData);
        }
      },
      onDelete: () => {},
      gridSize: card.gridSize || gridSize,
      onClick: (event) => handleCardClick(card, event),
      maxTitleHeight: maxTitleHeight,
      size: getCardSize(),
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
      animationSettings: card.animationSettings || {
        animationType: 'fadeIn',
        delay: 0.1,
        triggerOnView: true,
        triggerOnce: true,
        threshold: 0.1,
        disabled: false
      },
      // –ü–µ—Ä–µ–¥–∞–µ–º customStyles –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
      customStyles: card.customStyles || {},
      // üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º colorSettings –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
      colorSettings: card.colorSettings || {},
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
      sx: {
        height: 'auto !important', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
        minHeight: '320px', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        maxHeight: 'none', // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
        '& .MuiCardContent-root': {
          height: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          overflow: 'visible', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'flex-start'
        },
        '& .card-content-text': {
          overflow: 'hidden', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
          display: '-webkit-box',
          WebkitLineClamp: 6, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6 —Å—Ç—Ä–æ–∫ (–ø—Ä–∏–º–µ—Ä–Ω–æ 50 —Å–ª–æ–≤)
          WebkitBoxOrient: 'vertical',
          textOverflow: 'ellipsis',
          position: 'relative',
          '&::after': {
            content: '""',
            position: 'absolute',
            bottom: 0,
            right: 0,
            width: '40px',
            height: '20px',
            background: 'linear-gradient(transparent, inherit)',
            pointerEvents: 'none'
          }
        }
      },
      ...cardWithAppliedStyles
    };

    if (cardType === 'image-card') {
      return <ImageCard {...commonProps} />;
    } else {
      return <BasicCard {...commonProps} />;
    }
  };

  const sectionBoxStyles = {
    padding: currentColorSettings.padding ? `${currentColorSettings.padding}px` : (sectionStyles?.padding || '20px'),
    borderRadius: sectionStyles?.borderRadius || '0px',
    minHeight: sectionStyles?.backgroundType !== 'transparent' ? '100px' : 'auto',
    ...getSectionBackgroundStyle()
  };

  return (
    <AnimationWrapper {...sectionAnimationSettings}>
      <Box sx={sectionBoxStyles}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
        {(title || description) && (
          <Box sx={{ mb: 3, textAlign: 'center' }}>
            {title && (
              <Typography variant="h4" gutterBottom sx={{ 
                color: (() => {
                  const titleColor = currentColorSettings.textFields?.title || sectionStyles?.titleColor || '#1976d2';
                  console.log('üéØ [MultipleCardsSection] –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Ü–≤–µ—Ç:', {
                    titleColor,
                    currentColorSettings: currentColorSettings,
                    textFields: currentColorSettings.textFields,
                    sectionStyles: sectionStyles
                  });
                  return titleColor;
                })(),
                fontWeight: 'bold' 
              }}>
                {title}
              </Typography>
            )}
            {description && (
              <Typography variant="body1" sx={{ 
                color: (() => {
                  const textColor = currentColorSettings.textFields?.text || currentColorSettings.textFields?.description || sectionStyles?.descriptionColor || '#666666';
                  console.log('üéØ [MultipleCardsSection] –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ü–≤–µ—Ç:', {
                    textColor,
                    currentColorSettings: currentColorSettings,
                    textFields: currentColorSettings.textFields,
                    sectionStyles: sectionStyles
                  });
                  return textColor;
                })(),
                mb: 2 
              }}>
                {description}
              </Typography>
            )}
          </Box>
        )}

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) */}
        {editable && (
          <Paper sx={{ p: 2, mb: 2, backgroundColor: '#f8f9fa' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <ViewCarouselIcon color="primary" />
                <Typography variant="h6" color="primary">
                  –°–µ–∫—Ü–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
                </Typography>
                <Chip label={`${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`} size="small" color="primary" />
              </Box>
              
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ü–∏—é">
                  <IconButton 
                    size="small" 
                    color="primary"
                    onClick={onEdit}
                  >
                    <EditIcon />
                  </IconButton>
                </Tooltip>
                <Tooltip title="–£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é">
                  <IconButton 
                    size="small" 
                    color="error"
                    onClick={onDelete}
                  >
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              </Box>
            </Box>
          </Paper>
        )}

        {/* –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
        {cards.length > 0 && (
          <Box 
            ref={gridRef}
            className={`cards-grid cards-grid-auto`}
            sx={{ 
              mt: 2,
              display: 'flex',
              flexWrap: 'wrap',
              gap: 1.5,
              justifyContent: 'center',
              alignItems: 'flex-start',
              width: '100%',
              '& > *': {
                width: cards.length === 1 ? '300px' : 
                       cards.length === 2 ? 'calc(50% - 12px)' :
                       cards.length === 3 ? 'calc(33.333% - 16px)' : 
                       'calc(25% - 18px)', // 4+ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ 25% —à–∏—Ä–∏–Ω—ã
                minWidth: '250px',
                maxWidth: cards.length === 1 ? '400px' : '320px'
              }
            }}
          >
            {cards.map(renderCard)}
          </Box>
        )}

        {cards.length === 0 && (
          <Paper sx={{ p: 4, textAlign: 'center', backgroundColor: '#f5f5f5' }}>
            <Typography variant="body1" color="text.secondary">
              –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
            </Typography>
          </Paper>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <CardModal
          open={modalOpen}
          onClose={handleCloseModal}
          card={selectedCard}
          cardType={cardType}
        />
      </Box>
    </AnimationWrapper>
  );
};

export default MultipleCardsSection; 