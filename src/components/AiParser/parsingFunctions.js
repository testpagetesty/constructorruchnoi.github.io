// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ email –æ—Ç markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
const cleanEmail = (text) => {
  if (!text) return text;
  // –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞ [email](mailto:email)
  const markdownLinkRegex = /\[(.*?)\]\(mailto:(.*?)\)/;
  const match = text.match(markdownLinkRegex);
  if (match) {
    return match[2]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º email –∏–∑ mailto:
  }
  return text;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö email –≤ —Ç–µ–∫—Å—Ç–µ
const cleanEmailsInText = (text) => {
  if (!text) return text;
  return text.replace(/\[(.*?)\]\(mailto:(.*?)\)/g, '$2');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
const cleanServiceFields = (text) => {
  if (!text) return text;
  return text
    .replace(/^name page[:\s].*$/gmi, '') // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NAME PAGE
    .replace(/^id[:\s].*$/gmi, '') // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å ID
    .replace(/^section name[:\s].*$/gmi, '') // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å SECTION NAME
    .replace(/\n\s*\n\s*\n/g, '\n\n') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    .trim();
};

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
export const SECTION_KEYWORDS = {
  HERO: ['hero', '–≥–ª–∞–≤–Ω–∞—è', '–∑–∞–≥–æ–ª–æ–≤–æ–∫', '–≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', 'hero section'],
  SERVICES: ['—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å—ã', '—á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º', 'services', 'what we do', 'our services'],
  FEATURES: ['–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', '–ø–æ—á–µ–º—É –º—ã', 'features', 'advantages', 'why us'],
  ABOUT: ['–æ –Ω–∞—Å', '–æ –∫–æ–º–ø–∞–Ω–∏–∏', '–∫—Ç–æ –º—ã', 'about us', 'about company', 'who we are'],
  TESTIMONIALS: ['–æ—Ç–∑—ã–≤—ã', '–º–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤', '—á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç', 'testimonials', 'reviews', 'what people say'],
  FAQ: ['–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã', '—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', 'faq', 'frequently asked questions', '–≤–æ–ø—Ä–æ—Å—ã'],
  NEWS: ['–Ω–æ–≤–æ—Å—Ç–∏', '–±–ª–æ–≥', '—Å–æ–±—ã—Ç–∏—è', 'news', 'blog', 'events'],
  CONTACTS: ['–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏', '—Å–≤—è–∑–∞—Ç—å—Å—è', 'contacts', 'contact us', 'get in touch'],
  LEGAL: ['–ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', 'legal documents', 'policy', 'terms'],
  MERCI: ['merci', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', '—Å–ø–∞—Å–∏–±–æ', 'thank you', 'thanks', '—Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏'],
  UNIVERSAL: ['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è', 'universal', 'additional', 'extra']
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–∞ - —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
export const detectSectionType = (sectionName, sectionContent = '', sectionIndex = 0) => {
  const lowerSectionName = sectionName.toLowerCase();
  const lowerContent = sectionContent.toLowerCase();
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const specialSections = {
    'hero': 'HERO',
    '–∫–æ–Ω—Ç–∞–∫—Ç—ã': 'CONTACTS',
    'contacts': 'CONTACTS', 
    'merci': 'MERCI',
    '–ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã': 'LEGAL',
    'legal documents': 'LEGAL'
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  for (const [key, type] of Object.entries(specialSections)) {
    if (lowerSectionName.includes(key)) {
      console.log(`üîí –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª "${sectionName}" -> ${type}`);
      return type;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  const specialContentIndicators = {
    HERO: ['–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞', '–∑–∞–≥–æ–ª–æ–≤–æ–∫ hero', '–≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', 'site name', '–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞'],
    CONTACTS: ['—Ç–µ–ª–µ—Ñ–æ–Ω:', 'email:', '–∞–¥—Ä–µ—Å:', 'phone:', 'address:', '@', '+7', '+971', '+1'],
    LEGAL: ['–ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', 'privacy policy', 'terms of use', 'cookie policy'],
    MERCI: ['—Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ', '–±–ª–∞–≥–æ–¥–∞—Ä–∏–º', 'thank you for', 'thanks for', '—Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏', '—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏']
  };
  
  for (const [sectionType, indicators] of Object.entries(specialContentIndicators)) {
    for (const indicator of indicators) {
      if (lowerContent.includes(indicator.toLowerCase())) {
        console.log(`üîí –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É "${sectionName}" -> ${sectionType}`);
        return sectionType;
      }
    }
  }
  
  // –î–õ–Ø –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –†–ê–ó–î–ï–õ–û–í - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–û–†–Ø–î–ö–£
  // –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤ (–ø–æ—Å–ª–µ HERO)
  const sectionTypeSequence = [
    'ABOUT',      // 1-–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ HERO
    'SERVICES',   // 2-–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ HERO  
    'FEATURES',   // 3-–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ HERO
    'TESTIMONIALS', // 4-–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ HERO
    'FAQ',        // 5-–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ HERO
    'NEWS',       // 6-–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ HERO
    'UNIVERSAL'   // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
  ];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É —Ä–∞–∑–¥–µ–ª–∞
  let assignedType;
  if (sectionIndex < sectionTypeSequence.length) {
    assignedType = sectionTypeSequence[sectionIndex];
  } else {
    assignedType = 'UNIVERSAL';
  }
  
  console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "${sectionName}" (–ø–æ–∑–∏—Ü–∏—è ${sectionIndex + 1}) -> ${assignedType}`);
  return assignedType;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
const generateRandomEmail = (siteName) => {
  const emailPrefixes = [
    'info', 'contact', 'office', 'hello', 'support', 'mail', 'team', 'admin',
    'service', 'sales', 'clients', 'help', 'legal', 'company', 'director',
    'manager', 'secretary', 'consulting', 'general', 'reception', 'inquiry', 
    'hr', 'jobs', 'career', 'business', 'partners', 'marketing', 'press',
    'welcome', 'connect', 'reach', 'assist', 'communicate', 'engage', 'relate'
  ];
  
  const universalDomains = [
    'businesscorp', 'globalgroup', 'proservice', 'expertteam', 'qualitywork',
    'professional', 'excellence', 'premium', 'worldwide', 'international',
    'consulting', 'solutions', 'services', 'company', 'corporation',
    'enterprise', 'business', 'group', 'team', 'expert', 'quality',
    'reliable', 'trusted', 'leading', 'advanced', 'innovative', 'modern',
    'digital', 'online', 'network', 'global', 'success', 'growth',
    'development', 'progress', 'achievement', 'performance', 'excellence',
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 50 —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    'smartbusiness', 'topcompany', 'bestservice', 'quicksolutions', 'fastwork',
    'easyaccess', 'perfectchoice', 'strongteam', 'brightfuture', 'newvision',
    'bigideas', 'freshstart', 'cleanwork', 'sharpfocus', 'deepknowledge',
    'widerange', 'fullservice', 'totalcare', 'maxresults', 'superb-co',
    'first-class', 'top-notch', 'high-end', 'next-level', 'cutting-edge',
    'state-of-art', 'world-class', 'industry-best', 'market-leader', 'trend-setter',
    'game-changer', 'breakthrough', 'milestone', 'benchmark', 'goldstandard',
    'platinum-group', 'diamond-corp', 'crystal-clear', 'rock-solid', 'iron-strong',
    'steel-works', 'titanium-co', 'silver-line', 'copper-solutions', 'bronze-level',
    'emerald-group', 'sapphire-corp', 'ruby-solutions', 'pearl-company', 'amber-works',
    'coral-group', 'jade-solutions', 'opal-corp', 'quartz-company', 'granite-group'
  ];
  
  const randomPrefix = emailPrefixes[Math.floor(Math.random() * emailPrefixes.length)];
  
  if (siteName) {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–æ–º–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞
    let domainName = siteName
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
    
    // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    domainName = domainName.replace(/[–∞-—è—ë]/g, char => {
      const translit = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      return translit[char] || char;
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (–∫–∏—Ç–∞–π—Å–∫–∏–π, –∞—Ä–∞–±—Å–∫–∏–π, —è–ø–æ–Ω—Å–∫–∏–π –∏ —Ç.–¥.)
    const hasNonEnglish = /[^a-z0-9-]/.test(domainName);
    
    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –¥–æ–º–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π/–¥–ª–∏–Ω–Ω—ã–π
    if (hasNonEnglish || domainName.length < 2 || domainName.length > 25) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
      const randomDomain = universalDomains[Math.floor(Math.random() * universalDomains.length)];
      return `${randomPrefix}@${randomDomain}.com`;
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
      return `${randomPrefix}@${domainName}.com`;
    }
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
    const randomDomain = universalDomains[Math.floor(Math.random() * universalDomains.length)];
    return `${randomPrefix}@${randomDomain}.com`;
  }
};

const generateRandomPhone = (originalPhone) => {
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
  if (!originalPhone) {
    const cityCodes = ['495', '499', '812', '383', '343', '831'];
    const cityCode = cityCodes[Math.floor(Math.random() * cityCodes.length)];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä
    let digits = '';
    for (let i = 0; i < 7; i++) {
      digits += Math.floor(Math.random() * 10);
    }
    
    return `+7 (${cityCode}) ${digits.substring(0, 3)}-${digits.substring(3, 5)}-${digits.substring(5, 7)}`;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  const allDigits = originalPhone.replace(/\D/g, '');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –Ω–∞—á–∞–ª–∞ (–≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7)
  const digitsToPersist = Math.max(0, allDigits.length - 7);
  const persistedPart = allDigits.substring(0, digitsToPersist);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã
  let randomDigits = '';
  for (let i = 0; i < 7; i++) {
    randomDigits += Math.floor(Math.random() * 10);
  }
  
  // –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏
  if (originalPhone.match(/^\d+$/)) {
    return persistedPart + randomDigits;
  }
  
  // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ - –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Ü–∏—Ñ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  let result = originalPhone;
  let replacedCount = 0;
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ü–∏—Ñ—Ä—ã —Å –∫–æ–Ω—Ü–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  for (let i = originalPhone.length - 1; i >= 0 && replacedCount < 7; i--) {
    if (/\d/.test(originalPhone[i])) {
      result = result.substring(0, i) + randomDigits[6 - replacedCount] + result.substring(i + 1);
      replacedCount++;
    }
  }
  
  return result;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–µ–∫—Ü–∏–∏
const cleanSectionContent = (content) => {
  // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  return content
    .split('\n')
    .filter(line => {
      const trimmedLine = line.trim();
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      return trimmedLine && 
        !trimmedLine.match(/^\d+\./) && // –°—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1.", "2."
        !trimmedLine.match(/^\[\d+-\d+/) && // –°—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "[4-6"
        !trimmedLine.match(/^\[[^\]]+\]/) && // –°—Ç—Ä–æ–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        !trimmedLine.match(/^\(/) && // –°—Ç—Ä–æ–∫–∏ –≤ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ID - –ø—É—Å—Ç—å –ø–∞—Ä—Å–µ—Ä—ã —Å–∞–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç ID —Å—Ç—Ä–æ–∫–∏
        // !trimmedLine.match(/^ID[:\s]/i) && // "ID:" –∏–ª–∏ "ID " —Å –ª—é–±–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π 
        trimmedLine !== '–û –Ω–∞—Å' && // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        trimmedLine !== '–£—Å–ª—É–≥–∏' &&
        trimmedLine !== '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞' &&
        trimmedLine !== '–û—Ç–∑—ã–≤—ã' &&
        trimmedLine !== '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã' &&
        trimmedLine !== 'About Us' &&
        trimmedLine !== 'Services' &&
        trimmedLine !== 'Features' &&
        trimmedLine !== 'Testimonials' &&
        trimmedLine !== 'FAQ';
    })
    .join('\n');
};

export const cleanSectionId = (id) => {
  if (!id) return '';
  return id.toLowerCase()
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:
    // - –ª–∞—Ç–∏–Ω–∏—Ü–∞, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (a-z–∞-—è—ë)
    // - –∫–∏—Ç–∞–π—Å–∫–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π (\u4e00-\u9fff)
    // - –∫–∏—Ç–∞–π—Å–∫–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π-A (\u3400-\u4DBF)
    // - –∫–∏—Ç–∞–π—Å–∫–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π-B (\u20000-\u2A6DF)
    // - –∫–∏—Ç–∞–π—Å–∫–∏–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (\uF900-\uFAFF)
    // - –∫–æ—Ä–µ–π—Å–∫–∏–π —Ö–∞–Ω–≥—ã–ª—å (\uac00-\ud7af)
    // - –∫–æ—Ä–µ–π—Å–∫–∏–π –¥–∂–∞–º–æ (\u1100-\u11FF)
    // - –∫–æ—Ä–µ–π—Å–∫–∏–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–∂–∞–º–æ (\u3130-\u318F)
    // - —è–ø–æ–Ω—Å–∫–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞ (\u3040-\u309F)
    // - —è–ø–æ–Ω—Å–∫–∞—è –∫–∞—Ç–∞–∫–∞–Ω–∞ (\u30A0-\u30FF)
    // - —è–ø–æ–Ω—Å–∫–∞—è –∫–∞—Ç–∞–∫–∞–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (\u31F0-\u31FF)
    // - —è–ø–æ–Ω—Å–∫–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –∏ —Å–∏–º–≤–æ–ª—ã (\u3000-\u303F)
    // - –∞—Ä–∞–±—Å–∫–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π (\u0600-\u06FF)
    // - –∞—Ä–∞–±—Å–∫–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π (\u0750-\u077F)
    // - –∞—Ä–∞–±—Å–∫–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π-A (\u08A0-\u08FF)
    // - –∞—Ä–∞–±—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è-A (\uFB50-\uFDFF)
    // - –∞—Ä–∞–±—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è-B (\uFE70-\uFEFF)
    // - –∏–≤—Ä–∏—Ç (\u0590-\u05FF)
    // - –∏–≤—Ä–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (\uFB1D-\uFB4F)
    // - —Ö–∏–Ω–¥–∏ –¥–µ–≤–∞–Ω–∞–≥–∞—Ä–∏ (\u0900-\u097F)
    // - –¥–µ–≤–∞–Ω–∞–≥–∞—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (\uA8E0-\uA8FF)
    // - –±–µ–Ω–≥–∞–ª—å—Å–∫–∏–π (\u0980-\u09FF)
    // - –≥—É—Ä–º—É–∫—Ö–∏ (\u0A00-\u0A7F)
    // - –≥—É–¥–∂–∞—Ä–∞—Ç–∏ (\u0A80-\u0AFF)
    // - —Ç–∞–º–∏–ª—å—Å–∫–∏–π (\u0B80-\u0BFF)
    // - —Ç–µ–ª—É–≥—É (\u0C00-\u0C7F)
    // - –∫–∞–Ω–Ω–∞–¥–∞ (\u0C80-\u0CFF)
    // - –º–∞–ª–∞—è–ª–∞–º (\u0D00-\u0D7F)
    // - —Ç–∞–π—Å–∫–∏–π (\u0E00-\u0E7F)
    // - —Ç–∞–π—Å–∫–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (\u0E80-\u0EFF)
    // - –≥—Ä–µ—á–µ—Å–∫–∏–π –∏ –∫–æ–ø—Ç—Å–∫–∏–π (\u0370-\u03FF)
    // - –≥—Ä–µ—á–µ—Å–∫–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (\u1F00-\u1FFF)
    // - –≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π (\u0102-\u0103\u0110-\u0111\u0128-\u0129\u0168-\u0169\u01A0-\u01A1\u01AF-\u01B0\u1EA0-\u1EF9)
    // - –≤—Å–µ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏ –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤ (\u00C0-\u00FF\u0100-\u017F)
    .replace(/[^a-z–∞-—è—ë0-9\u4e00-\u9fff\u3400-\u4DBF\u20000-\u2A6DF\uF900-\uFAFF\uac00-\ud7af\u1100-\u11FF\u3130-\u318F\u3040-\u309F\u30A0-\u30FF\u31F0-\u31FF\u3000-\u303F\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF\u0590-\u05FF\uFB1D-\uFB4F\u0900-\u097F\uA8E0-\uA8FF\u0980-\u09FF\u0A00-\u0A7F\u0A80-\u0AFF\u0B80-\u0BFF\u0C00-\u0C7F\u0C80-\u0CFF\u0D00-\u0D7F\u0E00-\u0E7F\u0E80-\u0EFF\u0370-\u03FF\u1F00-\u1FFF\u0102-\u0103\u0110-\u0111\u0128-\u0129\u0168-\u0169\u01A0-\u01A1\u01AF-\u01B0\u1EA0-\u1EF9\u00C0-\u00FF\u0100-\u017F]/g, '_')
    .replace(/_+/g, '_')
    .replace(/^_|_$/g, '');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
const createElementByType = (type, titleParam, content, index, elementData = {}) => {
  const cleanContent = content ? content.replace(/\\+/g, '').trim() : '';
  const baseElement = {
    id: `service_${index + 1}`,
    type: type.toLowerCase(),
    title: titleParam || '',
    content: cleanContent,
    showTitle: true,
    titleColor: '#1976d2',
    contentColor: '#333333',
    borderColor: '#e0e0e0',
    backgroundType: 'solid',
    backgroundColor: '#ffffff'
  };

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
  switch (type.toLowerCase()) {
    case 'gradient-text':
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –°–û–î–ï–†–ñ–ò–ú–û–ï), —Ç–∞–∫ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (—Å –¢–ï–ö–°–¢, –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï, etc.)
      if (elementData.text) {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return {
          ...baseElement,
          text: elementData.text || '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç',
          direction: elementData.direction || 'to right',
          color1: elementData.color1 || '#ff6b6b',
          color2: elementData.color2 || '#4ecdc4',
          fontSize: parseInt(elementData.fontSize) || 24,
          fontWeight: elementData.fontWeight || 'bold'
        };
      } else {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –°–û–î–ï–†–ñ–ò–ú–û–ï
        return {
          ...baseElement,
          text: cleanContent || '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç',
          direction: 'to right', // –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          color1: '#ff6b6b',
          color2: '#4ecdc4',
          fontSize: 24,
          fontWeight: 'bold'
        };
      }

    case 'animated-counter':
      // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: [—á–∏—Å–ª–æ] * [–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è] * [–æ–ø–∏—Å–∞–Ω–∏–µ]
      let counterValue = 0;
      let counterUnit = '';
      let counterDescription = '';
      
      if (cleanContent) {
        const parts = cleanContent.split('*').map(part => part.trim());
        if (parts.length >= 3) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
          const numberMatch = parts[0].match(/(\d+)/);
          counterValue = numberMatch ? parseInt(numberMatch[1]) : 0;
          
          // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
          counterUnit = parts[1] || '';
          
          // –û–ø–∏—Å–∞–Ω–∏–µ
          counterDescription = parts[2] || '';
        } else if (parts.length === 2) {
          // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: —á–∏—Å–ª–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
          const numberMatch = parts[0].match(/(\d+)/);
          counterValue = numberMatch ? parseInt(numberMatch[1]) : 0;
          counterDescription = parts[1] || '';
        } else {
          // –ï—Å–ª–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
          const numberMatch = cleanContent.match(/(\d+)/);
          counterValue = numberMatch ? parseInt(numberMatch[1]) : 0;
          counterDescription = cleanContent.replace(/\d+/, '').trim();
        }
      }
      
      console.log('[createElementByType] Animated counter parsed:', { 
        counterValue, 
        counterUnit, 
        counterDescription, 
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        // –ü–æ–ª—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ AnimatedCounter
        title: titleParam || '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        startValue: 0,
        endValue: counterValue,
        suffix: counterUnit,
        duration: 2000, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        titleColor: '#333333',
        countColor: '#1976d2',
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        value: counterValue,
        unit: counterUnit,
        description: counterDescription,
        prefix: '',
        decimals: 0,
        separator: ',', // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á
        enableAnimation: true,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'list':
      let items = [];
      let listType = 'bulleted';
      let bulletStyle = 'circle';
      let numberStyle = 'decimal';
      let spacing = 'normal';
      let showIcons = false;
      let iconType = 'check';
      let customColors = false;
      let itemColor = '#333333';
      let accentColor = '#1976d2';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      // –§–æ—Ä–º–∞—Ç: —ç–ª–µ–º–µ–Ω—Ç * —ç–ª–µ–º–µ–Ω—Ç | listType:numbered | bulletStyle:arrow | accentColor:#e91e63
      if (cleanContent && cleanContent.includes('|')) {
        const parts = cleanContent.split('|').map(part => part.trim());
        const itemsContent = parts[0]; // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        if (itemsContent) {
          items = itemsContent.split('*').map(item => item.trim()).filter(item => item);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for (let i = 1; i < parts.length; i++) {
          const part = parts[i];
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è, —Ç–∞–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \:
          if (part.includes(':') || part.includes('\\:')) {
            // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –Ω–∞ –æ–±—ã—á–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            const normalizedPart = part.replace(/\\:/g, ':');
            const [key, value] = normalizedPart.split(':').map(s => s.trim());
            switch (key.toLowerCase()) {
              case 'listtype':
                listType = value;
                break;
              case 'bulletstyle':
                bulletStyle = value;
                break;
              case 'numberstyle':
                numberStyle = value;
                break;
              case 'spacing':
                spacing = value;
                break;
              case 'showicons':
                showIcons = value.toLowerCase() === 'true';
                break;
              case 'icontype':
                iconType = value;
                break;
              case 'customcolors':
                customColors = value.toLowerCase() === 'true';
                break;
              case 'itemcolor':
                itemColor = value;
                break;
              case 'accentcolor':
                accentColor = value;
                break;
            }
          }
        }
      } else {
        // –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (cleanContent) {
          items = cleanContent.split('*').map(item => item.trim()).filter(item => item);
        }
      }
      
      console.log('[createElementByType] List parsed:', { 
        items, 
        listType, 
        bulletStyle, 
        spacing,
        accentColor,
        originalContent: cleanContent 
      });
      
      return {
        id: `service_${index + 1}`,
        type: type.toLowerCase(),
        initialItems: items,
        listType: listType,
        bulletStyle: bulletStyle,
        numberStyle: numberStyle,
        spacing: spacing,
        showIcons: showIcons,
        iconType: iconType,
        customColors: customColors,
        itemColor: itemColor,
        accentColor: accentColor
      };
    case 'table':
      let headers = [];
      let rows = [];
      if (cleanContent) {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü
        if (cleanContent.includes('|')) {
          // –§–æ—Ä–º–∞—Ç —Å | —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
          const lines = cleanContent.split('\n').filter(line => line.trim());
          
          lines.forEach(line => {
            if (line.includes('|')) {
              const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell);
              if (cells.length > 0 && !line.includes('---')) {
                if (headers.length === 0) {
                  headers.push(...cells);
                } else {
                  rows.push(cells);
                }
              }
            }
          });
        } else if (cleanContent.includes(' - ') && cleanContent.includes('*')) {
          // –§–æ—Ä–º–∞—Ç "–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ * –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ"
          headers = ['–£—Å–ª—É–≥–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å'];
          const pairs = cleanContent.split('*').map(pair => pair.trim());
          pairs.forEach(pair => {
            const parts = pair.split(' - ');
            if (parts.length >= 2) {
              const key = parts[0].trim();
              const value = parts.slice(1).join(' - ').trim();
              rows.push([key, value]);
            }
          });
        }
      }
      
      return {
        ...baseElement,
        headers: headers,
        rows: rows
      };
    case 'chart':
      let chartData = [];
      console.log('[createElementByType] Processing chart with content:', cleanContent);
      if (cleanContent) {
        const items = cleanContent.split('*');
        console.log('[createElementByType] Split chart items:', items);
        items.forEach(item => {
          // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: "label - value" –∏ "label: value"
          let parts;
          if (item.includes(' - ')) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: "label - value"
            parts = item.split(' - ');
            console.log('[createElementByType] Using new format (dash)');
          } else if (item.includes(':')) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: "label: value"
            parts = item.split(':');
            console.log('[createElementByType] Using old format (colon)');
          }
          
          if (parts && parts.length >= 2) {
            const label = parts[0].trim();
            const value = parseFloat(parts[1].replace(/[^\d.]/g, '')) || 0;
            console.log(`[createElementByType] Creating chart item: label="${label}", value=${value}`);
            chartData.push({ label, value });
          } else {
            console.log('[createElementByType] Could not parse chart item:', item);
          }
        });
      }
      console.log('[createElementByType] Final chart data:', chartData);
      return {
        ...baseElement,
        data: chartData,
        chartType: 'bar'
      };
    case 'blockquote':
      let quote = cleanContent;
      let author = '';
      let source = '';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "—Ü–∏—Ç–∞—Ç–∞" * –∞–≤—Ç–æ—Ä * –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞ \* –∞–≤—Ç–æ—Ä \* –∏—Å—Ç–æ—á–Ω–∏–∫
      if (cleanContent) {
        // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã \*
        const normalizedContent = cleanContent.replace(/\\?\*/g, '*');
        const parts = normalizedContent.split('*').map(part => part.trim());
        
        if (parts.length >= 2) {
          quote = parts[0].trim();
          author = parts[1].trim();
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å - —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫
          if (parts.length >= 3) {
            source = parts[2].trim();
          }
          
          // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ü–∏—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          quote = quote.replace(/^[""](.*)[""]$/, '$1').replace(/^"(.*)"$/, '$1');
        }
      }
      
      console.log('[createElementByType] Blockquote parsed:', { quote, author, source, originalContent: cleanContent });
      
      return {
        ...baseElement,
        quote: quote,
        author: author,
        source: source
      };
    case 'accordion':
      let accordionItems = [];
      console.log('[createElementByType] Processing accordion with title:', titleParam, 'and content:', cleanContent);
      if (cleanContent) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: "–ó–∞–≥–æ–ª–æ–≤–æ–∫? –°–æ–¥–µ—Ä–∂–∏–º–æ–µ * –ó–∞–≥–æ–ª–æ–≤–æ–∫? –°–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        const items = cleanContent.split('*').map(item => item.trim()).filter(item => item);
        console.log('[createElementByType] Split items:', items);
        
        items.forEach((item, index) => {
          // –ò—â–µ–º –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
          const questionIndex = item.indexOf('?');
          console.log(`[createElementByType] Item ${index}: "${item}", questionIndex: ${questionIndex}`);
          if (questionIndex !== -1) {
            const question = item.substring(0, questionIndex).trim();
            const answer = item.substring(questionIndex + 1).trim();
            console.log(`[createElementByType] Creating accordion item: question="${question}", answer="${answer}"`);
            accordionItems.push({
              id: index + 1,
              title: question,
              content: answer
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log(`[createElementByType] No question mark found, creating default item: "${item}"`);
            accordionItems.push({
              id: index + 1,
              title: `–≠–ª–µ–º–µ–Ω—Ç ${index + 1}`,
              content: item
            });
          }
        });
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        if (accordionItems.length === 0) {
          console.log('[createElementByType] No items created, creating fallback item');
          accordionItems = [{
            id: 1,
            title: titleParam || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            content: cleanContent
          }];
        }
      }
      console.log('[createElementByType] Final accordion items:', accordionItems);
      return {
        ...baseElement,
        items: accordionItems,
        data: {
          title: titleParam || '',
          showTitle: !!titleParam
        }
      };
    case 'testimonial':
      // –°–∏–Ω–æ–Ω–∏–º –¥–ª—è testimonial-card, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–∑—ã–≤
      return {
        ...baseElement,
        author: titleParam || '–ö–ª–∏–µ–Ω—Ç',
        text: cleanContent,
        rating: 5,
        position: '–ö–ª–∏–µ–Ω—Ç',
        company: '',
        type: 'testimonial-card' // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø
      };
    case 'imagecard':
    case 'image-card':
      console.log(`üñºÔ∏è [createElementByType] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º image-card —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: "${titleParam}"`);
      return {
        ...baseElement,
        type: 'image-card',
        category: 'cardComponents',
        data: {
          title: titleParam || '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
          content: cleanContent,
          description: cleanContent,
          imageUrl: 'https://via.placeholder.com/300x200?text=–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          imageAlt: titleParam || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          buttonText: '',
          buttonLink: '',
          imagePosition: 'top',
          imageHeight: 200,
          variant: 'elevated',
          size: 'medium',
          alignment: 'left',
          showActions: false,
          gridSize: 'medium',
          animationSettings: {
            animationType: 'fadeIn',
            delay: 0,
            triggerOnView: true,
            triggerOnce: true,
            threshold: 0.1,
            disabled: false
          },
          customStyles: {
            backgroundColor: '#ffffff',
            borderColor: '#e0e0e0',
            borderWidth: 1,
            borderRadius: 8,
            textColor: '#333333',
            titleColor: '#1976d2',
            imageFilter: 'none',
            imageOpacity: 1,
            backgroundType: 'solid',
            gradientColor1: '#c41e3a',
            gradientColor2: '#ffd700',
            gradientDirection: 'to right'
          }
        },
        timestamp: new Date().toISOString()
      };
    case 'rich-text':
      // –ü–∞—Ä—Å–µ—Ä –¥–ª—è –±–æ–≥–∞—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª–µ–π
      let richContent = cleanContent;
      let showTitle = true;
      let titleColor = '#1976d2';
      let textColor = '#333333';
      let backgroundColor = 'transparent';
      let padding = 0;
      let borderRadius = 0;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      // –§–æ—Ä–º–∞—Ç: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ | titleColor:—Ü–≤–µ—Ç | textColor:—Ü–≤–µ—Ç | backgroundColor:—Ü–≤–µ—Ç | showTitle:true/false
      if (cleanContent && cleanContent.includes('|')) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const lastParamIndex = cleanContent.lastIndexOf('|');
        const contentPart = cleanContent.substring(0, lastParamIndex).trim();
        const paramsPart = cleanContent.substring(lastParamIndex + 1).trim();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–≤—Å–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ |)
        richContent = contentPart;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        const params = [paramsPart];
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const allParts = cleanContent.split('|').map(part => part.trim());
        for (let i = 1; i < allParts.length - 1; i++) {
          params.push(allParts[i]);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        for (let i = 0; i < params.length; i++) {
          const part = params[i];
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è, —Ç–∞–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \:
          if (part.includes(':') || part.includes('\\:')) {
            // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –Ω–∞ –æ–±—ã—á–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            const normalizedPart = part.replace(/\\:/g, ':');
            const [key, value] = normalizedPart.split(':').map(s => s.trim());
            switch (key.toLowerCase()) {
              case 'titlecolor':
                titleColor = value;
                break;
              case 'textcolor':
                textColor = value;
                break;
              case 'backgroundcolor':
                backgroundColor = value;
                break;
              case 'showtitle':
                showTitle = value.toLowerCase() === 'true';
                break;
              case 'padding':
                padding = parseInt(value) || 0;
                break;
              case 'borderradius':
                borderRadius = parseInt(value) || 0;
                break;
            }
          }
        }
      }
      
      console.log('[createElementByType] Rich-text parsed:', { 
        title: titleParam, 
        content: richContent, 
        showTitle, 
        titleColor, 
        textColor, 
        backgroundColor,
        padding,
        borderRadius,
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        title: titleParam,
        content: richContent,
        showTitle: showTitle,
        titleColor: titleColor,
        textColor: textColor,
        backgroundColor: backgroundColor,
        padding: padding,
        borderRadius: borderRadius
      };
    case 'typography':
      // –ü–∞—Ä—Å–µ—Ä –¥–ª—è typography —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      let typographyText = cleanContent;
      let variant = 'h2';
      let fontFamily = 'inherit';
      let fontSize = 'inherit';
      let fontWeight = 'normal';
      let fontStyle = 'normal';
      let textDecoration = 'none';
      let textAlign = 'inherit';
      let color = '#000000';
      let lineHeight = 1.5;
      let letterSpacing = 0;
      let textTransform = 'none';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      // –§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç | variant:h2 | color:#333 | textAlign:center | fontSize:24px
      if (cleanContent && cleanContent.includes('|')) {
        const parts = cleanContent.split('|').map(part => part.trim());
        typographyText = parts[0]; // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for (let i = 1; i < parts.length; i++) {
          const part = parts[i];
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è, —Ç–∞–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \:
          if (part.includes(':') || part.includes('\\:')) {
            // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –Ω–∞ –æ–±—ã—á–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            const normalizedPart = part.replace(/\\:/g, ':');
            const [key, value] = normalizedPart.split(':').map(s => s.trim());
            switch (key.toLowerCase()) {
              case 'variant':
                variant = value;
                break;
              case 'fontfamily':
                fontFamily = value;
                break;
              case 'fontsize':
                fontSize = value;
                break;
              case 'fontweight':
                fontWeight = value;
                break;
              case 'fontstyle':
                fontStyle = value;
                break;
              case 'textdecoration':
                textDecoration = value;
                break;
              case 'textalign':
                textAlign = value;
                break;
              case 'color':
                color = value;
                break;
              case 'lineheight':
                lineHeight = parseFloat(value) || 1.5;
                break;
              case 'letterspacing':
                letterSpacing = parseInt(value) || 0;
                break;
              case 'texttransform':
                textTransform = value;
                break;
            }
          }
        }
      }
      
      console.log('[createElementByType] Typography parsed:', { 
        text: typographyText, 
        variant, 
        color, 
        textAlign,
        fontSize,
        fontFamily,
        fontWeight,
        originalContent: cleanContent 
      });
      
      return {
        id: `service_${index + 1}`,
        type: type.toLowerCase(),
        text: typographyText,
        variant: variant,
        customStyles: {
          fontFamily,
          fontSize,
          fontWeight,
          fontStyle,
          textDecoration,
          textAlign,
          color,
          lineHeight,
          letterSpacing,
          textTransform
        }
      };
    case 'codeblock':
      return {
        ...baseElement,
        code: cleanContent,
        language: 'javascript'
      };
    case 'callout':
      // –°–æ–∑–¥–∞–µ–º –≤—ã–Ω–æ—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç–∏–ø–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¢–ò–ü_–í–´–ù–û–°–ö–ò –∫–∞–∫ –∏–º—è —Ç–∏–ø–∞
      return {
        id: `service_${index + 1}`,
        type: 'callout',
        title: titleParam || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫',
        content: cleanContent,
        calloutType: 'custom', // –¢–∏–ø –≤—ã–Ω–æ—Å–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Callout
        showIcon: true,
        isCustomType: true,
        customTypeName: elementData.calloutType || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–ò–ü_–í–´–ù–û–°–ö–ò –∫–∞–∫ –∏–º—è —Ç–∏–ø–∞
        backgroundColor: '#e3f2fd',
        borderColor: '#1976d2',
        textColor: '#0d47a1'
      };
    case 'typewriter-text':
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏
      let texts = ['–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–ù–∞ –Ω–∞—à —Å–∞–π—Ç'];
      
      if (cleanContent) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º
        const normalizedContent = cleanContent.replace(/\\\*/g, '*');
        texts = normalizedContent.split('*').map(text => text.trim()).filter(text => text);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        if (texts.length === 0) {
          texts = [cleanContent];
        }
      }
      
      console.log('[createElementByType] Typewriter-text parsed:', { 
        texts, 
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        texts: texts,
        speed: 150,
        pauseTime: 2000,
        repeat: true,
        textColor: '#333333',
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
    case 'highlight-text':
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
      let highlightText = cleanContent || '–≠—Ç–æ –≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º';
      
      console.log('[createElementByType] Highlight-text parsed:', { 
        text: highlightText, 
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        text: highlightText,
        highlightColor: '#ffeb3b',
        textColor: '#333333',
        fontSize: 16,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'testimonial-card':
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
      let name = '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤';
      let role = '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä';
      let company = '–û–û–û "–ö–æ–º–ø–∞–Ω–∏—è"';
      let content = '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.';
      let rating = 5;
      
      if (cleanContent) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º
        const normalizedContent = cleanContent.replace(/\\\*/g, '*');
        const parts = normalizedContent.split('*').map(part => part.trim()).filter(part => part);
        
        if (parts.length >= 1) name = parts[0];
        if (parts.length >= 2) role = parts[1];
        if (parts.length >= 3) company = parts[2];
        if (parts.length >= 4) content = parts[3];
        if (parts.length >= 5) {
          const ratingValue = parseInt(parts[4]);
          rating = isNaN(ratingValue) ? 5 : Math.min(Math.max(ratingValue, 1), 5);
        }
      }
      
      console.log('[createElementByType] Testimonial-card parsed:', { 
        name, role, company, content, rating,
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        name: name,
        role: role,
        company: company,
        content: content,
        rating: rating,
        avatar: '',
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };



    case 'faq-section':
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ FAQ —Å–µ–∫—Ü–∏–∏
      let faqItems = [];
      
      if (cleanContent) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º
        const normalizedContent = cleanContent.replace(/\\\*/g, '*');
        const pairs = normalizedContent.split('*').map(pair => pair.trim()).filter(pair => pair);
        
        pairs.forEach((pair, index) => {
          // –†–∞–∑–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –ø–æ –∑–Ω–∞–∫—É –≤–æ–ø—Ä–æ—Å–∞ "?"
          const questionMarkIndex = pair.indexOf('?');
          if (questionMarkIndex !== -1) {
            const question = pair.substring(0, questionMarkIndex).trim();
            const answer = pair.substring(questionMarkIndex + 1).trim();
            if (question && answer) {
              faqItems.push({
                id: index + 1,
                question: question,
                answer: answer
              });
            }
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è ?, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const parts = pair.split('|').map(part => part.trim());
            if (parts.length >= 2) {
              const question = parts[0];
              const answer = parts[1];
              faqItems.push({
                id: index + 1,
                question: question,
                answer: answer
              });
            } else {
              // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              faqItems.push({
                id: index + 1,
                question: `–í–æ–ø—Ä–æ—Å ${index + 1}`,
                answer: pair
              });
            }
          }
        });
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (faqItems.length === 0) {
        faqItems = [{
          id: 1,
          question: '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å',
          answer: cleanContent || '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å'
        }];
      }
      
      console.log('[createElementByType] FAQ-section parsed:', { 
        faqItems,
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        items: faqItems,
        title: titleParam || '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'qr-code':
      console.log('[createElementByType] QR-code parsed:', {
        title: titleParam,
        content: cleanContent,
        originalContent: cleanContent
      });
      return {
        ...baseElement,
        title: titleParam || 'QR –∫–æ–¥',
        qrData: cleanContent || 'https://example.com',
        size: 200,
        backgroundColor: '#ffffff',
        foregroundColor: '#000000',
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
    case 'rating':
      console.log('[createElementByType] Rating parsed:', {
        title: titleParam,
        content: cleanContent
      });
      // –ü–∞—Ä—Å–∏–º –°–û–î–ï–†–ñ–ò–ú–û–ï: [—Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞] * [–ø–æ–¥–ø–∏—Å—å/–æ–ø–∏—Å–∞–Ω–∏–µ]
      const ratingParts = cleanContent.split('*').map(part => part.trim());
      const currentRating = parseInt(ratingParts[0]) || 3;
      const caption = ratingParts[1] || '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:';
      
      return {
        ...baseElement,
        title: titleParam || '–†–µ–π—Ç–∏–Ω–≥',
        currentRating: currentRating,
        maxRating: 5,
        caption: caption,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'progress-bars':
      console.log('[createElementByType] Progress-bars parsed:', {
        title: titleParam,
        content: cleanContent
      });
      // –ü–∞—Ä—Å–∏–º –°–û–î–ï–†–ñ–ò–ú–û–ï: [–ø—Ä–æ—Ü–µ–Ω—Ç] * [–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞]
      const progressParts = cleanContent.split('*').map(part => part.trim());
      const progress = parseInt(progressParts[0]) || 45;
      const progressCaption = progressParts[1] || '–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏';
      
      return {
        ...baseElement,
        title: titleParam || '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
        progress: progress,
        caption: progressCaption,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'timeline-component':
      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: [–≥–æ–¥] | [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è] | [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è] | [—Å—Ç–∞—Ç—É—Å]
      let timelineItems = [];
      console.log('[createElementByType] Processing timeline with content:', cleanContent);
      
      if (cleanContent) {
        // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º
        const events = cleanContent.split('*').map(event => event.trim()).filter(event => event);
        console.log('[createElementByType] Split timeline events:', events);
        
        events.forEach((event, index) => {
          // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —á–µ—Ä—Ç–∞–º
          const fields = event.split('|').map(field => field.trim()).filter(field => field);
          console.log(`[createElementByType] Event ${index} fields:`, fields);
          
          if (fields.length >= 4) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: [–≥–æ–¥] | [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è] | [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è] | [—Å—Ç–∞—Ç—É—Å]
            const [date, title, description, status] = fields;
            timelineItems.push({
              id: index + 1,
              date: date,
              title: title,
              description: description,
              status: status.toLowerCase() // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            });
          } else if (fields.length >= 2) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: [–≥–æ–¥] [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è]
            const [date, ...titleParts] = fields;
            const title = titleParts.join(' ').trim();
            timelineItems.push({
              id: index + 1,
              date: date,
              title: title,
              description: '',
              status: 'pending' // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            });
          }
        });
      }
      
      console.log('[createElementByType] Final timeline items:', timelineItems);
      
      return {
        ...baseElement,
        title: titleParam || '–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞',
        items: timelineItems,
        events: timelineItems // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
      };

    case 'data-table':
      // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–∫–æ–ª–æ–Ω–∫–∞ 1] | [–∫–æ–ª–æ–Ω–∫–∞ 2] | [–∫–æ–ª–æ–Ω–∫–∞ 3] * [–∑–Ω–∞—á–µ–Ω–∏–µ 1] | [–∑–Ω–∞—á–µ–Ω–∏–µ 2] | [–∑–Ω–∞—á–µ–Ω–∏–µ 3]
      let tableHeaders = [];
      let tableRows = [];
      console.log('[createElementByType] Processing data-table with content:', cleanContent);
      
      if (cleanContent) {
        // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º
        const rows = cleanContent.split('*').map(row => row.trim()).filter(row => row);
        console.log('[createElementByType] Split table rows:', rows);
        
        rows.forEach((row, index) => {
          // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —á–µ—Ä—Ç–∞–º
          const columns = row.split('|').map(column => column.trim()).filter(column => column);
          console.log(`[createElementByType] Row ${index} columns:`, columns);
          
          if (index === 0) {
            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            tableHeaders = columns.map((header, colIndex) => ({
              id: colIndex + 1,
              label: header,
              sortable: true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ
            }));
          } else {
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - –¥–∞–Ω–Ω—ã–µ
            tableRows.push(columns);
          }
        });
      }
      
      console.log('[createElementByType] Final table headers:', tableHeaders);
      console.log('[createElementByType] Final table rows:', tableRows);
      
      return {
        ...baseElement,
        title: titleParam || '–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö',
        headers: tableHeaders,
        rows: tableRows,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
        showSorting: true,
        showPagination: false,
        itemsPerPage: 10,
        searchable: false
      };

    case 'multiple-cards':
      // –ü–∞—Ä—Å–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ 1] * [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ 1] * [–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ 2] * [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ 2]
      console.log('[createElementByType] Processing multiple-cards with content:', cleanContent);
      
      let cards = [];
      if (cleanContent) {
        // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã \* –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º
        const normalizedContent = cleanContent.replace(/\\\*/g, '*');
        const cardItems = normalizedContent.split('*').map(item => item.trim()).filter(item => item);
        console.log('[createElementByType] Split card items:', cardItems);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...
        for (let i = 0; i < cardItems.length; i += 2) {
          if (i + 1 < cardItems.length) {
            const cardTitle = cardItems[i];
            const cardContent = cardItems[i + 1];
            
            cards.push({
              id: Date.now() + i,
              title: cardTitle,
              content: cardContent,
              imageUrl: '', // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
              imageAlt: cardTitle,
              buttonText: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
              buttonLink: '#',
              gridSize: 'medium',
              variant: 'elevated',
              size: 'medium',
              alignment: 'left',
              showActions: false,
              customStyles: {
                backgroundColor: '#ffffff',
                borderColor: '#e0e0e0',
                borderWidth: 1,
                borderRadius: 8,
                textColor: '#333333',
                titleColor: '#1976d2',
                backgroundType: 'solid',
                gradientColor1: '#c41e3a',
                gradientColor2: '#ffd700',
                gradientDirection: 'to right'
              },
              animationSettings: {
                animationType: 'fadeIn',
                delay: i * 0.1,
                triggerOnView: true,
                triggerOnce: true,
                threshold: 0.1,
                disabled: false
              }
            });
          }
        }
      }
      
      console.log('[createElementByType] Final multiple-cards:', cards);
      
      return {
        ...baseElement,
        title: titleParam || '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏',
        description: elementData?.description || '–°–µ–∫—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏',
        cardType: 'image-card',
        gridSize: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
        cards: cards,
        sectionStyles: {
          titleColor: '#1976d2',
          descriptionColor: '#666666',
          backgroundColor: 'transparent',
          backgroundType: 'transparent',
          gradientDirection: 'to right',
          gradientStartColor: '#1976d2',
          gradientEndColor: '#42a5f5',
          padding: '20px',
          borderRadius: '0px'
        }
      };

    case 'bar-chart':
      // –ü–∞—Ä—Å–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1] - [100] * [–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2] - [200] * [–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3] - [150]
      console.log('[createElementByType] Processing bar-chart with content:', cleanContent);
      
      let barChartData = [];
      if (cleanContent) {
        // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º
        const dataItems = cleanContent.split('*').map(item => item.trim()).filter(item => item);
        console.log('[createElementByType] Split bar-chart data items:', dataItems);
        
        dataItems.forEach((item, index) => {
          // –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–∏—Å—É
          const dashIndex = item.lastIndexOf('-');
          if (dashIndex !== -1) {
            const category = item.substring(0, dashIndex).trim();
            const valueStr = item.substring(dashIndex + 1).trim();
            const value = parseInt(valueStr) || 0;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            const colors = ['#1976d2', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'];
            const color = colors[index % colors.length];
            
            barChartData.push({
              label: category,
              name: category, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
              value: value,
              color: color
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–∏—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            const numberMatch = item.match(/(\d+)/);
            if (numberMatch) {
              const value = parseInt(numberMatch[1]);
              const category = item.replace(/\d+/, '').trim() || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${index + 1}`;
              const colors = ['#1976d2', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'];
              const color = colors[index % colors.length];
              
              barChartData.push({
                label: category,
                name: category,
                value: value,
                color: color
              });
            }
          }
        });
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (barChartData.length === 0) {
        barChartData = [
          { label: '–Ø–Ω–≤–∞—Ä—å', name: '–Ø–Ω–≤–∞—Ä—å', value: 65, color: '#1976d2' },
          { label: '–§–µ–≤—Ä–∞–ª—å', name: '–§–µ–≤—Ä–∞–ª—å', value: 45, color: '#2196f3' },
          { label: '–ú–∞—Ä—Ç', name: '–ú–∞—Ä—Ç', value: 80, color: '#03a9f4' },
          { label: '–ê–ø—Ä–µ–ª—å', name: '–ê–ø—Ä–µ–ª—å', value: 55, color: '#00bcd4' }
        ];
      }
      
      console.log('[createElementByType] Final bar-chart data:', barChartData);
      
      return {
        ...baseElement,
        title: titleParam || '–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
        description: elementData.description || '', // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
        data: barChartData,
        showValues: true,
        showGrid: true,
        animate: true,
        orientation: 'vertical',
        height: 300,
        customStyles: {}, // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'advanced-line-chart':
      // –ü–∞—Ä—Å–∏–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–ö–∞—Ç–µ–≥–æ—Ä–∏—è] - [–ó–Ω–∞—á–µ–Ω–∏–µ1] - [–ó–Ω–∞—á–µ–Ω–∏–µ2] * [–ö–∞—Ç–µ–≥–æ—Ä–∏—è] - [–ó–Ω–∞—á–µ–Ω–∏–µ1] - [–ó–Ω–∞—á–µ–Ω–∏–µ2]
      console.log('[createElementByType] Processing advanced-line-chart with content:', cleanContent);
      
      let lineChartData = [];
      if (cleanContent) {
        // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º
        const dataItems = cleanContent.split('*').map(item => item.trim()).filter(item => item);
        console.log('[createElementByType] Split advanced-line-chart data items:', dataItems);
        
        dataItems.forEach((item, index) => {
          // –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–µ—Ñ–∏—Å–∞–º
          const parts = item.split('-').map(part => part.trim()).filter(part => part);
          
          if (parts.length >= 3) {
            const category = parts[0];
            const value1 = parseInt(parts[1]) || 0;
            const value2 = parseInt(parts[2]) || 0;
            
            lineChartData.push({
              name: category,
              value: value1,
              value2: value2
            });
          } else if (parts.length === 2) {
            // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ value, –≤—Ç–æ—Ä–æ–µ –∫–∞–∫ value2
            const category = parts[0];
            const value = parseInt(parts[1]) || 0;
            
            lineChartData.push({
              name: category,
              value: value,
              value2: Math.floor(value * 0.8) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ 80% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
            });
          } else if (parts.length === 1) {
            // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ
            const category = parts[0];
            const value = parseInt(category.match(/\d+/)?.[0]) || 50;
            
            lineChartData.push({
              name: category.replace(/\d+/, '').trim() || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${index + 1}`,
              value: value,
              value2: Math.floor(value * 0.8)
            });
          }
        });
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (lineChartData.length === 0) {
        lineChartData = [
          { name: '–Ø–Ω–≤', value: 400, value2: 240 },
          { name: '–§–µ–≤', value: 300, value2: 456 },
          { name: '–ú–∞—Ä', value: 300, value2: 139 },
          { name: '–ê–ø—Ä', value: 200, value2: 980 },
          { name: '–ú–∞–π', value: 278, value2: 390 },
          { name: '–ò—é–Ω', value: 189, value2: 480 }
        ];
      }
      
      console.log('[createElementByType] Final advanced-line-chart data:', lineChartData);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π –∏–∑ elementData –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const line1Name = elementData?.line1Name || '–õ–∏–Ω–∏—è 1';
      const line2Name = elementData?.line2Name || '–õ–∏–Ω–∏—è 2';
      
      console.log('[createElementByType] Line names:', { line1Name, line2Name });
      
      return {
        ...baseElement,
        title: titleParam || '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
        description: elementData?.description || '',
        data: lineChartData,
        strokeWidth: 2,
        showGrid: true,
        showLegend: true,
        titleColor: '#1976d2',
        backgroundColor: '#ffffff',
        backgroundType: 'solid',
        gradientStart: '#f5f5f5',
        gradientEnd: '#e0e0e0',
        gradientDirection: 'to bottom',
        lineColors: ['#8884d8', '#82ca9d'],
        lineNames: [line1Name, line2Name],
        gridColor: '#e0e0e0',
        axisColor: '#666666',
        tooltipBg: '#ffffff',
        legendColor: '#333333',
        borderRadius: 8,
        padding: 24,
        chartHeight: 300,
        chartWidth: '100%',
        maxWidth: '100%',
        animationSettings: {
          type: 'fadeIn',
          duration: 0.8,
          delay: 0.2
        }
      };

    case 'advanced-pie-chart':
      // –ü–∞—Ä—Å–∏–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–°–µ–≥–º–µ–Ω—Ç] - [–ó–Ω–∞—á–µ–Ω–∏–µ] * [–°–µ–≥–º–µ–Ω—Ç] - [–ó–Ω–∞—á–µ–Ω–∏–µ]
      console.log('[createElementByType] Processing advanced-pie-chart with content:', cleanContent);
      
      let pieChartData = [];
      if (cleanContent) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        let cleanedContent = cleanContent
          .replace(/\\\*/g, '*')  // –ó–∞–º–µ–Ω—è–µ–º \* –Ω–∞ *
          .replace(/\\/g, '')     // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
          .replace(/\s+/g, ' ')   // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
          .trim();
        
        console.log('[createElementByType] Cleaned content for advanced-pie-chart:', cleanedContent);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º
        const dataItems = cleanedContent.split('*').map(item => item.trim()).filter(item => item);
        console.log('[createElementByType] Split advanced-pie-chart data items:', dataItems);
        
        dataItems.forEach((item, index) => {
          console.log(`[createElementByType] Processing pie chart item ${index}: "${item}"`);
          
          // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–∏—Å—É
          const dashIndex = item.lastIndexOf('-');
          if (dashIndex !== -1) {
            const segmentName = item.substring(0, dashIndex).trim();
            const valueStr = item.substring(dashIndex + 1).trim();
            const value = parseInt(valueStr) || 0;
            
            console.log(`[createElementByType] Parsed segment: name="${segmentName}", value=${value}`);
            
            pieChartData.push({
              name: segmentName,
              value: value
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–∏—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            const numberMatch = item.match(/(\d+)/);
            if (numberMatch) {
              const value = parseInt(numberMatch[1]);
              const segmentName = item.replace(/\d+/, '').trim() || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`;
              
              console.log(`[createElementByType] Parsed segment (no dash): name="${segmentName}", value=${value}`);
              
              pieChartData.push({
                name: segmentName,
                value: value
              });
            } else {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ, —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              const segmentName = item.trim() || `–°–µ–≥–º–µ–Ω—Ç ${index + 1}`;
              const value = 10; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              
              console.log(`[createElementByType] Created default segment: name="${segmentName}", value=${value}`);
              
              pieChartData.push({
                name: segmentName,
                value: value
              });
            }
          }
        });
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (pieChartData.length === 0) {
        pieChartData = [
          { name: '–ì—Ä—É–ø–ø–∞ A', value: 400 },
          { name: '–ì—Ä—É–ø–ø–∞ B', value: 300 },
          { name: '–ì—Ä—É–ø–ø–∞ C', value: 300 },
          { name: '–ì—Ä—É–ø–ø–∞ D', value: 200 }
        ];
      }
      
      console.log('[createElementByType] Final advanced-pie-chart data:', pieChartData);
      
      return {
        ...baseElement,
        title: titleParam || '–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
        data: pieChartData,
        showLabels: true,
        showPercentage: true,
        titleColor: '#1976d2',
        backgroundColor: '#ffffff',
        backgroundType: 'solid',
        gradientStart: '#f5f5f5',
        gradientEnd: '#e0e0e0',
        gradientDirection: 'to bottom',
        pieColors: ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#0088fe', '#00c49f', '#ffbb28', '#ff8042'],
        tooltipBg: '#ffffff',
        legendColor: '#333333',
        borderRadius: 1,
        padding: 1,
        chartSize: 700,
        showLegend: true,
        customStyles: {},
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };

    case 'image-gallery':
      // –ü–∞—Ä—Å–∏–º –≥–∞–ª–µ—Ä–µ—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: –æ–ø–∏—Å–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏
      console.log('[createElementByType] Processing image-gallery with content:', cleanContent);
      
      return {
        ...baseElement,
        title: titleParam || '–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        description: cleanContent || '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
        images: [], // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
        autoScroll: true,
        scrollInterval: 3000,
        position: 'center',
        maxHeight: 400,
        fillContainer: false
      };

    case 'chartjs-doughnut': {
      // –ü–∞—Ä—Å–∏–º –ø–æ–Ω—á–∏–∫–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–°–µ–≥–º–µ–Ω—Ç] - [–ó–Ω–∞—á–µ–Ω–∏–µ] * [–°–µ–≥–º–µ–Ω—Ç] - [–ó–Ω–∞—á–µ–Ω–∏–µ]
      console.log('[createElementByType] Processing chartjs-doughnut with content:', cleanContent);
      let labels = [];
      let data = [];
      let backgroundColor = [
        'rgba(255, 99, 132, 0.8)',
        'rgba(54, 162, 235, 0.8)',
        'rgba(255, 205, 86, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(153, 102, 255, 0.8)',
        'rgba(255, 159, 64, 0.8)'
      ];
      let borderColor = [
        'rgba(255, 99, 132, 1)',
        'rgba(54, 162, 235, 1)',
        'rgba(255, 205, 86, 1)',
        'rgba(75, 192, 192, 1)',
        'rgba(153, 102, 255, 1)',
        'rgba(255, 159, 64, 1)'
      ];
      let borderWidth = 2;
      if (cleanContent) {
        let cleanedContent = cleanContent
          .replace(/\\\*/g, '*')
          .replace(/\\/g, '')
          .replace(/\s+/g, ' ')
          .trim();
        const dataItems = cleanedContent.split('*').map(item => item.trim()).filter(item => item);
        dataItems.forEach((item, idx) => {
          const dashIndex = item.lastIndexOf('-');
          if (dashIndex !== -1) {
            const label = item.substring(0, dashIndex).trim();
            const valueStr = item.substring(dashIndex + 1).trim();
            const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
            labels.push(label);
            data.push(value);
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–∏—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
            const numberMatch = item.match(/(\d+)/);
            if (numberMatch) {
              const value = parseFloat(numberMatch[1]);
              const label = item.replace(/\d+/, '').trim() || `–°–µ–≥–º–µ–Ω—Ç ${idx + 1}`;
              labels.push(label);
              data.push(value);
            } else {
              labels.push(item.trim() || `–°–µ–≥–º–µ–Ω—Ç ${idx + 1}`);
              data.push(10);
            }
          }
        });
      }
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (labels.length === 0 || data.length === 0) {
        labels = ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ñ–µ–ª—Ç—ã–π', '–ó–µ–ª–µ–Ω—ã–π', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–û—Ä–∞–Ω–∂–µ–≤—ã–π'];
        data = [12, 19, 3, 5, 2, 3];
      }
      const chartData = {
        labels,
        datasets: [
          {
            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤',
            data,
            backgroundColor: backgroundColor.slice(0, labels.length),
            borderColor: borderColor.slice(0, labels.length),
            borderWidth
          }
        ]
      };
      return {
        ...baseElement,
        title: titleParam || '–ü–æ–Ω—á–∏–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
        chartData: chartData, // –î–æ–±–∞–≤–ª—è–µ–º chartData –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ChartJSDoughnutChart
        data: {
          title: titleParam || '–ü–æ–Ω—á–∏–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
          data: chartData,
          showLegend: true,
          titleColor: '#1976d2',
          backgroundColor: '#ffffff',
          backgroundType: 'solid',
          gradientStart: '#f5f5f5',
          gradientEnd: '#e0e0e0',
          gradientDirection: 'to bottom',
          borderRadius: 8,
          padding: 24,
          chartSize: 400,
          cutout: '50%',
          centerText: '',
          showCenterText: false,
          animationSettings: {
            animationType: 'scaleIn',
            delay: 0,
            triggerOnView: true,
            triggerOnce: true,
            threshold: 0.1,
            disabled: false
          }
        },
        showLegend: true,
        titleColor: '#1976d2',
        backgroundColor: '#ffffff',
        backgroundType: 'solid',
        gradientStart: '#f5f5f5',
        gradientEnd: '#e0e0e0',
        gradientDirection: 'to bottom',
        borderRadius: 8,
        padding: 24,
        chartSize: 400,
        cutout: '50%',
        centerText: '',
        showCenterText: false,
        animationSettings: {
          animationType: 'scaleIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
    }

    case 'chartjs-bar': {
      // –ü–∞—Ä—Å–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É Chart.js —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
      console.log('[createElementByType] Processing chartjs-bar with title:', titleParam);
      console.log('[createElementByType] Processing chartjs-bar with datasets:', elementData.dataset1, elementData.dataset2);
      console.log('[createElementByType] Processing chartjs-bar with labels:', elementData.labels);
      
      // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∫–∏ –æ—Å–∏ X
      let labels = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å'];
      if (elementData.labels) {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—è—Ç—ã–µ, —Ç–∞–∫ –∏ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        labels = elementData.labels.split(/[,;]/).map(label => label.trim()).filter(label => label);
        console.log('[createElementByType] Parsed labels from –ú–ï–¢–ö–ò_–û–°–ò_X:', labels);
      }
      
      let datasets = [];
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEX —Ü–≤–µ—Ç –≤ rgba –¥–ª—è Chart.js (–≤—ã–Ω–æ—Å–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —Ñ—É–Ω–∫—Ü–∏–∏)
      const hexToRgba = (hex, alpha = 0.8) => {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
      };
      
      // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
      if (elementData.dataset1) {
        console.log('[createElementByType] Parsing dataset1:', elementData.dataset1);
        const dataset1Parts = elementData.dataset1.split(' - ');
        const dataset1Name = dataset1Parts[0] || '–ù–∞–±–æ—Ä 1';
        const dataset1Color = dataset1Parts[1] && dataset1Parts[1].startsWith('#') ? dataset1Parts[1] : '#1976d2';
        const dataset1Data = [];
        
        console.log('[createElementByType] Dataset1 name:', dataset1Name);
        console.log('[createElementByType] Dataset1 color:', dataset1Color);
        console.log('[createElementByType] Dataset1 parts:', dataset1Parts);
        
        if (dataset1Parts.length > 2) {
          const dataString = dataset1Parts.slice(2).join(' - ');
          console.log('[createElementByType] Dataset1 data string:', dataString);
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ, —Ç–∞–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          console.log('[createElementByType] Dataset1 data items:', dataItems);
          
          dataItems.forEach((item, idx) => {
            console.log(`[createElementByType] Processing dataset1 item ${idx}: "${item}"`);
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              console.log(`[createElementByType] Extracted value from "${item}": ${value}`);
              dataset1Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                const value = parseFloat(numberMatch[1]);
                console.log(`[createElementByType] Extracted value from "${item}" (no dash): ${value}`);
                dataset1Data.push(value);
              } else {
                console.log(`[createElementByType] No value found in "${item}", using 0`);
                dataset1Data.push(0);
              }
            }
          });
        }
        
        console.log('[createElementByType] Final dataset1 data:', dataset1Data);
        
        datasets.push({
          label: dataset1Name,
          data: dataset1Data,
          backgroundColor: hexToRgba(dataset1Color, 0.2),
          borderColor: hexToRgba(dataset1Color, 1),
          borderWidth: 1
        });
      }
      
      // –ü–∞—Ä—Å–∏–º –≤—Ç–æ—Ä–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
      if (elementData.dataset2) {
        console.log('[createElementByType] Parsing dataset2:', elementData.dataset2);
        const dataset2Parts = elementData.dataset2.split(' - ');
        const dataset2Name = dataset2Parts[0] || '–ù–∞–±–æ—Ä 2';
        const dataset2Color = dataset2Parts[1] && dataset2Parts[1].startsWith('#') ? dataset2Parts[1] : '#ff6b6b';
        const dataset2Data = [];
        
        console.log('[createElementByType] Dataset2 name:', dataset2Name);
        console.log('[createElementByType] Dataset2 color:', dataset2Color);
        console.log('[createElementByType] Dataset2 parts:', dataset2Parts);
        
        if (dataset2Parts.length > 2) {
          const dataString = dataset2Parts.slice(2).join(' - ');
          console.log('[createElementByType] Dataset2 data string:', dataString);
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ, —Ç–∞–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          console.log('[createElementByType] Dataset2 data items:', dataItems);
          
          dataItems.forEach((item, idx) => {
            console.log(`[createElementByType] Processing dataset2 item ${idx}: "${item}"`);
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              console.log(`[createElementByType] Extracted value from "${item}": ${value}`);
              dataset2Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                const value = parseFloat(numberMatch[1]);
                console.log(`[createElementByType] Extracted value from "${item}" (no dash): ${value}`);
                dataset2Data.push(value);
              } else {
                console.log(`[createElementByType] No value found in "${item}", using 0`);
                dataset2Data.push(0);
              }
            }
          });
        }
        
        console.log('[createElementByType] Final dataset2 data:', dataset2Data);
        
        datasets.push({
          label: dataset2Name,
          data: dataset2Data,
          backgroundColor: hexToRgba(dataset2Color, 0.2),
          borderColor: hexToRgba(dataset2Color, 1),
          borderWidth: 1
        });
      }
      
      // –ü–∞—Ä—Å–∏–º —Ç—Ä–µ—Ç–∏–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
      if (elementData.dataset3) {
        console.log('[createElementByType] Parsing dataset3:', elementData.dataset3);
        const dataset3Parts = elementData.dataset3.split(' - ');
        const dataset3Name = dataset3Parts[0] || '–ù–∞–±–æ—Ä 3';
        const dataset3Color = dataset3Parts[1] && dataset3Parts[1].startsWith('#') ? dataset3Parts[1] : '#4caf50';
        const dataset3Data = [];
        
        console.log('[createElementByType] Dataset3 name:', dataset3Name);
        console.log('[createElementByType] Dataset3 color:', dataset3Color);
        
        if (dataset3Parts.length > 2) {
          const dataString = dataset3Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              dataset3Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                dataset3Data.push(parseFloat(numberMatch[1]));
              } else {
                dataset3Data.push(0);
              }
            }
          });
        }
        
        datasets.push({
          label: dataset3Name,
          data: dataset3Data,
          backgroundColor: hexToRgba(dataset3Color, 0.2),
          borderColor: hexToRgba(dataset3Color, 1),
          borderWidth: 1
        });
      }
      
      // –ü–∞—Ä—Å–∏–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
      if (elementData.dataset4) {
        console.log('[createElementByType] Parsing dataset4:', elementData.dataset4);
        const dataset4Parts = elementData.dataset4.split(' - ');
        const dataset4Name = dataset4Parts[0] || '–ù–∞–±–æ—Ä 4';
        const dataset4Color = dataset4Parts[1] && dataset4Parts[1].startsWith('#') ? dataset4Parts[1] : '#ff9800';
        const dataset4Data = [];
        
        console.log('[createElementByType] Dataset4 name:', dataset4Name);
        console.log('[createElementByType] Dataset4 color:', dataset4Color);
        
        if (dataset4Parts.length > 2) {
          const dataString = dataset4Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              dataset4Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                dataset4Data.push(parseFloat(numberMatch[1]));
              } else {
                dataset4Data.push(0);
              }
            }
          });
        }
        
        datasets.push({
          label: dataset4Name,
          data: dataset4Data,
          backgroundColor: hexToRgba(dataset4Color, 0.2),
          borderColor: hexToRgba(dataset4Color, 1),
          borderWidth: 1
        });
      }
      
      // –ü–∞—Ä—Å–∏–º –ø—è—Ç—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
      if (elementData.dataset5) {
        console.log('[createElementByType] Parsing dataset5:', elementData.dataset5);
        const dataset5Parts = elementData.dataset5.split(' - ');
        const dataset5Name = dataset5Parts[0] || '–ù–∞–±–æ—Ä 5';
        const dataset5Color = dataset5Parts[1] && dataset5Parts[1].startsWith('#') ? dataset5Parts[1] : '#9c27b0';
        const dataset5Data = [];
        
        console.log('[createElementByType] Dataset5 name:', dataset5Name);
        console.log('[createElementByType] Dataset5 color:', dataset5Color);
        
        if (dataset5Parts.length > 2) {
          const dataString = dataset5Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              dataset5Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                dataset5Data.push(parseFloat(numberMatch[1]));
              } else {
                dataset5Data.push(0);
              }
            }
          });
        }
        
        datasets.push({
          label: dataset5Name,
          data: dataset5Data,
          backgroundColor: hexToRgba(dataset5Color, 0.2),
          borderColor: hexToRgba(dataset5Color, 1),
          borderWidth: 1
        });
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (datasets.length === 0 && cleanContent) {
        let cleanedContent = cleanContent
          .replace(/\\\*/g, '*')
          .replace(/\\/g, '')
          .replace(/\s+/g, ' ')
          .trim();
        
        const dataItems = cleanedContent.split('*').map(item => item.trim()).filter(item => item);
        const data = [];
        
        dataItems.forEach((item, idx) => {
          const dashIndex = item.lastIndexOf('-');
          if (dashIndex !== -1) {
            const valueStr = item.substring(dashIndex + 1).trim();
            const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
            data.push(value);
          } else {
            const numberMatch = item.match(/(\d+)/);
            if (numberMatch) {
              data.push(parseFloat(numberMatch[1]));
            } else {
              data.push(0);
            }
          }
        });
        
        datasets.push({
          label: titleParam || '–î–∞–Ω–Ω—ã–µ',
          data: data,
          backgroundColor: 'rgba(54, 162, 235, 0.8)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1
        });
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ
      if (datasets.length === 0) {
        datasets = [
          {
            label: '–ü—Ä–æ–¥–∞–∂–∏',
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: 'rgba(54, 162, 235, 0.8)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          },
          {
            label: '–ü—Ä–∏–±—ã–ª—å',
            data: [2, 3, 20, 5, 1, 4],
            backgroundColor: 'rgba(255, 99, 132, 0.8)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
          }
        ];
      }
      
      console.log('[createElementByType] Final chart data:', { labels, datasets });
      
      const chartData = {
        labels,
        datasets
      };
      
      return {
        ...baseElement,
        title: titleParam || '–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ Chart.js',
        chartData: chartData, // –î–æ–±–∞–≤–ª—è–µ–º chartData –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ChartJSBarChart
        data: {
          data: chartData,
          showLegend: true,
          titleColor: elementData.titleColor || '#1976d2',
          backgroundColor: elementData.backgroundColor || '#ffffff',
          backgroundType: elementData.backgroundType || 'solid',
          gradientStart: '#f5f5f5',
          gradientEnd: '#e0e0e0',
          gradientDirection: 'to bottom',
          borderRadius: 8,
          padding: 24,
          chartHeight: 500,
          chartWidth: '100%',
          centerChart: true,
          animationSettings: {
            animationType: 'fadeIn',
            delay: 0,
            triggerOnView: true,
            triggerOnce: true,
            threshold: 0.1,
            disabled: false
          }
        },
        showLegend: true,
        titleColor: elementData.titleColor || '#1976d2',
        backgroundColor: elementData.backgroundColor || '#ffffff',
        backgroundType: elementData.backgroundType || 'solid',
        gradientStart: '#f5f5f5',
        gradientEnd: '#e0e0e0',
        gradientDirection: 'to bottom',
        borderRadius: 8,
        padding: 24,
        chartHeight: 500,
        chartWidth: '100%',
        centerChart: true,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
    }

    case 'advanced-area-chart': {
      // –ü–∞—Ä—Å–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –æ–±–ª–∞—Å—Ç—è–º–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: [–ü–µ—Ä–∏–æ–¥] - [–ó–Ω–∞—á–µ–Ω–∏–µ1], [–ó–Ω–∞—á–µ–Ω–∏–µ2] * [–ü–µ—Ä–∏–æ–¥] - [–ó–Ω–∞—á–µ–Ω–∏–µ1], [–ó–Ω–∞—á–µ–Ω–∏–µ2]
      console.log('üîçüîçüîç [ADVANCED-AREA-CHART PARSER] START');
      console.log('[createElementByType] Processing advanced-area-chart with content:', cleanContent);
      console.log('[createElementByType] titleParam:', titleParam);
      console.log('[createElementByType] elementData:', elementData);
      let areaData = [];
      
      if (cleanContent) {
        let cleanedContent = cleanContent
          .replace(/\\\*/g, '*')
          .replace(/\\/g, '')
          .replace(/\s+/g, ' ')
          .trim();
        console.log('üîß [PARSER] cleanedContent:', cleanedContent);
        const dataItems = cleanedContent.split('*').map(item => item.trim()).filter(item => item);
        console.log('üîß [PARSER] dataItems:', dataItems);
        
        dataItems.forEach((item, idx) => {
          console.log(`üîß [PARSER] Processing item ${idx}:`, item);
          const dashIndex = item.lastIndexOf('-');
          if (dashIndex !== -1) {
            const name = item.substring(0, dashIndex).trim();
            const valuesStr = item.substring(dashIndex + 1).trim();
            const values = valuesStr.split(',').map(v => parseFloat(v.trim().replace(/[^\d.]/g, '')) || 0);
            
            console.log(`üîß [PARSER] Item ${idx} - name:`, name, 'valuesStr:', valuesStr, 'values:', values);
            
            const dataPoint = {
              name: name || `–ü–µ—Ä–∏–æ–¥ ${idx + 1}`,
              value: values[0] || 0,
              value2: values[1] || 0
            };
            console.log(`üîß [PARSER] Created dataPoint:`, dataPoint);
            areaData.push(dataPoint);
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–∏—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–∞
            const numberMatches = item.match(/(\d+)/g);
            if (numberMatches && numberMatches.length >= 2) {
              const value = parseFloat(numberMatches[0]);
              const value2 = parseFloat(numberMatches[1]);
              const name = item.replace(/\d+/g, '').trim() || `–ü–µ—Ä–∏–æ–¥ ${idx + 1}`;
              areaData.push({ name, value, value2 });
            } else {
              areaData.push({
                name: item.trim() || `–ü–µ—Ä–∏–æ–¥ ${idx + 1}`,
                value: 400,
                value2: 240
              });
            }
          }
        });
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (areaData.length === 0) {
        areaData = [
          { name: '–Ø–Ω–≤', value: 400, value2: 240 },
          { name: '–§–µ–≤', value: 300, value2: 456 },
          { name: '–ú–∞—Ä', value: 300, value2: 139 },
          { name: '–ê–ø—Ä', value: 200, value2: 980 },
          { name: '–ú–∞–π', value: 278, value2: 390 },
          { name: '–ò—é–Ω', value: 189, value2: 480 }
        ];
      }
      
      console.log('üîß [PARSER] Final areaData:', areaData);
      console.log('üîß [PARSER] elementData.line1Name:', elementData.line1Name);
      console.log('üîß [PARSER] elementData.line2Name:', elementData.line2Name);
      
      const result = {
        ...baseElement,
        title: titleParam || '–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –æ–±–ª–∞—Å—Ç—è–º–∏',
        data: areaData,
        showGrid: true,
        showLegend: true,
        stacked: true,
        areaNames: [
          elementData.line1Name || '–û–±–ª–∞—Å—Ç—å 1',
          elementData.line2Name || '–û–±–ª–∞—Å—Ç—å 2'
        ],
        customStyles: {},
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
      
      console.log('üîçüîçüîç [ADVANCED-AREA-CHART PARSER] RESULT:', result);
      return result;
    }

    case 'apex-line': {
      // –ü–∞—Ä—Å–∏–º –ª–∏–Ω–µ–π–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É ApexCharts —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
      console.log('[createElementByType] Processing apex-line with series:', elementData.series1, elementData.series2);
      console.log('[createElementByType] Processing apex-line with labels:', elementData.apexLabels);
      
      // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∫–∏ –æ—Å–∏ X
      let labels = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω'];
      if (elementData.apexLabels) {
        labels = elementData.apexLabels.split(',').map(label => label.trim()).filter(label => label);
        console.log('[createElementByType] Parsed apex labels from prompt:', labels);
      }
      
      let series = [];
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEX —Ü–≤–µ—Ç –≤ rgba –¥–ª—è ApexCharts
      const hexToRgba = (hex, alpha = 0.8) => {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
      };
      
      // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
      if (elementData.series1) {
        console.log('[createElementByType] Parsing series1:', elementData.series1);
        const series1Parts = elementData.series1.split(' - ');
        const series1Name = series1Parts[0] || '–°–µ—Ä–∏—è 1';
        const series1Color = series1Parts[1] && series1Parts[1].startsWith('#') ? series1Parts[1] : '#1976d2';
        const series1Data = [];
        
        console.log('[createElementByType] Series1 name:', series1Name);
        console.log('[createElementByType] Series1 color:', series1Color);
        
        if (series1Parts.length > 2) {
          const dataString = series1Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              series1Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                series1Data.push(parseFloat(numberMatch[1]));
              } else {
                series1Data.push(0);
              }
            }
          });
        }
        
        series.push({
          name: series1Name,
          data: series1Data,
          color: series1Color
        });
      }
      
      // –ü–∞—Ä—Å–∏–º –≤—Ç–æ—Ä—É—é —Å–µ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
      if (elementData.series2) {
        console.log('[createElementByType] Parsing series2:', elementData.series2);
        const series2Parts = elementData.series2.split(' - ');
        const series2Name = series2Parts[0] || '–°–µ—Ä–∏—è 2';
        const series2Color = series2Parts[1] && series2Parts[1].startsWith('#') ? series2Parts[1] : '#ff6b6b';
        const series2Data = [];
        
        console.log('[createElementByType] Series2 name:', series2Name);
        console.log('[createElementByType] Series2 color:', series2Color);
        
        if (series2Parts.length > 2) {
          const dataString = series2Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              series2Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                series2Data.push(parseFloat(numberMatch[1]));
              } else {
                series2Data.push(0);
              }
            }
          });
        }
        
        series.push({
          name: series2Name,
          data: series2Data,
          color: series2Color
        });
      }
      
      // –ü–∞—Ä—Å–∏–º —Ç—Ä–µ—Ç—å—é —Å–µ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
      if (elementData.series3) {
        console.log('[createElementByType] Parsing series3:', elementData.series3);
        const series3Parts = elementData.series3.split(' - ');
        const series3Name = series3Parts[0] || '–°–µ—Ä–∏—è 3';
        const series3Color = series3Parts[1] && series3Parts[1].startsWith('#') ? series3Parts[1] : '#4caf50';
        const series3Data = [];
        
        if (series3Parts.length > 2) {
          const dataString = series3Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              series3Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                series3Data.push(parseFloat(numberMatch[1]));
              } else {
                series3Data.push(0);
              }
            }
          });
        }
        
        series.push({
          name: series3Name,
          data: series3Data,
          color: series3Color
        });
      }
      
      // –ü–∞—Ä—Å–∏–º —á–µ—Ç–≤–µ—Ä—Ç—É—é —Å–µ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
      if (elementData.series4) {
        console.log('[createElementByType] Parsing series4:', elementData.series4);
        const series4Parts = elementData.series4.split(' - ');
        const series4Name = series4Parts[0] || '–°–µ—Ä–∏—è 4';
        const series4Color = series4Parts[1] && series4Parts[1].startsWith('#') ? series4Parts[1] : '#ff9800';
        const series4Data = [];
        
        if (series4Parts.length > 2) {
          const dataString = series4Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              series4Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                series4Data.push(parseFloat(numberMatch[1]));
              } else {
                series4Data.push(0);
              }
            }
          });
        }
        
        series.push({
          name: series4Name,
          data: series4Data,
          color: series4Color
        });
      }
      
      // –ü–∞—Ä—Å–∏–º –ø—è—Ç—É—é —Å–µ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
      if (elementData.series5) {
        console.log('[createElementByType] Parsing series5:', elementData.series5);
        const series5Parts = elementData.series5.split(' - ');
        const series5Name = series5Parts[0] || '–°–µ—Ä–∏—è 5';
        const series5Color = series5Parts[1] && series5Parts[1].startsWith('#') ? series5Parts[1] : '#9c27b0';
        const series5Data = [];
        
        if (series5Parts.length > 2) {
          const dataString = series5Parts.slice(2).join(' - ');
          const dataItems = dataString.replace(/\\\*/g, '*').split(' * ').map(item => item.trim()).filter(item => item);
          
          dataItems.forEach((item, idx) => {
            const dashIndex = item.lastIndexOf(' - ');
            if (dashIndex !== -1) {
              const valueStr = item.substring(dashIndex + 3).trim();
              const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
              series5Data.push(value);
            } else {
              const numberMatch = item.match(/(\d+)/);
              if (numberMatch) {
                series5Data.push(parseFloat(numberMatch[1]));
              } else {
                series5Data.push(0);
              }
            }
          });
        }
        
        series.push({
          name: series5Name,
          data: series5Data,
          color: series5Color
        });
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (series.length === 0 && cleanContent) {
        let cleanedContent = cleanContent
          .replace(/\\\*/g, '*')
          .replace(/\\/g, '')
          .replace(/\s+/g, ' ')
          .trim();
        
        const dataItems = cleanedContent.split('*').map(item => item.trim()).filter(item => item);
        const data = [];
        
        dataItems.forEach((item, idx) => {
          const dashIndex = item.lastIndexOf('-');
          if (dashIndex !== -1) {
            const valueStr = item.substring(dashIndex + 1).trim();
            const value = parseFloat(valueStr.replace(/[^\d.]/g, '')) || 0;
            data.push(value);
          } else {
            const numberMatch = item.match(/(\d+)/);
            if (numberMatch) {
              data.push(parseFloat(numberMatch[1]));
            } else {
              data.push(0);
            }
          }
        });
        
        series.push({
          name: titleParam || '–î–∞–Ω–Ω—ã–µ',
          data: data,
          color: '#1976d2'
        });
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ
      if (series.length === 0) {
        series = [
          {
            name: '–ü—Ä–æ–¥–∞–∂–∏',
            data: [10, 41, 35, 51, 49, 62, 69, 91, 148],
            color: '#1976d2'
          },
          {
            name: '–ü—Ä–∏–±—ã–ª—å',
            data: [5, 20, 18, 25, 24, 31, 35, 45, 74],
            color: '#ff6b6b'
          }
        ];
      }
      
      console.log('[createElementByType] Final apex-line data:', { labels, series });
      
      return {
        ...baseElement,
        title: titleParam || '–õ–∏–Ω–µ–π–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ ApexCharts',
        data: {
          labels,
          series
        },
        showLegend: true,
        titleColor: elementData.titleColor || '#1976d2',
        backgroundColor: elementData.backgroundColor || '#ffffff',
        backgroundType: elementData.backgroundType || 'solid',
        gradientStart: '#f5f5f5',
        gradientEnd: '#e0e0e0',
        gradientDirection: 'to bottom',
        borderRadius: 8,
        padding: 24,
        chartHeight: 300,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
    }

    case 'cta-section': {
      // –ü–∞—Ä—Å–∏–º CTA —Å–µ–∫—Ü–∏—é: [–æ–ø–∏—Å–∞–Ω–∏–µ] * [—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏] * [—Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞]
      let description = '';
      let buttonText = '';
      let targetPage = 'contact';
      
      if (cleanContent) {
        const parts = cleanContent.split('*').map(part => part.trim()).filter(part => part);
        if (parts.length >= 3) {
          description = parts[0];
          buttonText = parts[1];
          targetPage = parts[2];
        } else if (parts.length === 2) {
          description = parts[0];
          buttonText = parts[1];
        } else if (parts.length === 1) {
          description = parts[0];
          buttonText = '–ü–µ—Ä–µ–π—Ç–∏';
        }
      }
      
      console.log('[createElementByType] CTA section parsed:', { 
        description, 
        buttonText, 
        targetPage, 
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        title: titleParam || '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
        description: description || '–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö',
        buttonText: buttonText || '–ü–µ—Ä–µ–π—Ç–∏',
        targetPage: targetPage || 'contact',
        alignment: 'center',
        backgroundType: 'solid',
        backgroundColor: '#1976d2',
        textColor: '#ffffff',
        titleColor: '#ffffff',
        descriptionColor: '#ffffff',
        buttonColor: '#ffd700',
        buttonTextColor: '#000000',
        borderRadius: 12,
        padding: 48,
        buttonBorderRadius: 8,
        showShadow: true,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        },
        colorSettings: {
          textFields: {
            title: '#ffffff',
            description: '#ffffff',
            background: '#1976d2',
            border: 'transparent',
            button: '#ffd700',
            buttonText: '#000000',
            buttonBorderRadius: 8
          },
          sectionBackground: {
            enabled: false,
            useGradient: false,
            solidColor: '#1976d2',
            gradientColor1: '#1976d2',
            gradientColor2: '#42a5f5',
            gradientDirection: 'to right'
          },
          borderColor: 'transparent',
          borderWidth: 0,
          borderRadius: 12,
          padding: 48,
          boxShadow: true
        }
      };
    }

    case 'advanced-contact-form': {
      // –ü–∞—Ä—Å–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É: [–º–µ—Ç–∫–∞ –∏–º–µ–Ω–∏] * [–º–µ—Ç–∫–∞ email] * [–º–µ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞] * [–º–µ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏] * [–º–µ—Ç–∫–∞ —Ç–µ–º—ã] * [–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è] * [—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏] * [—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ] * [—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏] * [—Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è] * [–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–º–µ–Ω–∏] * [–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä email] * [–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] * [–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏] * [–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è] * [–æ–ø—Ü–∏—è —Ç–µ–º—ã 1] * [–æ–ø—Ü–∏—è —Ç–µ–º—ã 2] * [–æ–ø—Ü–∏—è —Ç–µ–º—ã 3] * [–æ–ø—Ü–∏—è —Ç–µ–º—ã 4]
      let fieldLabels = {
        name: '–ò–º—è',
        email: 'Email',
        phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
        company: '–ö–æ–º–ø–∞–Ω–∏—è',
        subject: '–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è',
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ',
        newsletter: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏',
        terms: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        submitButton: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
        submittingButton: '–û—Ç–ø—Ä–∞–≤–∫–∞...'
      };
      let placeholders = {
        name: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
        email: 'example@domain.com',
        phone: '+7 (999) 123-45-67',
        company: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
        message: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ...'
      };
      let subjectOptions = [
        { value: 'general', label: '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å' },
        { value: 'support', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
        { value: 'sales', label: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂' },
        { value: 'partnership', label: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ' }
      ];
      
      if (cleanContent) {
        const parts = cleanContent.split('*').map(part => part.trim()).filter(part => part);
        console.log('[createElementByType] Advanced contact form parts:', parts);
        console.log('[createElementByType] Advanced contact form titleParam:', titleParam);
        
        // –û–∂–∏–¥–∞–µ–º 19 –ø–æ–ª–µ–π (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤ –°–û–î–ï–†–ñ–ò–ú–û–ï)
        if (parts.length >= 19) {
          fieldLabels.name = parts[0];
          fieldLabels.email = parts[1];
          fieldLabels.phone = parts[2];
          fieldLabels.company = parts[3];
          fieldLabels.subject = parts[4];
          fieldLabels.message = parts[5];
          fieldLabels.submitButton = parts[6];
          fieldLabels.submittingButton = parts[7];
          fieldLabels.newsletter = parts[8];
          fieldLabels.terms = parts[9];
          placeholders.name = parts[10];
          placeholders.email = parts[11];
          placeholders.phone = parts[12];
          placeholders.company = parts[13];
          placeholders.message = parts[14];
          subjectOptions[0].label = parts[15];
          subjectOptions[1].label = parts[16];
          subjectOptions[2].label = parts[17];
          subjectOptions[3].label = parts[18];
        } else if (parts.length >= 10) {
          fieldLabels.name = parts[0];
          fieldLabels.email = parts[1];
          fieldLabels.phone = parts[2];
          fieldLabels.company = parts[3];
          fieldLabels.subject = parts[4];
          fieldLabels.message = parts[5];
          fieldLabels.submitButton = parts[6];
          fieldLabels.submittingButton = parts[7];
          fieldLabels.newsletter = parts[8];
          if (parts[9]) fieldLabels.terms = parts[9];
        } else if (parts.length >= 4) {
          fieldLabels.name = parts[0];
          fieldLabels.email = parts[1];
          fieldLabels.phone = parts[2];
          if (parts[3]) fieldLabels.company = parts[3];
          if (parts[4]) fieldLabels.subject = parts[4];
          if (parts[5]) fieldLabels.message = parts[5];
          if (parts[6]) fieldLabels.submitButton = parts[6];
        }
      }
      
      console.log('[createElementByType] Advanced contact form parsed:', { 
        titleParam,
        fieldLabels, 
        placeholders, 
        subjectOptions,
        originalContent: cleanContent 
      });
      
      return {
        ...baseElement,
        title: titleParam || '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞',
        formTitle: titleParam || '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞',
        fieldLabels: fieldLabels,
        placeholders: placeholders,
        subjectOptions: subjectOptions,
        validationMessages: {
          nameRequired: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
          emailRequired: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          emailInvalid: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
          phoneRequired: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          phoneInvalid: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          subjectRequired: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É',
          messageRequired: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
          termsRequired: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏'
        },
        alignment: 'center',
        backgroundType: 'solid',
        backgroundColor: '#ffffff',
        textColor: '#333333',
        titleColor: '#1976d2',
        borderRadius: 12,
        padding: 32,
        showShadow: true,
        animationSettings: {
          animationType: 'fadeIn',
          delay: 0,
          triggerOnView: true,
          triggerOnce: true,
          threshold: 0.1,
          disabled: false
        }
      };
    }



    default:
      return baseElement;
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
export const parseAIElements = (content) => {
  console.log('parseAIElements –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
  console.log('parseAIElements –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', content.length);
  console.log('parseAIElements –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', content.substring(0, 200));
  const lines = content.split('\n');
  console.log('parseAIElements –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', lines.length);
  const elements = [];
  let currentElement = null;
  let state = 'waiting'; // waiting, type, title, content
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim().replace(/\\_/g, '_'); // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
    console.log(`üîç –°—Ç—Ä–æ–∫–∞ ${i}: "${line}"`);
    
    if (!line) {
      // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ typography, list, gradient-text, typewriter-text, highlight-text, testimonial-card, share-buttons, faq-section, rating, progress-bars, timeline-component, data-table, image-gallery, multiple-cards, bar-chart, advanced-line-chart, advanced-pie-chart, apex-line, cta-section, advanced-contact-form, full-multipage-site –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      const requiresTitle = !['typography', 'list', 'gradient-text', 'typewriter-text', 'highlight-text', 'testimonial-card', 'share-buttons', 'faq-section', 'rating', 'progress-bars', 'timeline-component', 'data-table', 'image-gallery', 'multiple-cards', 'bar-chart', 'advanced-line-chart', 'advanced-pie-chart', 'apex-line', 'cta-section', 'advanced-contact-form', 'full-multipage-site'].includes(currentElement?.type?.toLowerCase());
      console.log(`üîç –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - currentElement:`, currentElement, `requiresTitle:`, requiresTitle);
      if (currentElement && currentElement.type && (currentElement.title || !requiresTitle)) {
        console.log('üîö –ó–∞–≤–µ—Ä—à–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ:', currentElement);
        console.log('üîö –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', currentElement.content);
        elements.push(createElementByType(
          currentElement.type, 
          currentElement.title || '', 
          currentElement.content || '', 
          elements.length,
          currentElement
        ));
        currentElement = null;
        state = 'waiting';
      }
      continue;
    }
    
    if (line.match(/^–¢–ò–ü:\s*(.+)$/i) || line.match(/^TYPE:\s*(.+)$/i)) {
      // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ typography, list, gradient-text, typewriter-text, highlight-text, testimonial-card, share-buttons, faq-section, rating, progress-bars, timeline-component, data-table, image-gallery, multiple-cards, bar-chart, advanced-line-chart, advanced-pie-chart, advanced-area-chart, apex-line, cta-section, advanced-contact-form, full-multipage-site –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      const requiresTitle = !['typography', 'list', 'gradient-text', 'typewriter-text', 'highlight-text', 'testimonial-card', 'share-buttons', 'faq-section', 'rating', 'progress-bars', 'timeline-component', 'data-table', 'image-gallery', 'multiple-cards', 'bar-chart', 'advanced-line-chart', 'advanced-pie-chart', 'advanced-area-chart', 'apex-line', 'cta-section', 'advanced-contact-form', 'full-multipage-site'].includes(currentElement?.type?.toLowerCase());
      if (currentElement && currentElement.type && (currentElement.title || !requiresTitle)) {
        console.log('üîö –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç:', currentElement);
        elements.push(createElementByType(
          currentElement.type, 
          currentElement.title || '', 
          currentElement.content || '', 
          elements.length,
          currentElement
        ));
      }
      
      const typeMatch = line.match(/^(?:–¢–ò–ü|TYPE):\s*(.+)$/i);
      currentElement = {
        type: typeMatch[1].trim(),
        title: '',
        content: '',
        calloutType: '', // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –≤—ã–Ω–æ—Å–∫–∏
        // –ü–æ–ª—è –¥–ª—è gradient-text
        text: '',
        direction: '',
        color1: '',
        color2: '',
        fontSize: '',
        fontWeight: '',
        // –ü–æ–ª—è –¥–ª—è advanced-line-chart
        line1Name: '',
        line2Name: '',
        // –ü–æ–ª—è –¥–ª—è chartjs-bar
        dataset1: '',
        dataset2: '',
        dataset3: '',
        dataset4: '',
        dataset5: '',
        labels: '', // –ü–æ–ª–µ –¥–ª—è –º–µ—Ç–æ–∫ –æ—Å–∏ X
        // –ü–æ–ª—è –¥–ª—è apex-line
        series1: '',
        series2: '',
        series3: '',
        series4: '',
        series5: '',
        apexLabels: '' // –ü–æ–ª–µ –¥–ª—è –º–µ—Ç–æ–∫ –æ—Å–∏ X –≤ apex-line
      };
      console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞:', currentElement.type);
      state = 'type';
      continue;
    }
    
    if (line.match(/^–¢–ò–ü_–í–´–ù–û–°–ö–ò:\s*(.+)$/i) || line.match(/^CALLOUT_TYPE:\s*(.+)$/i)) {
      if (currentElement) {
        const calloutTypeMatch = line.match(/^(?:–¢–ò–ü_–í–´–ù–û–°–ö–ò|CALLOUT_TYPE):\s*(.+)$/i);
        currentElement.calloutType = calloutTypeMatch[1].trim();
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω –¢–ò–ü_–í–´–ù–û–°–ö–ò:', currentElement.calloutType, '–≤ —Å—Ç—Ä–æ–∫–µ:', line);
      }
      continue;
    }

    // –ü–æ–ª—è –¥–ª—è gradient-text
    if (line.match(/^–¢–ï–ö–°–¢:\s*(.+)$/i) || line.match(/^TEXT:\s*(.+)$/i)) {
      if (currentElement) {
        const textMatch = line.match(/^(?:–¢–ï–ö–°–¢|TEXT):\s*(.+)$/i);
        currentElement.text = textMatch[1].trim();
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω –¢–ï–ö–°–¢:', currentElement.text);
      }
      continue;
    }

    if (line.match(/^–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï:\s*(.+)$/i) || line.match(/^DIRECTION:\s*(.+)$/i)) {
      if (currentElement) {
        const directionMatch = line.match(/^(?:–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï|DIRECTION):\s*(.+)$/i);
        currentElement.direction = directionMatch[1].trim();
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω–æ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï:', currentElement.direction);
      }
      continue;
    }

    if (line.match(/^–¶–í–ï–¢1:\s*(.+)$/i) || line.match(/^COLOR1:\s*(.+)$/i)) {
      if (currentElement) {
        const color1Match = line.match(/^(?:–¶–í–ï–¢1|COLOR1):\s*(.+)$/i);
        currentElement.color1 = color1Match[1].trim();
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω –¶–í–ï–¢1:', currentElement.color1);
      }
      continue;
    }

    if (line.match(/^–¶–í–ï–¢2:\s*(.+)$/i) || line.match(/^COLOR2:\s*(.+)$/i)) {
      if (currentElement) {
        const color2Match = line.match(/^(?:–¶–í–ï–¢2|COLOR2):\s*(.+)$/i);
        currentElement.color2 = color2Match[1].trim();
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω –¶–í–ï–¢2:', currentElement.color2);
      }
      continue;
    }

    if (line.match(/^–†–ê–ó–ú–ï–†_–®–†–ò–§–¢–ê:\s*(.+)$/i) || line.match(/^FONT_SIZE:\s*(.+)$/i)) {
      if (currentElement) {
        const fontSizeMatch = line.match(/^(?:–†–ê–ó–ú–ï–†_–®–†–ò–§–¢–ê|FONT_SIZE):\s*(.+)$/i);
        currentElement.fontSize = parseInt(fontSizeMatch[1].trim()) || 24;
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω –†–ê–ó–ú–ï–†_–®–†–ò–§–¢–ê:', currentElement.fontSize);
      }
      continue;
    }

    if (line.match(/^–¢–û–õ–©–ò–ù–ê_–®–†–ò–§–¢–ê:\s*(.+)$/i) || line.match(/^FONT_WEIGHT:\s*(.+)$/i)) {
      if (currentElement) {
        const fontWeightMatch = line.match(/^(?:–¢–û–õ–©–ò–ù–ê_–®–†–ò–§–¢–ê|FONT_WEIGHT):\s*(.+)$/i);
        currentElement.fontWeight = fontWeightMatch[1].trim();
        console.log('‚≠ê –ù–∞–π–¥–µ–Ω–∞ –¢–û–õ–©–ò–ù–ê_–®–†–ò–§–¢–ê:', currentElement.fontWeight);
      }
      continue;
    }

    if (line.match(/^–ó–ê–ì–û–õ–û–í–û–ö:\s*(.+)$/i) || line.match(/^TITLE:\s*(.+)$/i)) {
      if (currentElement) {
        const titleMatch = line.match(/^(?:–ó–ê–ì–û–õ–û–í–û–ö|TITLE):\s*(.+)$/i);
        currentElement.title = titleMatch[1].trim();
        console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞:', currentElement.title);
        state = 'title';
      }
      continue;
    }
    
    // –ü–æ–ª—è –¥–ª—è advanced-line-chart
    if (line.match(/^–õ–ò–ù–ò–Ø_1:\s*(.+)$/i) || line.match(/^LINE_1:\s*(.+)$/i)) {
      if (currentElement) {
        const line1Match = line.match(/^(?:–õ–ò–ù–ò–Ø_1|LINE_1):\s*(.+)$/i);
        currentElement.line1Name = line1Match[1].trim();
        console.log('üìà –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –õ–ò–ù–ò–Ø_1:', currentElement.line1Name);
      }
      continue;
    }
    
    if (line.match(/^–õ–ò–ù–ò–Ø_2:\s*(.+)$/i) || line.match(/^LINE_2:\s*(.+)$/i)) {
      if (currentElement) {
        const line2Match = line.match(/^(?:–õ–ò–ù–ò–Ø_2|LINE_2):\s*(.+)$/i);
        currentElement.line2Name = line2Match[1].trim();
        console.log('üìà –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –õ–ò–ù–ò–Ø_2:', currentElement.line2Name);
      }
      continue;
    }
    
    // –ü–æ–ª—è –¥–ª—è chartjs-bar
    if (line.match(/^–¶–í–ï–¢_–ó–ê–ì–û–õ–û–í–ö–ê:\s*(.+)$/i) || line.match(/^TITLE_COLOR:\s*(.+)$/i)) {
      if (currentElement) {
        const titleColorMatch = line.match(/^(?:–¶–í–ï–¢_–ó–ê–ì–û–õ–û–í–ö–ê|TITLE_COLOR):\s*(.+)$/i);
        currentElement.titleColor = titleColorMatch[1].trim();
        console.log('üé® –ù–∞–π–¥–µ–Ω –¶–í–ï–¢_–ó–ê–ì–û–õ–û–í–ö–ê:', currentElement.titleColor);
      }
      continue;
    }
    
    if (line.match(/^–¶–í–ï–¢_–§–û–ù–ê:\s*(.+)$/i) || line.match(/^BACKGROUND_COLOR:\s*(.+)$/i)) {
      if (currentElement) {
        const backgroundColorMatch = line.match(/^(?:–¶–í–ï–¢_–§–û–ù–ê|BACKGROUND_COLOR):\s*(.+)$/i);
        currentElement.backgroundColor = backgroundColorMatch[1].trim();
        console.log('üé® –ù–∞–π–¥–µ–Ω –¶–í–ï–¢_–§–û–ù–ê:', currentElement.backgroundColor);
      }
      continue;
    }
    
    if (line.match(/^–¢–ò–ü_–§–û–ù–ê:\s*(.+)$/i) || line.match(/^BACKGROUND_TYPE:\s*(.+)$/i)) {
      if (currentElement) {
        const backgroundTypeMatch = line.match(/^(?:–¢–ò–ü_–§–û–ù–ê|BACKGROUND_TYPE):\s*(.+)$/i);
        currentElement.backgroundType = backgroundTypeMatch[1].trim();
        console.log('üé® –ù–∞–π–¥–µ–Ω –¢–ò–ü_–§–û–ù–ê:', currentElement.backgroundType);
      }
      continue;
    }
    
    if (line.match(/^–ü–û–ö–ê–ó–ê–¢–¨_–ó–ê–ì–û–õ–û–í–û–ö:\s*(.+)$/i) || line.match(/^SHOW_TITLE:\s*(.+)$/i)) {
      if (currentElement) {
        const showTitleMatch = line.match(/^(?:–ü–û–ö–ê–ó–ê–¢–¨_–ó–ê–ì–û–õ–û–í–û–ö|SHOW_TITLE):\s*(.+)$/i);
        currentElement.showTitle = showTitleMatch[1].trim().toLowerCase() === '–¥–∞' || showTitleMatch[1].trim().toLowerCase() === 'yes';
        console.log('üëÅÔ∏è –ù–∞–π–¥–µ–Ω–æ –ü–û–ö–ê–ó–ê–¢–¨_–ó–ê–ì–û–õ–û–í–û–ö:', currentElement.showTitle);
      }
      continue;
    }
    
    // –ü–æ–ª—è –¥–ª—è chartjs-bar —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if (line.match(/^–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_1:\s*(.+)$/i) || line.match(/^DATASET_1:\s*(.+)$/i)) {
      if (currentElement) {
        const dataset1Match = line.match(/^(?:–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_1|DATASET_1):\s*(.+)$/i);
        currentElement.dataset1 = dataset1Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ù–ê–ë–û–†_–î–ê–ù–ù–´–•_1:', currentElement.dataset1);
      }
      continue;
    }
    
    if (line.match(/^–ú–ï–¢–ö–ò_–û–°–ò_X:\s*(.+)$/i) || line.match(/^X_AXIS_LABELS:\s*(.+)$/i)) {
      if (currentElement) {
        const labelsMatch = line.match(/^(?:–ú–ï–¢–ö–ò_–û–°–ò_X|X_AXIS_LABELS):\s*(.+)$/i);
        currentElement.labels = labelsMatch[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ú–ï–¢–ö–ò_–û–°–ò_X:', currentElement.labels);
      }
      continue;
    }
    
    if (line.match(/^–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_2:\s*(.+)$/i) || line.match(/^DATASET_2:\s*(.+)$/i)) {
      if (currentElement) {
        const dataset2Match = line.match(/^(?:–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_2|DATASET_2):\s*(.+)$/i);
        currentElement.dataset2 = dataset2Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ù–ê–ë–û–†_–î–ê–ù–ù–´–•_2:', currentElement.dataset2);
      }
      continue;
    }
    
    if (line.match(/^–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_3:\s*(.+)$/i) || line.match(/^DATASET_3:\s*(.+)$/i)) {
      if (currentElement) {
        const dataset3Match = line.match(/^(?:–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_3|DATASET_3):\s*(.+)$/i);
        currentElement.dataset3 = dataset3Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ù–ê–ë–û–†_–î–ê–ù–ù–´–•_3:', currentElement.dataset3);
      }
      continue;
    }
    
    if (line.match(/^–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_4:\s*(.+)$/i) || line.match(/^DATASET_4:\s*(.+)$/i)) {
      if (currentElement) {
        const dataset4Match = line.match(/^(?:–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_4|DATASET_4):\s*(.+)$/i);
        currentElement.dataset4 = dataset4Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ù–ê–ë–û–†_–î–ê–ù–ù–´–•_4:', currentElement.dataset4);
      }
      continue;
    }
    
    if (line.match(/^–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_5:\s*(.+)$/i) || line.match(/^DATASET_5:\s*(.+)$/i)) {
      if (currentElement) {
        const dataset5Match = line.match(/^(?:–ù–ê–ë–û–†_–î–ê–ù–ù–´–•_5|DATASET_5):\s*(.+)$/i);
        currentElement.dataset5 = dataset5Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ù–ê–ë–û–†_–î–ê–ù–ù–´–•_5:', currentElement.dataset5);
      }
      continue;
    }
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è apex-line
    if (line.match(/^–ú–ï–¢–ö–ò_–û–°–ò_X:\s*(.+)$/i) || line.match(/^X_AXIS_LABELS:\s*(.+)$/i)) {
      if (currentElement && currentElement.type === 'apex-line') {
        const labelsMatch = line.match(/^(?:–ú–ï–¢–ö–ò_–û–°–ò_X|X_AXIS_LABELS):\s*(.+)$/i);
        currentElement.apexLabels = labelsMatch[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –ú–ï–¢–ö–ò_–û–°–ò_X –¥–ª—è apex-line:', currentElement.apexLabels);
      }
      continue;
    }
    
    if (line.match(/^–°–ï–†–ò–Ø_1:\s*(.+)$/i) || line.match(/^SERIES_1:\s*(.+)$/i)) {
      if (currentElement && currentElement.type === 'apex-line') {
        const series1Match = line.match(/^(?:–°–ï–†–ò–Ø_1|SERIES_1):\s*(.+)$/i);
        currentElement.series1 = series1Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –°–ï–†–ò–Ø_1:', currentElement.series1);
      }
      continue;
    }
    
    if (line.match(/^–°–ï–†–ò–Ø_2:\s*(.+)$/i) || line.match(/^SERIES_2:\s*(.+)$/i)) {
      if (currentElement && currentElement.type === 'apex-line') {
        const series2Match = line.match(/^(?:–°–ï–†–ò–Ø_2|SERIES_2):\s*(.+)$/i);
        currentElement.series2 = series2Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –°–ï–†–ò–Ø_2:', currentElement.series2);
      }
      continue;
    }
    
    if (line.match(/^–°–ï–†–ò–Ø_3:\s*(.+)$/i) || line.match(/^SERIES_3:\s*(.+)$/i)) {
      if (currentElement && currentElement.type === 'apex-line') {
        const series3Match = line.match(/^(?:–°–ï–†–ò–Ø_3|SERIES_3):\s*(.+)$/i);
        currentElement.series3 = series3Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –°–ï–†–ò–Ø_3:', currentElement.series3);
      }
      continue;
    }
    
    if (line.match(/^–°–ï–†–ò–Ø_4:\s*(.+)$/i) || line.match(/^SERIES_4:\s*(.+)$/i)) {
      if (currentElement && currentElement.type === 'apex-line') {
        const series4Match = line.match(/^(?:–°–ï–†–ò–Ø_4|SERIES_4):\s*(.+)$/i);
        currentElement.series4 = series4Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –°–ï–†–ò–Ø_4:', currentElement.series4);
      }
      continue;
    }
    
    if (line.match(/^–°–ï–†–ò–Ø_5:\s*(.+)$/i) || line.match(/^SERIES_5:\s*(.+)$/i)) {
      if (currentElement && currentElement.type === 'apex-line') {
        const series5Match = line.match(/^(?:–°–ï–†–ò–Ø_5|SERIES_5):\s*(.+)$/i);
        currentElement.series5 = series5Match[1].trim();
        console.log('üìä –ù–∞–π–¥–µ–Ω –°–ï–†–ò–Ø_5:', currentElement.series5);
      }
      continue;
    }
    
    if (line.match(/^–°–û–î–ï–†–ñ–ò–ú–û–ï:\s*(.*)$/i) || line.match(/^CONTENT:\s*(.*)$/i)) {
      if (currentElement) {
        const contentMatch = line.match(/^(?:–°–û–î–ï–†–ñ–ò–ú–û–ï|CONTENT):\s*(.*)$/i);
        let content = contentMatch[1].trim();
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        content = content
          .replace(/\\\*/g, '*')  // –ó–∞–º–µ–Ω—è–µ–º \* –Ω–∞ *
          .replace(/\\/g, '')     // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
          .replace(/\s+/g, ' ')   // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
          .trim();
        
        currentElement.content = content;
        console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', currentElement.content);
        console.log('üìù –ü–æ–ª–Ω—ã–π currentElement:', currentElement);
        state = 'content';
      }
      continue;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—è –û–ü–ò–°–ê–ù–ò–ï (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
    if (line.match(/^(?:–û–ü–ò–°–ê–ù–ò–ï|–û–ø–∏—Å–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|DESCRIPTION|Description|description):\s*(.*)$/i)) {
      if (currentElement) {
        const descriptionMatch = line.match(/^(?:–û–ü–ò–°–ê–ù–ò–ï|–û–ø–∏—Å–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|DESCRIPTION|Description|description):\s*(.*)$/i);
        let description = descriptionMatch[1].trim();
        
        // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        description = description
          .replace(/\\\*/g, '*')  // –ó–∞–º–µ–Ω—è–µ–º \* –Ω–∞ *
          .replace(/\\/g, '')     // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
          .replace(/\s+/g, ' ')   // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
          .trim();
        
        currentElement.description = description;
        console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', currentElement.description);
        console.log('üìù –ü–æ–ª–Ω—ã–π currentElement:', currentElement);
        state = 'description';
      }
      continue;
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    if (state === 'content' && currentElement) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (!line.match(/^(?:–¢–ò–ü|TYPE|–¢–ò–ü_–í–´–ù–û–°–ö–ò|CALLOUT_TYPE|–¢–ï–ö–°–¢|TEXT|–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï|DIRECTION|–¶–í–ï–¢1|COLOR1|–¶–í–ï–¢2|COLOR2|–†–ê–ó–ú–ï–†_–®–†–ò–§–¢–ê|FONT_SIZE|–¢–û–õ–©–ò–ù–ê_–®–†–ò–§–¢–ê|FONT_WEIGHT|–ó–ê–ì–û–õ–û–í–û–ö|TITLE|–õ–ò–ù–ò–Ø_1|LINE_1|–õ–ò–ù–ò–Ø_2|LINE_2|–°–û–î–ï–†–ñ–ò–ú–û–ï|CONTENT|–û–ü–ò–°–ê–ù–ò–ï|–û–ø–∏—Å–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|DESCRIPTION|Description|description):/i)) {
        currentElement.content += (currentElement.content ? '\n' : '') + line;
      } else {
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        i--; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
        continue;
      }
    }

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    if (state === 'description' && currentElement) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (!line.match(/^(?:–¢–ò–ü|TYPE|–¢–ò–ü_–í–´–ù–û–°–ö–ò|CALLOUT_TYPE|–¢–ï–ö–°–¢|TEXT|–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï|DIRECTION|–¶–í–ï–¢1|COLOR1|–¶–í–ï–¢2|COLOR2|–†–ê–ó–ú–ï–†_–®–†–ò–§–¢–ê|FONT_SIZE|–¢–û–õ–©–ò–ù–ê_–®–†–ò–§–¢–ê|FONT_WEIGHT|–ó–ê–ì–û–õ–û–í–û–ö|TITLE|–õ–ò–ù–ò–Ø_1|LINE_1|–õ–ò–ù–ò–Ø_2|LINE_2|–°–û–î–ï–†–ñ–ò–ú–û–ï|CONTENT|–û–ü–ò–°–ê–ù–ò–ï|–û–ø–∏—Å–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|DESCRIPTION|Description|description):/i)) {
        currentElement.description += (currentElement.description ? ' ' : '') + line;
        console.log('üìù –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è:', line);
      } else {
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        i--; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
        continue;
      }
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  if (currentElement && currentElement.type) {
    // –î–ª—è gradient-text —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–∞–∂–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if (['gradient-text'].includes(currentElement.type.toLowerCase())) {
      // –î–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
      if (currentElement.content || currentElement.text) {
        elements.push(createElementByType(
          currentElement.type, 
          currentElement.title || '', 
          currentElement.content || '', 
          elements.length,
          currentElement
        ));
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const requiresTitle = !['typography', 'list', 'gradient-text', 'typewriter-text', 'highlight-text', 'testimonial-card', 'share-buttons', 'faq-section', 'rating', 'progress-bars', 'timeline-component', 'data-table', 'image-gallery', 'multiple-cards', 'bar-chart', 'advanced-line-chart', 'advanced-pie-chart', 'advanced-area-chart', 'full-multipage-site'].includes(currentElement.type.toLowerCase());
      if (currentElement.title || !requiresTitle) {
        elements.push(createElementByType(
          currentElement.type, 
          currentElement.title || '', 
          currentElement.content || '', 
          elements.length,
          currentElement
        ));
      }
    }
  }
  
  console.log('parseAIElements –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
  console.log('–≠–ª–µ–º–µ–Ω—Ç—ã:', elements);
  console.log('parseAIElements –¥–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
  elements.forEach((element, index) => {
    console.log(`  –≠–ª–µ–º–µ–Ω—Ç ${index + 1}:`, {
      type: element.type,
      title: element.title,
      content: element.content?.substring(0, 100) + '...',
      hasContent: !!element.content,
      hasTitle: !!element.title
    });
  });
  return elements;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ–∫—Ü–∏–π —Å AI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
export const parseUniversalSection = (content) => {
  console.log('parseUniversalSection –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    const lines = content.split('\n');
    let sectionId = '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', hasNewFormat);
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: "${line}"`);
        console.log(`üîç isHeaderSection: ${isHeaderSection}, contentStartIndex: ${contentStartIndex}`);
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏:', sectionId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle) {
            sectionDescription = line;
            console.log('üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            isHeaderSection = false;
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –¢–ò–ü:
        if (!isHeaderSection && line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let elementsContent = '';
      if (contentStartIndex !== -1) {
        elementsContent = lines.slice(contentStartIndex).join('\n');
        console.log('üß© –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elementsContent);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¢–ò–ü:, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        elementsContent = content;
      }
      
      const elements = parseAIElements(elementsContent);
      console.log('üé® –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements);
      console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
      
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è',
        description: sectionDescription || '–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        menuName: sectionTitle || sectionId,
        cardType: 'ELEVATED',
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º elements
        elements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
        contentElements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ index.jsx)
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏:', sectionData.elements);
      console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ contentElements –≤ —Å–µ–∫—Ü–∏–∏:', sectionData.contentElements);
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', sectionData.elements?.length || 0);
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ contentElements:', sectionData.contentElements?.length || 0);
      return sectionData;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    console.log('‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    return null;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const parseServices = (content) => {
  console.log('parseServices –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    const lines = content.split('\n');
    let sectionId = 'services';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —É—Å–ª—É–≥–∞—Ö');
      console.log('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let mainContent = '';
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('–ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle && line && line.trim() !== '') {
            sectionDescription = line;
            console.log('–ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            continue;
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –±–µ—Ä–µ–º –≤—Å–µ –æ—Ç —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
      if (contentStartIndex >= 0) {
        mainContent = lines.slice(contentStartIndex).join('\n');
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for (let i = 0; i < lines.length; i++) {
          if (lines[i].match(/^(?:–ó–ê–ì–û–õ–û–í–û–ö|TITLE|–°–û–î–ï–†–ñ–ò–ú–û–ï|CONTENT):/i)) {
            mainContent = lines.slice(i).join('\n');
            break;
          }
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      console.log('mainContent –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', mainContent);
      const elements = parseAIElements(mainContent);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–£—Å–ª—É–≥–∏',
        description: sectionDescription || '',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        cardType: 'ELEVATED',
        elements: elements, // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        contentElements: elements, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MultiPagePreview
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è —É—Å–ª—É–≥ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ elements –≤ —Å–µ–∫—Ü–∏–∏:', sectionData.elements.length);
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º sectionData:', JSON.stringify(sectionData, null, 2));
      return sectionData;
    }
    
    // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const cards = [];
    let currentCard = null;
    let isProcessingContacts = false;
    let isHeaderSection = true;
    let emptyLineCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = cleanEmailsInText(lines[i].trim());

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
      if (!line) {
        emptyLineCount++;
        if ((emptyLineCount >= 2 || i === lines.length - 1) && currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }
      emptyLineCount = 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (line.toLowerCase().includes('–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')) {
        isProcessingContacts = true;
        if (currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (isProcessingContacts || 
          line.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω:') || 
          line.toLowerCase().includes('email:') || 
          line.toLowerCase().includes('–∞–¥—Ä–µ—Å:') ||
          line.toLowerCase().includes('–º—ã –≥–æ—Ç–æ–≤—ã')) {
        continue;
      }

      // Parse NAME PAGE from line starting with "NAME PAGE:"
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        if (customPageName) {
          pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª—É–≥:', pageName);
        }
        continue;
      }

      // Parse section ID from line starting with "ID:"
      if (line.toLowerCase().match(/^id[:\s]/i)) {
        const customId = line.split(/[:]/)[1].trim();
        if (customId) {
          sectionId = cleanSectionId(customId);
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏ —É—Å–ª—É–≥:', sectionId);
        }
        isHeaderSection = true;
        continue;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
      if (isHeaderSection) {
        if (!sectionTitle) {
          sectionTitle = cleanServiceFields(line);
          continue;
        }
        if (!sectionDescription && sectionTitle) {
          sectionDescription = cleanServiceFields(line);
          isHeaderSection = false;
          continue;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
      if (sectionDescription && !isHeaderSection) {
        if ((line.length < 100 || line.includes(':')) && (!currentCard || (currentCard && currentCard.content))) {
          if (currentCard && currentCard.content) {
            cards.push(currentCard);
          }
          currentCard = {
            id: `service_${cards.length + 1}`,
            title: cleanServiceFields(line),
            content: ''
          };
        } else if (currentCard) {
          currentCard.content += (currentCard.content ? '\n' : '') + cleanServiceFields(line);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (currentCard && currentCard.content) {
      cards.push(currentCard);
    }

    // –û—á–∏—â–∞–µ–º email –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const cleanedCards = cards.map(card => ({
      ...card,
      content: cleanServiceFields(cleanEmailsInText(card.content))
    }));

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏
    const sectionData = {
      id: sectionId,
      title: sectionTitle || '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
      description: sectionDescription || '',
      pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      cardType: 'ELEVATED',
      elements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      contentElements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      cards: cleanedCards.map(card => ({
        ...card,
        showTitle: true,
        titleColor: '#1976d2',
        contentColor: '#333333',
        borderColor: '#e0e0e0',
        backgroundType: 'solid',
        backgroundColor: '#ffffff'
      })),
      link: `#${sectionId}`,
      backgroundColor: '#ffffff',
      textColor: '#000000',
      borderColor: '#e0e0e0',
      shadowColor: 'rgba(0,0,0,0.1)',
      gradientStart: '#ffffff',
      gradientEnd: '#f5f5f5',
      gradientDirection: 'to right'
    };

    return sectionData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ–∫—Ü–∏–∏ —É—Å–ª—É–≥:', error);
    return null;
  }
};

export const parseHero = (content) => {
  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const cleanedContent = cleanSectionContent(content);
    
    const lines = cleanedContent.split('\n').filter(line => line.trim());
    
    const heroData = {
      siteName: '',
      title: '',
      description: ''
    };
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (lines.length >= 1) heroData.siteName = lines[0].trim();
    if (lines.length >= 2) heroData.title = lines[1].trim();
    if (lines.length >= 3) heroData.description = lines[2].trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã
    if (!heroData.siteName || !heroData.title || !heroData.description) {
      console.warn('parseHero: Incomplete hero data', heroData);
    }
    
    return heroData;
  } catch (error) {
    console.error('Error parsing hero section:', error);
    return null;
  }
};

export const parseAdvantagesSection = (content) => {
  console.log('parseAdvantagesSection –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    const lines = content.split('\n');
    let sectionId = '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:', hasNewFormat);
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê');
      console.log('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        if (!line) continue;
        
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: "${line}"`);
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏:', sectionId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle) {
            sectionDescription = line;
            console.log('üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            isHeaderSection = false;
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –¢–ò–ü:
        if (!isHeaderSection && line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let mainContent = '';
      if (contentStartIndex !== -1) {
        mainContent = lines.slice(contentStartIndex).join('\n');
        console.log('üß© –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', mainContent);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¢–ò–ü:, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        mainContent = content;
      }
      
      console.log('mainContent –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', mainContent);
      
      const elements = parseAIElements(mainContent);
      console.log('üé® –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements);
      console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
      
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
        description: sectionDescription || '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        cardType: 'ELEVATED',
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º elements
        elements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        contentElements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        titleColor: '#1976d2',
        descriptionColor: '#666666',
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ elements –≤ —Å–µ–∫—Ü–∏–∏:', elements.length);
      return sectionData;
    } else {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø–∞—Ä—Å–∏–º –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    let menuText = '';
    const cards = [];
    let currentCard = null;
    let isHeaderSection = true;
    let emptyLineCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = cleanEmailsInText(lines[i].trim());

      // Handle empty lines
      if (!line) {
        emptyLineCount++;
        if (emptyLineCount >= 2 && currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }
      emptyLineCount = 0;

      // Parse NAME PAGE from line starting with "NAME PAGE:"
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        if (customPageName) {
          pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤:', pageName);
        }
        continue;
      }

      // Parse section ID from line starting with "ID:"
      if (line.toLowerCase().match(/^id[:\s]/i)) {
        const customId = line.split(/[:]/)[1].trim();
        if (customId) {
          sectionId = cleanSectionId(customId);
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤:', sectionId);
        }
        isHeaderSection = true;
        continue;
      }

      // Process section header
      if (isHeaderSection) {
        if (!sectionTitle) {
          sectionTitle = cleanServiceFields(line);
          continue;
        }
        if (!sectionDescription && sectionTitle) {
          sectionDescription = cleanServiceFields(line);
          isHeaderSection = false;
          continue;
        }
        continue;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
      if (sectionDescription && !isHeaderSection) {
        if ((line.length < 100 || line.includes(':')) && (!currentCard || (currentCard && currentCard.content))) {
          if (currentCard && currentCard.content) {
            cards.push(currentCard);
          }
          currentCard = {
            id: `feature_${cards.length + 1}`,
            title: cleanServiceFields(line),
            content: ''
          };
        } else if (currentCard) {
          currentCard.content += (currentCard.content ? '\n' : '') + cleanServiceFields(line);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (currentCard && currentCard.content) {
      cards.push(currentCard);
    }

    // –û—á–∏—â–∞–µ–º email –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const cleanedCards = cards.map(card => ({
      ...card,
      content: cleanServiceFields(cleanEmailsInText(card.content))
    }));

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    return {
      id: sectionId,
      title: sectionTitle || '–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
      description: sectionDescription || '',
      pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      cardType: 'ELEVATED',
      cards: cleanedCards.map(card => ({
        ...card,
        showTitle: true,
        titleColor: '#1976d2',
        contentColor: '#333333',
        borderColor: '#e0e0e0',
        backgroundType: 'solid',
        backgroundColor: '#ffffff'
      })),
        elements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        contentElements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        titleColor: '#1976d2',
        descriptionColor: '#666666',
      link: `#${sectionId}`,
      backgroundColor: '#ffffff',
      textColor: '#000000',
      borderColor: '#e0e0e0',
      shadowColor: 'rgba(0,0,0,0.1)',
      gradientStart: '#ffffff',
      gradientEnd: '#f5f5f5',
      gradientDirection: 'to right'
    };
    }
  } catch (error) {
    console.error('Error parsing advantages:', error);
    return null;
  }
};

export const parseAboutSection = (content) => {
  console.log('parseAboutSection –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    const lines = content.split('\n');
    let sectionId = 'about';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –û –ù–ê–°:', hasNewFormat);
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –û –ù–ê–°');
      console.log('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        if (!line) continue;
        
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: "${line}"`);
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏:', sectionId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle) {
            sectionDescription = line;
            console.log('üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            isHeaderSection = false;
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –¢–ò–ü:
        if (!isHeaderSection && line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let mainContent = '';
      if (contentStartIndex !== -1) {
        mainContent = lines.slice(contentStartIndex).join('\n');
        console.log('üß© –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', mainContent);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¢–ò–ü:, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        mainContent = content;
      }
      
      console.log('mainContent –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', mainContent);
      
      const elements = parseAIElements(mainContent);
      console.log('üé® –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements);
      console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
      
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–û –Ω–∞—Å',
        description: sectionDescription || '–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        cardType: 'ELEVATED',
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º elements
        elements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        contentElements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        titleColor: '#1976d2',
        descriptionColor: '#666666',
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è –û –ù–ê–° —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ elements –≤ —Å–µ–∫—Ü–∏–∏:', sectionData.elements.length);
      
      return sectionData;
    }
    
    // –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –û –ù–ê–°');
    
    const cards = [];
    let currentCard = null;
    let isHeaderSection = true;
    let emptyLineCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = cleanEmailsInText(lines[i].trim());

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
      if (!line) {
        emptyLineCount++;
        if ((emptyLineCount >= 2 || i === lines.length - 1) && currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }
      emptyLineCount = 0;

      // Parse NAME PAGE from line starting with "NAME PAGE:"
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        if (customPageName) {
          pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ –Ω–∞—Å:', pageName);
        }
        continue;
      }

      // Parse section ID from line starting with "ID:"
      if (line.toLowerCase().match(/^id[:\s]/i)) {
        const customId = line.split(/[:]/)[1].trim();
        if (customId) {
          sectionId = cleanSectionId(customId);
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏ –æ –Ω–∞—Å:', sectionId);
        }
        isHeaderSection = true;
        continue;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
      if (isHeaderSection) {
        if (!sectionTitle) {
          sectionTitle = cleanServiceFields(line);
          continue;
        }
        if (!sectionDescription && sectionTitle) {
          sectionDescription = cleanServiceFields(line);
          isHeaderSection = false;
          continue;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ "–û –Ω–∞—Å" - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –≤ parseServices
      if (sectionDescription && !isHeaderSection) {
        if ((line.length < 100 || line.includes(':')) && (!currentCard || (currentCard && currentCard.content))) {
          if (currentCard && currentCard.content) {
            cards.push(currentCard);
          }
          currentCard = {
            id: `about_${cards.length + 1}`,
            title: cleanServiceFields(line),
            content: ''
          };
        } else if (currentCard) {
          currentCard.content += (currentCard.content ? '\n' : '') + cleanServiceFields(line);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (currentCard && currentCard.content) {
      cards.push(currentCard);
    }

    // –û—á–∏—â–∞–µ–º email –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const cleanedCards = cards.map(card => ({
      ...card,
      content: cleanServiceFields(cleanEmailsInText(card.content))
    }));

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏
    const sectionData = {
      id: sectionId,
      title: sectionTitle || '–û –Ω–∞—Å',
      description: sectionDescription || '–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è',
      pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      cardType: 'ELEVATED',
      cards: cleanedCards.map(card => ({
        ...card,
        showTitle: true,
        titleColor: '#1976d2',
        contentColor: '#333333',
        borderColor: '#e0e0e0',
        backgroundType: 'solid',
        backgroundColor: '#ffffff',
        style: {
          borderRadius: '15px',
          shadow: '0 4px 15px rgba(0, 0, 0, 0.1)'
        }
      })),
      elements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
      contentElements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      link: `#${sectionId}`,
      imagePath: '/images/about.jpg',
      backgroundColor: '#ffffff',
      textColor: '#000000',
      borderColor: '#e0e0e0',
      shadowColor: 'rgba(0,0,0,0.1)',
      gradientStart: '#ffffff',
      gradientEnd: '#f5f5f5',
      gradientDirection: 'to right'
    };

    return sectionData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ–∫—Ü–∏–∏ –æ –Ω–∞—Å:', error);
    return null;
  }
};

export const parseTestimonials = (content) => {
  console.log('parseTestimonials –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    const lines = content.split('\n');
    let sectionId = '–æ—Ç–∑—ã–≤—ã';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –û–¢–ó–´–í–´:', hasNewFormat);
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –û–¢–ó–´–í–´');
      console.log('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        if (!line) continue;
        
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: "${line}"`);
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏:', sectionId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle) {
            sectionDescription = line;
            console.log('üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            isHeaderSection = false;
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –¢–ò–ü:
        if (!isHeaderSection && line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let mainContent = '';
      if (contentStartIndex !== -1) {
        mainContent = lines.slice(contentStartIndex).join('\n');
        console.log('üß© –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', mainContent);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¢–ò–ü:, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        mainContent = content;
      }
      
      console.log('mainContent –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', mainContent);
      
      const elements = parseAIElements(mainContent);
      console.log('üé® –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements);
      console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
      
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤',
        description: sectionDescription || '–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        cardType: 'ELEVATED',
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º elements
        elements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        contentElements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        titleColor: '#1976d2',
        descriptionColor: '#666666',
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è –û–¢–ó–´–í–´ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ elements –≤ —Å–µ–∫—Ü–∏–∏:', elements.length);
      return sectionData;
    } else {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø–∞—Ä—Å–∏–º –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    const cards = [];
    let currentCard = null;
    let isHeaderSection = true;
    let emptyLineCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = cleanEmailsInText(lines[i].trim());

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
      if (!line) {
        emptyLineCount++;
        if ((emptyLineCount >= 2 || i === lines.length - 1) && currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }
      emptyLineCount = 0;

      // Parse NAME PAGE from line starting with "NAME PAGE:"
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        if (customPageName) {
          pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤:', pageName);
        }
        continue;
      }

      // Parse section ID from line starting with "ID:"
      if (line.toLowerCase().match(/^id[:\s]/i)) {
        const customId = line.split(/[:]/)[1].trim();
        if (customId) {
          sectionId = cleanSectionId(customId);
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', sectionId);
        }
        isHeaderSection = true;
        continue;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
      if (isHeaderSection) {
        if (!sectionTitle) {
          sectionTitle = cleanServiceFields(line);
          continue;
        }
        if (!sectionDescription && sectionTitle) {
          sectionDescription = cleanServiceFields(line);
          isHeaderSection = false;
          continue;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç–∑—ã–≤–æ–≤
      if (sectionDescription && !isHeaderSection) {
        // –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è –∞–≤—Ç–æ—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞)
        if (line.length < 50 && (!currentCard || (currentCard && currentCard.content))) {
          if (currentCard && currentCard.content) {
            cards.push(currentCard);
          }
          currentCard = {
            id: `testimonial_${cards.length + 1}`,
            author: line,
            content: ''
          };
        } else if (currentCard) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
          currentCard.content += (currentCard.content ? '\n' : '') + line;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (currentCard && currentCard.content) {
      cards.push(currentCard);
    }

    // –û—á–∏—â–∞–µ–º email –≤ –æ—Ç–∑—ã–≤–∞—Ö
    const cleanedCards = cards.map(card => ({
      ...card,
      content: cleanServiceFields(cleanEmailsInText(card.content))
    }));

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const sectionData = {
      id: sectionId,
      title: sectionTitle || '–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: sectionDescription || '',
      pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      cardType: 'ELEVATED',
      cards: cleanedCards.map(card => ({
        ...card,
        title: card.author, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        showTitle: true,
        titleColor: '#1976d2',
        contentColor: '#333333',
        borderColor: '#e0e0e0',
        backgroundType: 'solid',
        backgroundColor: '#ffffff',
        style: {
          borderRadius: '15px',
          shadow: '0 4px 15px rgba(0, 0, 0, 0.1)'
        }
      })),
        elements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        contentElements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        titleColor: '#1976d2',
        descriptionColor: '#666666',
      link: `#${sectionId}`,
      backgroundColor: '#ffffff',
      textColor: '#000000',
      borderColor: '#e0e0e0',
      shadowColor: 'rgba(0,0,0,0.1)',
      gradientStart: '#ffffff',
      gradientEnd: '#f5f5f5',
      gradientDirection: 'to right'
    };

    return sectionData;
    }
  } catch (error) {
    console.error('Error parsing testimonials:', error);
    return null;
  }
};

export const parseFaq = (content) => {
  console.log('parseFaq –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    const lines = content.split('\n');
    let sectionId = '–≤–æ–ø—Ä–æ—Å—ã';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –í–û–ü–†–û–°–´:', hasNewFormat);
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –í–û–ü–†–û–°–´');
      console.log('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        if (!line) continue;
        
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: "${line}"`);
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏:', sectionId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle) {
            sectionDescription = line;
            console.log('üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            isHeaderSection = false;
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –¢–ò–ü:
        if (!isHeaderSection && line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let mainContent = '';
      if (contentStartIndex !== -1) {
        mainContent = lines.slice(contentStartIndex).join('\n');
        console.log('üß© –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', mainContent);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¢–ò–ü:, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        mainContent = content;
      }
      
      console.log('mainContent –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', mainContent);
      
      const elements = parseAIElements(mainContent);
      console.log('üé® –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements);
      console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
      
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
        description: sectionDescription || '–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        cardType: 'ACCENT',
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º elements
        elements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        contentElements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        titleColor: '#1976d2',
        descriptionColor: '#666666',
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è –í–û–ü–†–û–°–´ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ elements –≤ —Å–µ–∫—Ü–∏–∏:', elements.length);
      return sectionData;
    } else {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø–∞—Ä—Å–∏–º –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    const cards = [];
    let currentCard = null;
    let isHeaderSection = true;
    let emptyLineCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = cleanEmailsInText(lines[i].trim());

      // Handle empty lines
      if (!line) {
        emptyLineCount++;
        if ((emptyLineCount >= 2 || i === lines.length - 1) && currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }
      emptyLineCount = 0;

      // Parse NAME PAGE from line starting with "NAME PAGE:"
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        if (customPageName) {
          pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤:', pageName);
        }
        continue;
      }

      // Parse section ID from line starting with "ID:"
      if (line.toLowerCase().match(/^id[:\s]/i)) {
        const customId = line.split(/[:]/)[1].trim();
        if (customId) {
          sectionId = cleanSectionId(customId);
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:', sectionId);
        }
        isHeaderSection = true;
        continue;
      }

      // Process section header
      if (isHeaderSection) {
        if (!sectionTitle) {
          sectionTitle = cleanServiceFields(line);
          continue;
        }
        if (!sectionDescription && sectionTitle) {
          sectionDescription = cleanServiceFields(line);
          isHeaderSection = false;
          continue;
        }
      }

      // Process FAQ cards
      if (sectionDescription && !isHeaderSection) {
        if ((line.endsWith('?') || line.endsWith('ÿü') || line.length < 100) && (!currentCard || (currentCard && currentCard.content))) {
          if (currentCard && currentCard.content) {
            cards.push(currentCard);
          }
          currentCard = {
            id: `faq_${cards.length + 1}`,
            title: cleanServiceFields(line),
            content: ''
          };
        } else if (currentCard) {
          currentCard.content += (currentCard.content ? '\n' : '') + cleanServiceFields(line);
        }
      }
    }

    // Add the last card if exists
    if (currentCard && currentCard.content) {
      cards.push(currentCard);
    }

    // –û—á–∏—â–∞–µ–º email –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç–∞—Ö
    const cleanedCards = cards.map(card => ({
      ...card,
      content: cleanEmailsInText(card.content),
      title: cleanEmailsInText(card.title)
    }));

      // Create section data structure (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const sectionData = {
      id: sectionId,
      title: sectionTitle || '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
      description: sectionDescription || '–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      cardType: 'ACCENT',
      cards: cleanedCards.map(card => ({
        ...card,
        showTitle: true,
        titleColor: '#1976d2',
        contentColor: '#333333',
        borderColor: '#e0e0e0',
        backgroundType: 'solid',
        backgroundColor: '#ffffff',
        style: {
          borderRadius: '15px',
          shadow: '0 4px 15px rgba(0, 0, 0, 0.1)'
        }
      })),
        elements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        contentElements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        titleColor: '#1976d2',
        descriptionColor: '#666666',
      link: `#${sectionId}`,
      backgroundColor: '#ffffff',
      textColor: '#000000',
      borderColor: '#e0e0e0',
      shadowColor: 'rgba(0,0,0,0.1)',
      gradientStart: '#ffffff',
      gradientEnd: '#f5f5f5',
      gradientDirection: 'to right'
    };

    return sectionData;
    }
  } catch (error) {
    console.error('Error parsing FAQ:', error);
    return null;
  }
};

export const parseNews = (content) => {
  console.log('parseNews –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:', content);
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', content.substring(0, 100) + '...');
    
    const lines = content.split('\n');
    let sectionId = '–Ω–æ–≤–æ—Å—Ç–∏';
    let sectionTitle = '';
    let sectionDescription = '';
    let pageName = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∏–ø–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasNewFormat = content.includes('–¢–ò–ü:') || content.includes('TYPE:') || 
                         content.includes('–ó–ê–ì–û–õ–û–í–û–ö:') || content.includes('TITLE:') ||
                         content.includes('–°–û–î–ï–†–ñ–ò–ú–û–ï:') || content.includes('CONTENT:');
    
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–û–í–û–°–¢–ò:', hasNewFormat);
    
    if (hasNewFormat) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–û–í–û–°–¢–ò');
      console.log('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let isHeaderSection = true;
      let contentStartIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        const line = cleanEmailsInText(lines[i].trim());
        if (!line) continue;
        
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: "${line}"`);
        
        if (line.toLowerCase().match(/^name page[:\s]/i)) {
          const customPageName = line.split(/[:]/)[1].trim();
          if (customPageName) {
            pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
          }
          continue;
        }
        
        if (line.toLowerCase().match(/^id[:\s]/i)) {
          const customId = line.split(/[:]/)[1].trim();
          if (customId) {
            sectionId = cleanSectionId(customId);
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å–µ–∫—Ü–∏–∏:', sectionId);
          }
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¢–ò–ü: - –∑–Ω–∞—á–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
        
        if (isHeaderSection) {
          if (!sectionTitle && line && line.trim() !== '') {
            sectionTitle = line;
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:', sectionTitle);
            continue;
          }
          if (!sectionDescription && sectionTitle) {
            sectionDescription = line;
            console.log('üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:', sectionDescription);
            isHeaderSection = false;
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –¢–ò–ü:
        if (!isHeaderSection && line.match(/^(?:–¢–ò–ü|TYPE):/i)) {
          contentStartIndex = i;
          console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¢–ò–ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ:', i);
          break;
        }
      }
      
      // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
      let mainContent = '';
      if (contentStartIndex !== -1) {
        mainContent = lines.slice(contentStartIndex).join('\n');
        console.log('üß© –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', mainContent);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¢–ò–ü:, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¢–ò–ü:, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        mainContent = content;
      }
      
      console.log('mainContent –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', mainContent);
      
      const elements = parseAIElements(mainContent);
      console.log('üé® –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements);
      console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
      
      const sectionData = {
        id: sectionId,
        title: sectionTitle || '–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
        description: sectionDescription || '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
        pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        cardType: 'ELEVATED',
        cards: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º elements
        elements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        contentElements: elements, // –ú–∞—Å—Å–∏–≤ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        titleColor: '#1976d2',
        descriptionColor: '#666666',
        link: `#${sectionId}`,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#e0e0e0',
        shadowColor: 'rgba(0,0,0,0.1)',
        gradientStart: '#ffffff',
        gradientEnd: '#f5f5f5',
        gradientDirection: 'to right'
      };
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è –ù–û–í–û–°–¢–ò —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', sectionData);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ elements –≤ —Å–µ–∫—Ü–∏–∏:', elements.length);
      return sectionData;
    } else {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø–∞—Ä—Å–∏–º –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    const cards = [];
    let currentCard = null;
    let isHeaderSection = true;
    let emptyLineCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = cleanEmailsInText(lines[i].trim());

      // Handle empty lines
      if (!line) {
        emptyLineCount++;
        if ((emptyLineCount >= 2 || i === lines.length - 1) && currentCard && currentCard.content) {
          cards.push(currentCard);
          currentCard = null;
        }
        continue;
      }
      emptyLineCount = 0;

      // Parse NAME PAGE from line starting with "NAME PAGE:"
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        if (customPageName) {
          pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–µ–π:', pageName);
        }
        continue;
      }

      // Parse section ID from line starting with "ID:"
      if (line.toLowerCase().match(/^id[:\s]/i)) {
        const customId = line.split(/[:]/)[1].trim();
        if (customId) {
          sectionId = cleanSectionId(customId);
          console.log('–ù–∞–π–¥–µ–Ω ID —Å–µ–∫—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', sectionId);
        }
        isHeaderSection = true;
        continue;
      }

      // Process section header
      if (isHeaderSection) {
        if (!sectionTitle) {
          sectionTitle = cleanServiceFields(line);
          continue;
        }
        if (!sectionDescription && sectionTitle) {
          sectionDescription = cleanServiceFields(line);
          isHeaderSection = false;
          continue;
        }
      }

      // Process news cards
      if (sectionDescription && !isHeaderSection) {
        if ((line.length < 100 || line.includes(':')) && (!currentCard || (currentCard && currentCard.content))) {
          if (currentCard && currentCard.content) {
            cards.push(currentCard);
          }
          currentCard = {
            id: `${sectionId}_${cards.length + 1}`,
            title: cleanServiceFields(line),
            content: ''
          };
        } else if (currentCard) {
          currentCard.content += (currentCard.content ? '\n' : '') + cleanServiceFields(line);
        }
      }
    }

    // Add the last card if exists
    if (currentCard && currentCard.content) {
      cards.push(currentCard);
    }

    // –û—á–∏—â–∞–µ–º email –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö
    const cleanedCards = cards.map(card => ({
      ...card,
      content: cleanEmailsInText(card.content),
      title: cleanEmailsInText(card.title)
    }));

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:', { id: sectionId, title: sectionTitle, cards: cleanedCards });

      // Create section data structure (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    return {
      id: sectionId,
      title: sectionTitle || '–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
      description: sectionDescription || '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
      pageName: pageName || '', // –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      cardType: 'ELEVATED',
      cards: cleanedCards.map(card => ({
        ...card,
        showTitle: true,
        titleColor: '#1976d2',
        contentColor: '#333333',
        borderColor: '#e0e0e0',
        backgroundType: 'solid',
        backgroundColor: '#ffffff',
        style: {
          borderRadius: '15px',
          shadow: '0 4px 15px rgba(0, 0, 0, 0.1)'
        }
        })),
        elements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        contentElements: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        titleColor: '#1976d2',
        descriptionColor: '#666666'
    };
    }
  } catch (error) {
    console.error('Error parsing news:', error);
    return null;
  }
};

export const parseContacts = (content, headerData = {}) => {
  try {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    const blocks = content.split(/\n\s*\n/).map(block => block.trim()).filter(block => block);
    
    const contactData = {
      title: '',
      description: '',
      companyName: headerData?.siteName || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑ headerData
      address: '',
      phone: '',
      email: ''
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –±–ª–æ–∫–æ–≤, –∞ –Ω–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (blocks.length >= 1) {
      contactData.title = cleanEmailsInText(blocks[0]);
    }
    
    if (blocks.length >= 2) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö
      const description = blocks[1];
      if (description.startsWith('(') && description.endsWith(')')) {
        contactData.description = cleanEmailsInText(description.slice(1, -1).trim());
      } else {
        contactData.description = cleanEmailsInText(description);
      }
    }
    
    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–ª–æ–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ:
    // –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, email
    let currentIndex = 2;
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–ª–æ–∫–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ –ø–æ–ª—è–º
    for (let i = currentIndex; i < blocks.length; i++) {
      const block = blocks[i];
      const lines = block.split('\n').map(line => line.trim()).filter(line => line);
      
      if (lines.length >= 1) {
        const line = lines[0];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–æ–∫–∏
        if (line.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω:') || line.match(/\+[\d\s()-]+/)) {
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
          let originalPhone = line;
          const phoneRegex = /—Ç–µ–ª–µ—Ñ–æ–Ω:?\s*([+\d\s()-]+)/i;
          const phoneMatch = originalPhone.match(phoneRegex);
          if (phoneMatch) {
            originalPhone = phoneMatch[1].trim();
          }
          // –í—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
          contactData.phone = generateRandomPhone(originalPhone);
        } else if (line.toLowerCase().includes('email:') || line.includes('@')) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
          contactData.email = generateRandomEmail(headerData?.siteName);
        } else if (!contactData.address) {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–µ email, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∞–¥—Ä–µ—Å–æ–º
          contactData.address = cleanEmailsInText(line);
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ headerData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    if (!contactData.companyName && blocks.length > 2) {
      contactData.companyName = cleanEmailsInText(blocks[2]);
    }
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', contactData);
    return contactData;
  } catch (error) {
    console.error('Error parsing contacts:', error);
    return null;
  }
};

export const parseLegalDocuments = (content, contactData = {}) => {
  try {
    const documents = {
      privacyPolicy: {
        title: '',
        content: ''
      },
      termsOfService: {
        title: '',
        content: ''
      },
      cookiePolicy: {
        title: '',
        content: ''
      }
    };

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    const normalizedContent = content.replace(/\r\n/g, '\n');

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    // (?:^|\n) - –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    // \s* - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    // \(([^)]+)\) - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–∫–æ–±–∫–∞—Ö
    // [\s\S]*? - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
    const documentPattern = /(?:^|\n)\s*\(([^)]+)\)([\s\S]*?)(?=(?:^|\n)\s*\([^)]+\)|$)/g;
    
    // –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    const documentTypes = ['privacyPolicy', 'termsOfService', 'cookiePolicy'];
    let documentIndex = 0;
    
    let match;
    while ((match = documentPattern.exec(normalizedContent)) !== null) {
      const title = match[1].trim();
      let documentContent = match[2].trim();

      console.log(`–ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: ${title}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
      const documentType = documentTypes[documentIndex];
      
      if (documentType && documents[documentType]) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        documents[documentType].content = title + '\n\n' + documentContent;
      }
      
      documentIndex++;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (contactData && Object.keys(contactData).length > 0) {
      Object.keys(documents).forEach(docType => {
        if (documents[docType].content && !documents[docType].content.toLowerCase().includes('üìû') && 
            !documents[docType].content.toLowerCase().includes('üìç') && 
            !documents[docType].content.toLowerCase().includes('üìß')) {
          
          let contactBlock = '\n\n';
          
          if (contactData.companyName) {
            contactBlock += `üè¢ ${contactData.companyName}\n`;
          }
          
          if (contactData.address) {
            contactBlock += `üìç ${contactData.address}\n`;
          }
          
          if (contactData.phone) {
            contactBlock += `üìû ${contactData.phone}\n`;
          }
          
          if (contactData.email) {
            contactBlock += `üìß ${contactData.email}\n`;
          }
          
          documents[docType].content += contactBlock;
        }
      });
    }

    return documents;
  } catch (error) {
    console.error('Error parsing legal documents:', error);
    return null;
  }
};

export const autoDetectSectionType = (content) => {
  const lowerContent = content.toLowerCase();
  
  for (const [type, keywords] of Object.entries(SECTION_KEYWORDS)) {
    for (const keyword of keywords) {
      if (lowerContent.includes(keyword.toLowerCase())) {
        return type;
      }
    }
  }
  
  return 'AUTO';
};

export const parseMerci = (content) => {
  try {
    const lines = content.split('\n').map(line => line.trim()).filter(line => line);
    return {
      message: lines[0] || '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      closeButtonText: lines[1] || '–ó–∞–∫—Ä—ã—Ç—å'
    };
  } catch (error) {
    console.error('Error parsing merci section:', error);
    return {
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      closeButtonText: '–ó–∞–∫—Ä—ã—Ç—å'
    };
  }
};

export const parseFullSite = (content, headerData = {}, contactData = {}) => {
  try {
    // –û—á–∏—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Å–∏–º–≤–æ–ª–æ–≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    let cleanedContent = content;
    
    // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    cleanedContent = cleanedContent.replace(/\\===/g, '===');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å—ë –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ === –†–ê–ó–î–ï–õ: –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
    const firstSectionIndex = cleanedContent.indexOf('=== –†–ê–ó–î–ï–õ:');
    if (firstSectionIndex > 0) {
      cleanedContent = cleanedContent.substring(firstSectionIndex);
    }
    
    const sections = {};
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π regex –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const sectionRegex = /=== –†–ê–ó–î–ï–õ: ([^=]+) ===([\s\S]*?)=== –ö–û–ù–ï–¶ –†–ê–ó–î–ï–õ–ê ===/g;
    let match;

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:', cleanedContent.length);

    // –ò—â–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    const allSections = [];
    while ((match = sectionRegex.exec(cleanedContent)) !== null) {
      const sectionName = match[1].trim();
      const sectionContent = match[2].trim();
      allSections.push({ name: sectionName, content: sectionContent });
    }
    
    console.log('–ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—ã:', allSections.map(s => s.name));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª
    let nonSpecialSectionIndex = 0; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ (–Ω–µ HERO, CONTACTS, MERCI, LEGAL)
    
    for (let i = 0; i < allSections.length; i++) {
      const section = allSections[i];
      const sectionName = section.name;
      const sectionContent = section.content;
      
      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª: ${sectionName}, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${sectionContent.length}`);
      console.log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ ${sectionName}:`, sectionContent.substring(0, 200) + '...');

      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞ —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const sectionType = detectSectionType(sectionName, sectionContent, nonSpecialSectionIndex);
        console.log(`üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞ "${sectionName}" -> ${sectionType}`);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        if (!['HERO', 'CONTACTS', 'MERCI', 'LEGAL'].includes(sectionType)) {
          nonSpecialSectionIndex++;
        }
        
        switch (sectionType) {
          case 'HERO':
            sections.hero = parseHero(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Hero:', sections.hero);
            if (!sections.hero) {
              console.error('parseHero –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'SERVICES':
            sections.services = parseServices(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Services:', sections.services);
            if (!sections.services) {
              console.error('parseServices –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'ABOUT':
            sections.about = parseAboutSection(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ About:', sections.about);
            if (!sections.about) {
              console.error('parseAboutSection –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'FEATURES':
            sections.features = parseAdvantagesSection(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Features:', sections.features);
            if (!sections.features) {
              console.error('parseAdvantagesSection –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'TESTIMONIALS':
            sections.testimonials = parseTestimonials(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Testimonials:', sections.testimonials);
            if (!sections.testimonials) {
              console.error('parseTestimonials –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'FAQ':
            sections.faq = parseFaq(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ FAQ:', sections.faq);
            if (!sections.faq) {
              console.error('parseFaq –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'NEWS':
            sections.news = parseNews(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ø–æ–ª–Ω–æ–º —Å–∞–π—Ç–µ:', sections.news);
            if (!sections.news) {
              console.error('parseNews –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'CONTACTS':
            sections.contacts = parseContactsFull(sectionContent, headerData);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Contacts:', sections.contacts);
            if (!sections.contacts) {
              console.error('parseContactsFull –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'MERCI':
            sections.merci = parseMerci(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Merci:', sections.merci);
            if (!sections.merci) {
              console.error('parseMerci –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'LEGAL':
            sections.legalDocuments = parseLegalDocuments(sectionContent, contactData);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Legal Documents:', sections.legalDocuments);
            if (!sections.legalDocuments) {
              console.error('parseLegalDocuments –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          case 'UNIVERSAL':
            sections.universal = parseUniversalSection(sectionContent);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Universal Section:', sections.universal);
            if (!sections.universal) {
              console.error('parseUniversalSection –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞', sectionName);
            }
            break;
          default:
            console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞: ${sectionType} –¥–ª—è "${sectionName}"`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
            sections.universal = parseUniversalSection(sectionContent);
            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è:', sections.universal);
        }
      } catch (sectionError) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–∞–∑–¥–µ–ª–∞ ${sectionName}:`, sectionError);
      }
    }

    console.log('–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:', sections);
    if (sections.services) {
      console.log('–°–µ–∫—Ü–∏—è services –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', sections.services);
      console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –≤ services:', sections.services.elements ? sections.services.elements.length : '–Ω–µ—Ç –ø–æ–ª—è elements');
    }
    return sections;
  } catch (error) {
    console.error('Error parsing full site content:', error);
    return null;
  }
};

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–∞–π—Ç–∞
export const parseContactsFull = (content, headerData = {}) => {
  try {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    const blocks = content.split(/\n\s*\n/).map(block => block.trim()).filter(block => block);
    
    const contactData = {
      title: '',
      description: '',
      companyName: headerData?.siteName || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑ headerData
      address: '',
      phone: '',
      email: '',
      pageName: '' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ pageName
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ NAME PAGE
    const lines = content.split('\n');
    console.log('üîç parseContactsFull: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', content);
    for (const line of lines) {
      console.log('üîç parseContactsFull: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É:', line);
      if (line.toLowerCase().match(/^name page[:\s]/i)) {
        const customPageName = line.split(/[:]/)[1].trim();
        console.log('üîç parseContactsFull: –ù–∞–π–¥–µ–Ω–æ NAME PAGE:', customPageName);
        if (customPageName) {
          contactData.pageName = customPageName.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', contactData.pageName);
        }
        break;
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –±–ª–æ–∫–æ–≤, –∞ –Ω–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (blocks.length >= 1) {
      contactData.title = cleanServiceFields(cleanEmailsInText(blocks[0]));
    }
    
    if (blocks.length >= 2) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö
      const description = blocks[1];
      if (description.startsWith('(') && description.endsWith(')')) {
        contactData.description = cleanServiceFields(cleanEmailsInText(description.slice(1, -1).trim()));
      } else {
        contactData.description = cleanServiceFields(cleanEmailsInText(description));
      }
    }
    
    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–ª–æ–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ:
    // –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, email
    let currentIndex = 2;
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–ª–æ–∫–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ –ø–æ–ª—è–º
    for (let i = currentIndex; i < blocks.length; i++) {
      const block = blocks[i];
      const lines = block.split('\n').map(line => line.trim()).filter(line => line);
      
      if (lines.length >= 1) {
        const line = lines[0];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–æ–∫–∏
        if (line.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω:') || line.match(/\+[\d\s()-]+/)) {
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
          let originalPhone = line;
          const phoneRegex = /—Ç–µ–ª–µ—Ñ–æ–Ω:?\s*([+\d\s()-]+)/i;
          const phoneMatch = originalPhone.match(phoneRegex);
          if (phoneMatch) {
            originalPhone = phoneMatch[1].trim();
          }
          // –í—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
          contactData.phone = generateRandomPhone(originalPhone);
        } else if (line.toLowerCase().includes('email:') || line.includes('@')) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
          contactData.email = generateRandomEmail(headerData?.siteName);
        } else if (!contactData.address) {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–µ email, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∞–¥—Ä–µ—Å–æ–º
          contactData.address = cleanEmailsInText(line);
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ headerData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    if (!contactData.companyName && blocks.length > 2) {
      contactData.companyName = cleanEmailsInText(blocks[2]);
    }
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', contactData);
    console.log('‚úÖ pageName –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', contactData.pageName);
    return contactData;
  } catch (error) {
    console.error('Error parsing contacts from full site structure:', error);
    return null;
  }
}; 



