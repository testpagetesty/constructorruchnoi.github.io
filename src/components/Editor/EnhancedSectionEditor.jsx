import React, { useState, useEffect } from 'react';
import {
  Box,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  TextField,
  Chip,
  Stack,
  IconButton,
  Tooltip,
  Paper
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

import { ContentElementsLibrary } from '../ContentLibrary';
import ElementEditor from './ElementEditor';



const EnhancedSectionEditor = ({ 
  section, 
  sectionId, 
  onSectionChange,
  className = "",
  selectedElement = null,
  onElementDeselect = () => {}
}) => {
  const [activeAccordion, setActiveAccordion] = useState('content-library');

  const handleAccordionChange = (panel) => (event, isExpanded) => {
    setActiveAccordion(isExpanded ? panel : false);
  };

  return (
    <Box className={className} sx={{ mt: 2 }}>
      <Typography variant="h6" sx={{ mb: 2, color: '#1976d2' }}>
        üé® –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      </Typography>









      {/* –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      <Accordion 
        expanded={activeAccordion === 'content-library'}
        onChange={handleAccordionChange('content-library')}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="subtitle2">
            üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <ContentElementsLibrary
            onAddElement={(elementData) => {
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ–∫—Ü–∏—é
              const currentElements = section.contentElements || [];
              const newElement = {
                id: Date.now(),
                ...elementData,
                timestamp: new Date().toISOString()
              };
              
              console.log('[EnhancedSectionEditor] Adding element to section:', sectionId, newElement);
              console.log('[EnhancedSectionEditor] Current elements:', currentElements);
              
              const updatedElements = [...currentElements, newElement];
              console.log('[EnhancedSectionEditor] Updated elements:', updatedElements);
              
              onSectionChange(sectionId, 'contentElements', updatedElements);
            }}
          />
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
          {section.contentElements && section.contentElements.length > 0 && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="subtitle2" gutterBottom>
                –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
              </Typography>
              {section.contentElements.map((element, index) => (
                <Chip
                  key={element.id}
                  label={`${element.type} (${element.category})`}
                  onDelete={() => {
                    const updatedElements = section.contentElements.filter(e => e.id !== element.id);
                    onSectionChange(sectionId, 'contentElements', updatedElements);
                  }}
                  sx={{ mr: 1, mb: 1 }}
                  size="small"
                />
              ))}
            </Box>
          )}
        </AccordionDetails>
      </Accordion>

      {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
      {section.contentElements && section.contentElements.length > 0 && (
        <Accordion 
          expanded={activeAccordion === 'element-editor'}
          onChange={handleAccordionChange('element-editor')}
        >
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle2">
              ‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ({section.contentElements.length})
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box sx={{ mb: 2 }}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
              </Typography>
              
                            {section.contentElements.map((element) => (
                <ElementEditor
                  key={element.id}
                  element={element}
                  isSelected={selectedElement && 
                             selectedElement.sectionId === sectionId && 
                             selectedElement.elementId === element.id}
                  onElementChange={(elementId, field, value) => {
                    console.log('üîß [EnhancedSectionEditor] onElementChange called:', { elementId, field, value });
                    console.log('üîß [EnhancedSectionEditor] current element:', section.contentElements.find(el => el.id === elementId));
                    
                    const updatedElements = section.contentElements.map(el => 
                      el.id === elementId 
                        ? { 
                            ...el, 
                            [field]: value,
                            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º colorSettings, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                            ...(field === 'colorSettings' ? { colorSettings: value } : {}),
                            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º data.colorSettings –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
                            ...(field === 'colorSettings' && el.data ? { 
                              data: { ...el.data, colorSettings: value } 
                            } : {})
                          }
                        : el
                    );
                    
                    console.log('üîß [EnhancedSectionEditor] updated elements:', updatedElements);
                    onSectionChange(sectionId, 'contentElements', updatedElements);
                  }}
                  onElementDelete={(elementId) => {
                    const updatedElements = section.contentElements.filter(el => el.id !== elementId);
                    onSectionChange(sectionId, 'contentElements', updatedElements);
                    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    if (selectedElement && selectedElement.elementId === elementId) {
                      onElementDeselect();
                    }
                  }}
                  onElementDuplicate={(element) => {
                    const duplicatedElement = {
                      ...element,
                      id: Date.now(),
                      timestamp: new Date().toISOString()
                    };
                    const updatedElements = [...section.contentElements, duplicatedElement];
                    onSectionChange(sectionId, 'contentElements', updatedElements);
                  }}
                />
              ))}
            </Box>
          </AccordionDetails>
        </Accordion>
      )}

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ü–∏–∏ */}
      <Paper sx={{ p: 2, mt: 2, backgroundColor: '#f8f9fa' }}>
        <Typography variant="body2" color="textSecondary" gutterBottom>
          –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ü–∏–∏:
        </Typography>
        <Box sx={{
          p: 2,
          border: '1px dashed #ccc',
          borderRadius: 1,
          backgroundColor: '#ffffff'
        }}>
          <Typography variant="h6" sx={{ color: '#1976d2', mb: 1 }}>
            {section.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏'}
          </Typography>
          <Typography variant="body1" sx={{ color: '#666', mb: 2 }}>
            {section.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏'}
          </Typography>
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          {section.contentElements && section.contentElements.length > 0 && (
            <Box sx={{ mt: 2, p: 1, backgroundColor: 'rgba(25, 118, 210, 0.08)', borderRadius: 1 }}>
              <Typography variant="caption" color="primary">
                üìö –î–æ–±–∞–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {section.contentElements.length}
              </Typography>
            </Box>
          )}
        </Box>
      </Paper>
    </Box>
  );
};

export default EnhancedSectionEditor; 