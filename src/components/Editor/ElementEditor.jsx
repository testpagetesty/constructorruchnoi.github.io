import React, { useState } from 'react';
import {
  Box,
  TextField,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Slider,
  Paper,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Stack,
  IconButton,
  Tooltip,
  Button,
  Alert
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import DeleteIcon from '@mui/icons-material/Delete';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import { RichTextEditor, Blockquote } from '../ContentLibrary';
import CardsGridManager from '../ContentLibrary/CardComponents/CardsGridManager';
import ColorSettings from '../ContentLibrary/TextComponents/ColorSettings';

const ElementEditor = ({ element, onElementChange, onElementDelete, onElementDuplicate, isSelected = false }) => {
  const [expanded, setExpanded] = useState(false);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
  React.useEffect(() => {
    if (isSelected) {
      setExpanded(true);
    }
  }, [isSelected]);

  const handleChange = (field, value) => {
    console.log('üîç [ElementEditor] handleChange called:', { field, value, elementId: element.id });
    onElementChange(element.id, field, value);
  };

  const getElementIcon = (type) => {
    const icons = {
      'gradient-text': 'üåà',
      'animated-counter': 'üî¢',
      'typewriter-text': '‚å®Ô∏è',
      'highlight-text': 'üîÜ',
      'markdown-editor': 'üìù',
      'code-editor': 'üíª',
      'testimonial-card': 'üí¨',
      'faq-section': '‚ùì',
      'timeline-component': 'üìÖ',
      'alert-component': 'üö®'
    };
    return icons[type] || 'üìÑ';
  };

  const renderGradientTextEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–¢–µ–∫—Å—Ç"
        value={element.text || '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç'}
        onChange={(e) => handleChange('text', e.target.value)}
        multiline
        rows={2}
      />
      <FormControl fullWidth size="small">
        <InputLabel>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</InputLabel>
        <Select
          value={element.direction || 'to right'}
          onChange={(e) => handleChange('direction', e.target.value)}
        >
          <MenuItem value="to right">–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ</MenuItem>
          <MenuItem value="to left">–°–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ</MenuItem>
          <MenuItem value="to bottom">–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑</MenuItem>
          <MenuItem value="to top">–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö</MenuItem>
          <MenuItem value="45deg">–î–∏–∞–≥–æ–Ω–∞–ª—å 45¬∞</MenuItem>
          <MenuItem value="135deg">–î–∏–∞–≥–æ–Ω–∞–ª—å 135¬∞</MenuItem>
        </Select>
      </FormControl>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <TextField
          label="–¶–≤–µ—Ç 1"
          type="color"
          value={element.color1 || '#ff6b6b'}
          onChange={(e) => handleChange('color1', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç 2"
          type="color"
          value={element.color2 || '#4ecdc4'}
          onChange={(e) => handleChange('color2', e.target.value)}
          sx={{ width: 120 }}
        />
      </Box>
      <Box>
        <Typography gutterBottom>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {element.fontSize || 24}px</Typography>
        <Slider
          value={element.fontSize || 24}
          onChange={(_, value) => handleChange('fontSize', value)}
          min={12}
          max={72}
          step={1}
        />
      </Box>

      <Divider sx={{ my: 3 }} />

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <ColorSettings
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
        colorSettings={element.colorSettings || {}}
        onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
        availableFields={[
          {
            name: 'title',
            label: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞',
            description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            defaultColor: '#333333'
          },
          {
            name: 'content',
            label: '–¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            description: '–¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            defaultColor: '#333333'
          },
          {
            name: 'border',
            label: '–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤',
            description: '–¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∏ –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
            defaultColor: '#1976d2'
          }
        ]}
        defaultColors={{
          textFields: {
            title: '#333333',
            content: '#333333',
            border: '#1976d2'
          }
        }}
      />
    </Stack>
  );

  const renderAnimatedCounterEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        label="–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        type="number"
        value={element.endValue || 100}
        onChange={(e) => handleChange('endValue', parseInt(e.target.value))}
      />
      <TextField
        label="–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        type="number"
        value={element.startValue || 0}
        onChange={(e) => handleChange('startValue', parseInt(e.target.value))}
      />
      <TextField
        label="–°—É—Ñ—Ñ–∏–∫—Å"
        value={element.suffix || ''}
        onChange={(e) => handleChange('suffix', e.target.value)}
        placeholder="%, +, –º–ª–Ω –∏ —Ç.–¥."
      />
      <TextField
        fullWidth
        label="–û–ø–∏—Å–∞–Ω–∏–µ"
        value={element.description || ''}
        onChange={(e) => handleChange('description', e.target.value)}
        multiline
        rows={2}
      />
      <Box>
        <Typography gutterBottom>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏: {element.duration || 2000}–º—Å</Typography>
        <Slider
          value={element.duration || 2000}
          onChange={(_, value) => handleChange('duration', value)}
          min={500}
          max={10000}
          step={100}
        />
      </Box>

      <Divider sx={{ my: 3 }} />

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <ColorSettings
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Å—á–µ—Ç—á–∏–∫–∞"
        colorSettings={element.colorSettings || {}}
        onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
        availableFields={[
          {
            name: 'title',
            label: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞',
            description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞',
            defaultColor: '#333333'
          },
          {
            name: 'content',
            label: '–¶–≤–µ—Ç —á–∏—Å–ª–∞',
            description: '–¶–≤–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞',
            defaultColor: '#1976d2'
          },
          {
            name: 'author',
            label: '–¶–≤–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
            description: '–¶–≤–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥ —Å—á–µ—Ç—á–∏–∫–æ–º',
            defaultColor: '#666666'
          }
        ]}
        defaultColors={{
          textFields: {
            title: '#333333',
            content: '#1976d2',
            author: '#666666'
          }
        }}
      />
    </Stack>
  );

  const renderTypewriterTextEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–¢–µ–∫—Å—Ç—ã (–æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É)"
        value={element.texts ? element.texts.join('\n') : '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n–ù–∞ –Ω–∞—à —Å–∞–π—Ç'}
        onChange={(e) => handleChange('texts', e.target.value.split('\n'))}
        multiline
        rows={4}
      />
      <Box>
        <Typography gutterBottom>–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏: {element.speed || 150}–º—Å</Typography>
        <Slider
          value={element.speed || 150}
          onChange={(_, value) => handleChange('speed', value)}
          min={50}
          max={500}
          step={10}
        />
      </Box>
      <Box>
        <Typography gutterBottom>–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏: {element.pauseTime || 2000}–º—Å</Typography>
        <Slider
          value={element.pauseTime || 2000}
          onChange={(_, value) => handleChange('pauseTime', value)}
          min={500}
          max={5000}
          step={100}
        />
      </Box>
      <Box>
        <Typography gutterBottom>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {element.fontSize || 32}px</Typography>
        <Slider
          value={element.fontSize || 32}
          onChange={(_, value) => handleChange('fontSize', value)}
          min={12}
          max={72}
          step={1}
        />
      </Box>
      <FormControlLabel
        control={
          <Switch
            checked={element.repeat !== false}
            onChange={(e) => handleChange('repeat', e.target.checked)}
          />
        }
        label="–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Ü–∏–∫–ª–∏—á–Ω–æ"
      />

      <Divider sx={{ my: 3 }} />

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <ColorSettings
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏"
        colorSettings={element.colorSettings || {}}
        onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
        availableFields={[
          {
            name: 'content',
            label: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞',
            description: '–¶–≤–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            defaultColor: '#333333'
          }
        ]}
        defaultColors={{
          textFields: {
            content: '#333333'
          }
        }}
      />
    </Stack>
  );

  const renderHighlightTextEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–¢–µ–∫—Å—Ç"
        value={element.text || '–≠—Ç–æ –≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º'}
        onChange={(e) => handleChange('text', e.target.value)}
        multiline
        rows={3}
      />
      <TextField
        label="–¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è"
        type="color"
        value={element.highlightColor || '#ffeb3b'}
        onChange={(e) => handleChange('highlightColor', e.target.value)}
        sx={{ width: 120 }}
      />
      <TextField
        label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        type="color"
        value={element.textColor || '#333333'}
        onChange={(e) => handleChange('textColor', e.target.value)}
        sx={{ width: 120 }}
      />
      <Box>
        <Typography gutterBottom>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {element.fontSize || 16}px</Typography>
        <Slider
          value={element.fontSize || 16}
          onChange={(_, value) => handleChange('fontSize', value)}
          min={12}
          max={48}
          step={1}
        />
      </Box>

      <Divider sx={{ my: 3 }} />

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <ColorSettings
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
        colorSettings={element.colorSettings || {}}
        onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
        availableFields={[
          {
            name: 'content',
            label: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞',
            description: '–¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            defaultColor: '#333333'
          },
          {
            name: 'marker',
            label: '–¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è',
            description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è',
            defaultColor: '#ffeb3b'
          }
        ]}
        defaultColors={{
          textFields: {
            content: '#333333',
            marker: '#ffeb3b'
          }
        }}
      />
    </Stack>
  );

  const renderMarkdownEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="Markdown –∫–æ–Ω—Ç–µ–Ω—Ç"
        value={element.content || '# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n\n–≠—Ç–æ **–∂–∏—Ä–Ω—ã–π** —Ç–µ–∫—Å—Ç —Å *–∫—É—Ä—Å–∏–≤–æ–º*.\n\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 1\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 2\n\n> –≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={6}
      />
      <FormControlLabel
        control={
          <Switch
            checked={element.showPreview !== false}
            onChange={(e) => handleChange('showPreview', e.target.checked)}
          />
        }
        label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"
      />
    </Stack>
  );

  const renderCodeEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ö–æ–¥"
        value={element.code || 'function hello() {\n  console.log("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!");\n}'}
        onChange={(e) => handleChange('code', e.target.value)}
        multiline
        rows={6}
      />
      <FormControl fullWidth size="small">
        <InputLabel>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</InputLabel>
        <Select
          value={element.language || 'javascript'}
          onChange={(e) => handleChange('language', e.target.value)}
        >
          <MenuItem value="javascript">JavaScript</MenuItem>
          <MenuItem value="python">Python</MenuItem>
          <MenuItem value="html">HTML</MenuItem>
          <MenuItem value="css">CSS</MenuItem>
          <MenuItem value="json">JSON</MenuItem>
          <MenuItem value="markdown">Markdown</MenuItem>
          <MenuItem value="plaintext">–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç</MenuItem>
        </Select>
      </FormControl>
    </Stack>
  );

  const renderTestimonialEditor = () => (
    <Stack spacing={3}>
      <Alert severity="info">
        <Typography variant="body2">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–∑—ã–≤–∞ –≤ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        </Typography>
      </Alert>
      
      <TextField
        fullWidth
        label="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
        value={element.name || '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'}
        onChange={(e) => handleChange('name', e.target.value)}
      />
      <TextField
        fullWidth
        label="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
        value={element.role || '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'}
        onChange={(e) => handleChange('role', e.target.value)}
      />
      <TextField
        fullWidth
        label="–ö–æ–º–ø–∞–Ω–∏—è"
        value={element.company || '–û–û–û "–ö–æ–º–ø–∞–Ω–∏—è"'}
        onChange={(e) => handleChange('company', e.target.value)}
      />
      <TextField
        fullWidth
        label="–û—Ç–∑—ã–≤"
        value={element.content || '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={4}
      />
      <Box>
        <Typography gutterBottom>–†–µ–π—Ç–∏–Ω–≥: {element.rating || 5} ‚≠ê</Typography>
        <Slider
          value={element.rating || 5}
          onChange={(_, value) => handleChange('rating', value)}
          min={1}
          max={5}
          step={0.5}
          marks={[
            { value: 1, label: '1' },
            { value: 2, label: '2' },
            { value: 3, label: '3' },
            { value: 4, label: '4' },
            { value: 5, label: '5' }
          ]}
        />
      </Box>
      
      <Divider />
      
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <ColorSettings
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –æ—Ç–∑—ã–≤–∞"
        colorSettings={element.colorSettings || {}}
        onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
        availableFields={[
          {
            name: 'name',
            label: '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞',
            description: '–¶–≤–µ—Ç –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞',
            defaultColor: '#1976d2'
          },
          {
            name: 'role',
            label: '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            description: '–¶–≤–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
            defaultColor: '#666666'
          },
          {
            name: 'company',
            label: '–ö–æ–º–ø–∞–Ω–∏—è',
            description: '–¶–≤–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏',
            defaultColor: '#888888'
          },
          {
            name: 'content',
            label: '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
            description: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞',
            defaultColor: '#333333'
          },
          {
            name: 'rating',
            label: '–ó–≤–µ–∑–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞',
            description: '–¶–≤–µ—Ç –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞',
            defaultColor: '#ffc107'
          }
        ]}
        defaultColors={{
          textFields: {
            name: '#1976d2',
            role: '#666666',
            company: '#888888',
            content: '#333333',
            rating: '#ffc107'
          }
        }}
      />
    </Stack>
  );

  const renderFaqEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"
        value={element.title || '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å?|–û—Ç–≤–µ—Ç)"
        value={element.items ? element.items.map(item => `${item.question}|${item.answer}`).join('\n') : '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?|–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.\n–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?|–¶–µ–Ω—ã –æ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ.'}
        onChange={(e) => {
          const items = e.target.value.split('\n').map(line => {
            const [question, answer] = line.split('|');
            return { question: question || '', answer: answer || '' };
          });
          handleChange('items', items);
        }}
        multiline
        rows={6}
        helperText="–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–º |"
      />
      
      <Alert severity="info">
        <Typography variant="body2">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç FAQ –≤ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
        </Typography>
      </Alert>
    </Stack>
  );

  const renderTimelineEditor = () => (
    <Stack spacing={3}>
      <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
      </Typography>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
        
        <TextField
          label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"
          value={element.title || '–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞'}
          onChange={(e) => handleChange('title', e.target.value)}
          fullWidth
          size="small"
          sx={{ mb: 2 }}
        />
      </Box>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–°–æ–±—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã:</Typography>
        
        <TextField
          label="–°–æ–±—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–∞—Ç–∞|–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—Ç–∞—Ç—É—Å)"
          value={element.events ? element.events.map(event => `${event.date}|${event.title}|${event.description}|${event.status}`).join('\n') : '2024|–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞|–ù–∞—á–∞–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏|completed\n2024|–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ|–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π|in-progress\n2024|–†–µ–ª–∏–∑|–ü—É–±–ª–∏–∫–∞—Ü–∏—è|pending'}
          onChange={(e) => {
            const events = e.target.value.split('\n').map(line => {
              const [date, title, description, status] = line.split('|');
              return { 
                date: date || '', 
                title: title || '', 
                description: description || '', 
                status: status || 'pending' 
              };
            });
            handleChange('events', events);
          }}
          placeholder="–î–∞—Ç–∞|–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—Ç–∞—Ç—É—Å\n2024|–°–æ–±—ã—Ç–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|completed"
          fullWidth
          multiline
          rows={6}
          size="small"
          helperText="–ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –°—Ç–∞—Ç—É—Å: completed, in-progress, pending"
        />
      </Box>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
        <ColorSettings
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"
          colorSettings={element.colorSettings || {}}
          onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
          availableFields={[
            { name: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã', defaultColor: '#000000' },
            { name: 'date', label: '–î–∞—Ç–∞', description: '–¶–≤–µ—Ç –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è', defaultColor: '#666666' },
            { name: 'text', label: '–¢–µ–∫—Å—Ç', description: '–¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è', defaultColor: '#333333' },
            { name: 'line', label: '–õ–∏–Ω–∏—è', description: '–¶–≤–µ—Ç —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏', defaultColor: '#e0e0e0' },
            { name: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', description: '–¶–≤–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π', defaultColor: '#4caf50' },
            { name: 'inProgress', label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', description: '–¶–≤–µ—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', defaultColor: '#ff9800' },
            { name: 'pending', label: '–û–∂–∏–¥–∞–Ω–∏–µ', description: '–¶–≤–µ—Ç –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π', defaultColor: '#2196f3' }
          ]}
          defaultColors={{
            title: '#000000',
            date: '#666666',
            text: '#333333',
            line: '#e0e0e0',
            completed: '#4caf50',
            inProgress: '#ff9800',
            pending: '#2196f3'
          }}
        />
      </Box>
    </Stack>
  );

  const renderAlertEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–í–Ω–∏–º–∞–Ω–∏–µ!'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–°–æ–æ–±—â–µ–Ω–∏–µ"
        value={element.message || '–≠—Ç–æ –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
        onChange={(e) => handleChange('message', e.target.value)}
        multiline
        rows={3}
      />
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</InputLabel>
        <Select
          value={element.type || 'info'}
          onChange={(e) => handleChange('type', e.target.value)}
        >
          <MenuItem value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</MenuItem>
          <MenuItem value="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</MenuItem>
          <MenuItem value="error">–û—à–∏–±–∫–∞</MenuItem>
          <MenuItem value="success">–£—Å–ø–µ—Ö</MenuItem>
        </Select>
      </FormControl>
    </Stack>
  );

  const renderImageGalleryEditor = () => (
    <Stack spacing={3}>
      <Alert severity="info">
        <Typography variant="body2">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏ –≤ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç–æ–≤
        </Typography>
      </Alert>
      
      <TextField
        fullWidth
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏"
        value={element.title || '–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–û–ø–∏—Å–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏"
        value={element.description || '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}
        onChange={(e) => handleChange('description', e.target.value)}
        multiline
        rows={2}
      />
      
      <Divider />
      <Typography variant="h6" color="primary">‚öôÔ∏è –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Typography>
      
      <Box>
        <Typography variant="body2" gutterBottom>
          –í—ã—Å–æ—Ç–∞ –≥–∞–ª–µ—Ä–µ–∏: {element.galleryHeight || 400}px
        </Typography>
        <Slider
          value={element.galleryHeight || 400}
          onChange={(_, value) => handleChange('galleryHeight', value)}
          min={200}
          max={800}
          step={50}
          marks={[
            { value: 200, label: '–ú–∏–Ω–∏' },
            { value: 400, label: '–°—Ä–µ–¥–Ω–∏–π' },
            { value: 600, label: '–ë–æ–ª—å—à–æ–π' },
            { value: 800, label: '–ú–∞–∫—Å–∏' }
          ]}
        />
      </Box>

      <Box>
        <Typography variant="body2" gutterBottom>
          –†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä: {element.thumbnailSize || 80}px
        </Typography>
        <Slider
          value={element.thumbnailSize || 80}
          onChange={(_, value) => handleChange('thumbnailSize', value)}
          min={50}
          max={150}
          step={10}
          marks={[
            { value: 50, label: '–ú–µ–ª–∫–∏–π' },
            { value: 80, label: '–°—Ä–µ–¥–Ω–∏–π' },
            { value: 120, label: '–ö—Ä—É–ø–Ω—ã–π' }
          ]}
        />
      </Box>

      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 2 }}>
        <FormControlLabel
          control={
            <Switch
              checked={element.showThumbnails !== false}
              onChange={(e) => handleChange('showThumbnails', e.target.checked)}
            />
          }
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã"
        />
        
        <FormControlLabel
          control={
            <Switch
              checked={element.showNavigation !== false}
              onChange={(e) => handleChange('showNavigation', e.target.checked)}
            />
          }
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
        />
        
        <FormControlLabel
          control={
            <Switch
              checked={element.showPagination !== false}
              onChange={(e) => handleChange('showPagination', e.target.checked)}
            />
          }
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é"
        />
      </Box>
      
      <Divider />
      <Typography variant="h6" color="primary">üé® –ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Typography>
      
      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 2 }}>
        <Box>
          <Typography variant="body2" gutterBottom>–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞:</Typography>
          <TextField
            fullWidth
            type="color"
            value={element.titleColor || '#1976d2'}
            onChange={(e) => handleChange('titleColor', e.target.value)}
            size="small"
          />
        </Box>
        
        <Box>
          <Typography variant="body2" gutterBottom>–¶–≤–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è:</Typography>
          <TextField
            fullWidth
            type="color"
            value={element.descriptionColor || '#666666'}
            onChange={(e) => handleChange('descriptionColor', e.target.value)}
            size="small"
          />
        </Box>
        
        <Box>
          <Typography variant="body2" gutterBottom>–¶–≤–µ—Ç —Ñ–æ–Ω–∞:</Typography>
          <TextField
            fullWidth
            type="color"
            value={element.backgroundColor || '#ffffff'}
            onChange={(e) => handleChange('backgroundColor', e.target.value)}
            size="small"
          />
        </Box>
        
        <Box>
          <Typography variant="body2" gutterBottom>–¶–≤–µ—Ç —Ä–∞–º–∫–∏:</Typography>
          <TextField
            fullWidth
            type="color"
            value={element.borderColor || '#e0e0e0'}
            onChange={(e) => handleChange('borderColor', e.target.value)}
            size="small"
          />
        </Box>
      </Box>
    </Stack>
  );

  const renderTypographyEditor = () => (
    <Stack spacing={2}>
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø –∑–∞–≥–æ–ª–æ–≤–∫–∞</InputLabel>
        <Select
          value={element.headingType || 'h2'}
          onChange={(e) => handleChange('headingType', e.target.value)}
        >
          <MenuItem value="h1">H1 - –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</MenuItem>
          <MenuItem value="h2">H2 - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏</MenuItem>
          <MenuItem value="h3">H3 - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</MenuItem>
          <MenuItem value="h4">H4 - –ú–µ–ª–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</MenuItem>
          <MenuItem value="h5">H5 - –û—á–µ–Ω—å –º–µ–ª–∫–∏–π</MenuItem>
          <MenuItem value="h6">H6 - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π</MenuItem>
          <MenuItem value="p">P - –ü–∞—Ä–∞–≥—Ä–∞—Ñ</MenuItem>
        </Select>
      </FormControl>
      <TextField
        fullWidth
        label="–¢–µ–∫—Å—Ç"
        value={element.text || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Ç–µ–∫—Å—Ç'}
        onChange={(e) => handleChange('text', e.target.value)}
        multiline
        rows={3}
      />
      <Box sx={{ display: 'flex', gap: 2 }}>
        <TextField
          label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
          type="color"
          value={element.textColor || '#333333'}
          onChange={(e) => handleChange('textColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <FormControl size="small" sx={{ minWidth: 120 }}>
          <InputLabel>–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ</InputLabel>
          <Select
            value={element.textAlign || 'left'}
            onChange={(e) => handleChange('textAlign', e.target.value)}
          >
            <MenuItem value="left">–°–ª–µ–≤–∞</MenuItem>
            <MenuItem value="center">–ü–æ —Ü–µ–Ω—Ç—Ä—É</MenuItem>
            <MenuItem value="right">–°–ø—Ä–∞–≤–∞</MenuItem>
          </Select>
        </FormControl>
      </Box>
    </Stack>
  );

  const renderBlockquoteEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–¶–∏—Ç–∞—Ç–∞"
        value={element.quote || '–í–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ'}
        onChange={(e) => handleChange('quote', e.target.value)}
        multiline
        rows={4}
        helperText="–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã"
      />
      <TextField
        fullWidth
        label="–ê–≤—Ç–æ—Ä"
        value={element.author || '–ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã'}
        onChange={(e) => handleChange('author', e.target.value)}
      />
      <TextField
        fullWidth
        label="–ò—Å—Ç–æ—á–Ω–∏–∫"
        value={element.source || ''}
        onChange={(e) => handleChange('source', e.target.value)}
        placeholder="–ö–Ω–∏–≥–∞, –∫–æ–º–ø–∞–Ω–∏—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
      />
      
      {/* –¶–≤–µ—Ç–∞ */}
      <Typography variant="subtitle2" sx={{ mt: 2 }}>–¶–≤–µ—Ç–∞:</Typography>
      <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        <TextField
          label="–¶–≤–µ—Ç —Ü–∏—Ç–∞—Ç—ã"
          type="color"
          value={element.quoteColor || '#555555'}
          onChange={(e) => handleChange('quoteColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç –∞–≤—Ç–æ—Ä–∞"
          type="color"
          value={element.authorColor || '#888888'}
          onChange={(e) => handleChange('authorColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞"
          type="color"
          value={element.backgroundColor || '#f8f9fa'}
          onChange={(e) => handleChange('backgroundColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Ä–∞–º–∫–∏"
          type="color"
          value={element.borderColor || '#1976d2'}
          onChange={(e) => handleChange('borderColor', e.target.value)}
          sx={{ width: 120 }}
        />
      </Box>
      
      {/* –®—Ä–∏—Ñ—Ç */}
      <Typography variant="subtitle2" sx={{ mt: 2 }}>–®—Ä–∏—Ñ—Ç:</Typography>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <FormControl fullWidth size="small">
          <InputLabel>–°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤</InputLabel>
          <Select
            value={element.fontFamily || 'inherit'}
            onChange={(e) => handleChange('fontFamily', e.target.value)}
          >
            <MenuItem value="inherit">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</MenuItem>
            <MenuItem value="Arial, sans-serif">Arial</MenuItem>
            <MenuItem value="Georgia, serif">Georgia</MenuItem>
            <MenuItem value="Times New Roman, serif">Times New Roman</MenuItem>
            <MenuItem value="Helvetica, sans-serif">Helvetica</MenuItem>
            <MenuItem value="Verdana, sans-serif">Verdana</MenuItem>
            <MenuItem value="Trebuchet MS, sans-serif">Trebuchet MS</MenuItem>
            <MenuItem value="Palatino, serif">Palatino</MenuItem>
            <MenuItem value="Courier New, monospace">Courier New</MenuItem>
            <MenuItem value="Comic Sans MS, cursive">Comic Sans MS</MenuItem>
            <MenuItem value="Impact, sans-serif">Impact</MenuItem>
            <MenuItem value="Roboto, sans-serif">Roboto</MenuItem>
            <MenuItem value="Open Sans, sans-serif">Open Sans</MenuItem>
            <MenuItem value="Lato, sans-serif">Lato</MenuItem>
            <MenuItem value="Montserrat, sans-serif">Montserrat</MenuItem>
          </Select>
        </FormControl>
        <FormControl fullWidth size="small">
          <InputLabel>–ù–∞—á–µ—Ä—Ç–∞–Ω–∏–µ</InputLabel>
          <Select
            value={element.fontWeight || 'normal'}
            onChange={(e) => handleChange('fontWeight', e.target.value)}
          >
            <MenuItem value="normal">–û–±—ã—á–Ω—ã–π</MenuItem>
            <MenuItem value="bold">–ñ–∏—Ä–Ω—ã–π</MenuItem>
            <MenuItem value="lighter">–¢–æ–Ω–∫–∏–π</MenuItem>
            <MenuItem value="100">100 - –¢–æ–Ω—á–∞–π—à–∏–π</MenuItem>
            <MenuItem value="200">200 - –û—á–µ–Ω—å —Ç–æ–Ω–∫–∏–π</MenuItem>
            <MenuItem value="300">300 - –¢–æ–Ω–∫–∏–π</MenuItem>
            <MenuItem value="400">400 - –ù–æ—Ä–º–∞–ª—å–Ω—ã–π</MenuItem>
            <MenuItem value="500">500 - –°—Ä–µ–¥–Ω–∏–π</MenuItem>
            <MenuItem value="600">600 - –ü–æ–ª—É–∂–∏—Ä–Ω—ã–π</MenuItem>
            <MenuItem value="700">700 - –ñ–∏—Ä–Ω—ã–π</MenuItem>
            <MenuItem value="800">800 - –û—á–µ–Ω—å –∂–∏—Ä–Ω—ã–π</MenuItem>
            <MenuItem value="900">900 - –°–≤–µ—Ä—Ö–∂–∏—Ä–Ω—ã–π</MenuItem>
          </Select>
        </FormControl>
      </Box>
      
      {/* –†–∞–∑–º–µ—Ä—ã */}
      <Typography variant="subtitle2" sx={{ mt: 2 }}>–†–∞–∑–º–µ—Ä—ã:</Typography>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <Box sx={{ flexGrow: 1 }}>
          <Typography gutterBottom>–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã: {element.quoteFontSize || 18}px</Typography>
          <Slider
            value={element.quoteFontSize || 18}
            onChange={(_, value) => handleChange('quoteFontSize', value)}
            min={12}
            max={36}
            step={1}
            marks={[
              { value: 12, label: '12px' },
              { value: 18, label: '18px' },
              { value: 24, label: '24px' },
              { value: 36, label: '36px' }
            ]}
          />
        </Box>
        <Box sx={{ flexGrow: 1 }}>
          <Typography gutterBottom>–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∞: {element.authorFontSize || 14}px</Typography>
          <Slider
            value={element.authorFontSize || 14}
            onChange={(_, value) => handleChange('authorFontSize', value)}
            min={10}
            max={24}
            step={1}
            marks={[
              { value: 10, label: '10px' },
              { value: 14, label: '14px' },
              { value: 18, label: '18px' },
              { value: 24, label: '24px' }
            ]}
          />
        </Box>
      </Box>
      
      {/* –û—Ç—Å—Ç—É–ø—ã */}
      <Box sx={{ display: 'flex', gap: 2 }}>
        <Box sx={{ flexGrow: 1 }}>
          <Typography gutterBottom>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã: {element.padding || 24}px</Typography>
          <Slider
            value={element.padding || 24}
            onChange={(_, value) => handleChange('padding', value)}
            min={8}
            max={48}
            step={4}
            marks={[
              { value: 8, label: '8px' },
              { value: 24, label: '24px' },
              { value: 48, label: '48px' }
            ]}
          />
        </Box>
        <Box sx={{ flexGrow: 1 }}>
          <Typography gutterBottom>–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏: {element.borderWidth || 4}px</Typography>
          <Slider
            value={element.borderWidth || 4}
            onChange={(_, value) => handleChange('borderWidth', value)}
            min={0}
            max={8}
            step={1}
            marks={[
              { value: 0, label: '0px' },
              { value: 4, label: '4px' },
              { value: 8, label: '8px' }
            ]}
          />
        </Box>
      </Box>
      
      {/* –°—Ç–∏–ª—å */}
      <Typography variant="subtitle2" sx={{ mt: 2 }}>–°—Ç–∏–ª—å:</Typography>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <FormControl fullWidth size="small">
          <InputLabel>–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ</InputLabel>
          <Select
            value={element.textAlign || 'left'}
            onChange={(e) => handleChange('textAlign', e.target.value)}
          >
            <MenuItem value="left">–ü–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é</MenuItem>
            <MenuItem value="center">–ü–æ —Ü–µ–Ω—Ç—Ä—É</MenuItem>
            <MenuItem value="right">–ü–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é</MenuItem>
            <MenuItem value="justify">–ü–æ —à–∏—Ä–∏–Ω–µ</MenuItem>
          </Select>
        </FormControl>
        <FormControl fullWidth size="small">
          <InputLabel>–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–º–∫–∏</InputLabel>
          <Select
            value={element.borderPosition || 'left'}
            onChange={(e) => handleChange('borderPosition', e.target.value)}
          >
            <MenuItem value="left">–°–ª–µ–≤–∞</MenuItem>
            <MenuItem value="right">–°–ø—Ä–∞–≤–∞</MenuItem>
            <MenuItem value="top">–°–≤–µ—Ä—Ö—É</MenuItem>
            <MenuItem value="bottom">–°–Ω–∏–∑—É</MenuItem>
            <MenuItem value="around">–í–æ–∫—Ä—É–≥</MenuItem>
          </Select>
        </FormControl>
      </Box>
      
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Box sx={{ display: 'flex', gap: 2 }}>
        <FormControlLabel
          control={
            <Switch
              checked={element.showAuthor !== false}
              onChange={(e) => handleChange('showAuthor', e.target.checked)}
            />
          }
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"
        />
        <FormControlLabel
          control={
            <Switch
              checked={element.showSource !== false}
              onChange={(e) => handleChange('showSource', e.target.checked)}
            />
          }
          label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"
        />
        <FormControlLabel
          control={
            <Switch
              checked={element.italic !== false}
              onChange={(e) => handleChange('italic', e.target.checked)}
            />
          }
          label="–ö—É—Ä—Å–∏–≤"
        />
      </Box>
      
      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <Box sx={{ mt: 2, p: 2, border: '1px solid #e0e0e0', borderRadius: 1, backgroundColor: '#f9f9f9' }}>
        <Typography variant="subtitle2" gutterBottom>
          –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:
        </Typography>
        <Blockquote
          quote={element.quote || '–í–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ'}
          author={element.author || '–ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã'}
          source={element.source || ''}
          showAuthor={element.showAuthor !== false}
          showSource={element.showSource !== false}
          quoteColor={element.quoteColor || '#555555'}
          authorColor={element.authorColor || '#888888'}
          backgroundColor={element.backgroundColor || '#f8f9fa'}
          borderColor={element.borderColor || '#1976d2'}
          fontFamily={element.fontFamily || 'inherit'}
          fontWeight={element.fontWeight || 'normal'}
          quoteFontSize={element.quoteFontSize || 18}
          authorFontSize={element.authorFontSize || 14}
          padding={element.padding || 24}
          borderWidth={element.borderWidth || 4}
          textAlign={element.textAlign || 'left'}
          borderPosition={element.borderPosition || 'left'}
          italic={element.italic !== false}
          isPreview={true}
        />
      </Box>
    </Stack>
  );

  const renderListEditor = () => (
    <Stack spacing={2}>
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø —Å–ø–∏—Å–∫–∞</InputLabel>
        <Select
          value={element.listType || 'ul'}
          onChange={(e) => handleChange('listType', e.target.value)}
        >
          <MenuItem value="ul">–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</MenuItem>
          <MenuItem value="ol">–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π</MenuItem>
        </Select>
      </FormControl>
      <TextField
        fullWidth
        label="–≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (–æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É)"
        value={element.items ? element.items.join('\n') : '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç\n–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç\n–¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç'}
        onChange={(e) => handleChange('items', e.target.value.split('\n'))}
        multiline
        rows={6}
      />
      <TextField
        label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        type="color"
        value={element.textColor || '#333333'}
        onChange={(e) => handleChange('textColor', e.target.value)}
        sx={{ width: 120 }}
      />
    </Stack>
  );

  const renderBasicCardEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"
        value={element.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        value={element.content || '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={4}
      />
      
      <Alert severity="info">
        <Typography variant="body2">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
        </Typography>
      </Alert>
    </Stack>
  );

  const renderImageCardEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"
        value={element.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        value={element.content || '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={3}
      />
      <TextField
        fullWidth
        label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        value={element.imageUrl || ''}
        onChange={(e) => handleChange('imageUrl', e.target.value)}
        placeholder="https://example.com/image.jpg"
      />
      <TextField
        fullWidth
        label="Alt —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        value={element.imageAlt || ''}
        onChange={(e) => handleChange('imageAlt', e.target.value)}
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
      />
      
      <Alert severity="info">
        <Typography variant="body2">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
        </Typography>
      </Alert>
    </Stack>
  );

  const renderCardsGridEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"
        value={element.title || '–°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–û–ø–∏—Å–∞–Ω–∏–µ"
        value={element.description || '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ —Å–µ—Ç–∫–µ'}
        onChange={(e) => handleChange('description', e.target.value)}
        multiline
        rows={2}
      />
      
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø –∫–∞—Ä—Ç–æ—á–µ–∫</InputLabel>
        <Select
          value={element.cardType || 'image-card'}
          onChange={(e) => handleChange('cardType', e.target.value)}
        >
          <MenuItem value="image-card">–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</MenuItem>
          <MenuItem value="basic-card">–ë–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</MenuItem>
        </Select>
      </FormControl>
      
      <FormControl fullWidth size="small">
        <InputLabel>–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</InputLabel>
        <Select
          value={element.gridSize || 'medium'}
          onChange={(e) => handleChange('gridSize', e.target.value)}
        >
          <MenuItem value="xs">–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è (1/6)</MenuItem>
          <MenuItem value="small">–ú–∞–ª–µ–Ω—å–∫–∞—è (1/4)</MenuItem>
          <MenuItem value="medium">–°—Ä–µ–¥–Ω—è—è (1/3)</MenuItem>
          <MenuItem value="large">–ë–æ–ª—å—à–∞—è (1/2)</MenuItem>
          <MenuItem value="xl">–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (2/3)</MenuItem>
          <MenuItem value="full">–ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (1/1)</MenuItem>
        </Select>
      </FormControl>
      
      <Divider />
      
      <Typography variant="subtitle2" gutterBottom>
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏:
      </Typography>
      
      <CardsGridManager
        cards={element.cards || []}
        onCardsChange={(cards) => handleChange('cards', cards)}
        cardType={element.cardType || 'image-card'}
        gridSize={element.gridSize || 'medium'}
        onGridSizeChange={(gridSize) => handleChange('gridSize', gridSize)}
        editable={true}
      />
    </Stack>
  );

  const renderVideoPlayerEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="URL –≤–∏–¥–µ–æ"
        value={element.videoUrl || ''}
        onChange={(e) => handleChange('videoUrl', e.target.value)}
        placeholder="https://www.youtube.com/watch?v=... –∏–ª–∏ https://vimeo.com/..."
      />
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ"
        value={element.title || '–í–∏–¥–µ–æ'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <Box>
        <Typography gutterBottom>–®–∏—Ä–∏–Ω–∞: {element.width || 560}px</Typography>
        <Slider
          value={element.width || 560}
          onChange={(_, value) => handleChange('width', value)}
          min={300}
          max={800}
          step={10}
        />
      </Box>
      <Box>
        <Typography gutterBottom>–í—ã—Å–æ—Ç–∞: {element.height || 315}px</Typography>
        <Slider
          value={element.height || 315}
          onChange={(_, value) => handleChange('height', value)}
          min={200}
          max={500}
          step={5}
        />
      </Box>
    </Stack>
  );

  const renderQrCodeEditor = () => (
    <Stack spacing={3}>
      <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ QR –∫–æ–¥–∞
      </Typography>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
        
        <TextField
          label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={element.title || '–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥'}
          onChange={(e) => handleChange('title', e.target.value)}
          fullWidth
          size="small"
          sx={{ mb: 2 }}
        />
        
        <TextField
          label="–¢–µ–∫—Å—Ç –∏–ª–∏ URL –¥–ª—è QR –∫–æ–¥–∞"
          value={element.qrText || 'https://example.com'}
          onChange={(e) => handleChange('qrText', e.target.value)}
          fullWidth
          size="small"
          sx={{ mb: 2 }}
        />
        
        <Box>
          <Typography gutterBottom>–†–∞–∑–º–µ—Ä: {element.size || 200}px</Typography>
          <Slider
            value={element.size || 200}
            onChange={(_, value) => handleChange('size', value)}
            min={100}
            max={400}
            step={10}
          />
        </Box>
      </Box>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
        <ColorSettings
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ QR –∫–æ–¥–∞"
          colorSettings={element.colorSettings || {}}
          onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
          availableFields={[
            { name: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ QR –∫–æ–¥–∞', defaultColor: '#333333' },
            { name: 'background', label: '–§–æ–Ω', description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ QR –∫–æ–¥–∞', defaultColor: '#ffffff' },
            { name: 'foreground', label: 'QR –∫–æ–¥', description: '–¶–≤–µ—Ç —Å–∞–º–æ–≥–æ QR –∫–æ–¥–∞', defaultColor: '#000000' }
          ]}
          defaultColors={{
            title: '#333333',
            background: '#ffffff',
            foreground: '#000000'
          }}
        />
      </Box>
    </Stack>
  );

  const renderRatingEditor = () => (
    <Stack spacing={3}>
      <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
      </Typography>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
        
        <TextField
          label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={element.title || '–†–µ–π—Ç–∏–Ω–≥'}
          onChange={(e) => handleChange('title', e.target.value)}
          fullWidth
          size="small"
          sx={{ mb: 2 }}
        />
        
        <Box sx={{ mb: 2 }}>
          <Typography gutterBottom>–†–µ–π—Ç–∏–Ω–≥: {element.rating || 5}</Typography>
          <Slider
            value={element.rating || 5}
            onChange={(_, value) => handleChange('rating', value)}
            min={0}
            max={5}
            step={0.1}
          />
        </Box>
        
        <Box sx={{ mb: 2 }}>
          <Typography gutterBottom>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {element.maxRating || 5}</Typography>
          <Slider
            value={element.maxRating || 5}
            onChange={(_, value) => handleChange('maxRating', value)}
            min={5}
            max={10}
            step={1}
          />
        </Box>
        
        <FormControlLabel
          control={
            <Switch
              checked={element.readOnly !== false}
              onChange={(e) => handleChange('readOnly', e.target.checked)}
            />
          }
          label="–¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"
        />
      </Box>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
        <ColorSettings
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞"
          colorSettings={element.colorSettings || {}}
          onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
          availableFields={[
            { name: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞', defaultColor: '#333333' },
            { name: 'text', label: '–¢–µ–∫—Å—Ç', description: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞', defaultColor: '#666666' },
            { name: 'star', label: '–ó–≤–µ–∑–¥—ã', description: '–¶–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–µ–∑–¥', defaultColor: '#ffc107' },
            { name: 'emptyStar', label: '–ü—É—Å—Ç—ã–µ –∑–≤–µ–∑–¥—ã', description: '–¶–≤–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–µ–∑–¥', defaultColor: '#e0e0e0' }
          ]}
          defaultColors={{
            title: '#333333',
            text: '#666666',
            star: '#ffc107',
            emptyStar: '#e0e0e0'
          }}
        />
      </Box>
    </Stack>
  );

  const renderProgressBarEditor = () => (
    <Stack spacing={3}>
      <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      </Typography>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
        
        <TextField
          label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={element.title || '–ü—Ä–æ–≥—Ä–µ—Å—Å'}
          onChange={(e) => handleChange('title', e.target.value)}
          fullWidth
          size="small"
          sx={{ mb: 2 }}
        />
        
        <Box sx={{ mb: 2 }}>
          <Typography gutterBottom>–ó–Ω–∞—á–µ–Ω–∏–µ: {element.value || 50}%</Typography>
          <Slider
            value={element.value || 50}
            onChange={(_, value) => handleChange('value', value)}
            min={0}
            max={100}
            step={1}
          />
        </Box>
        
        <FormControl fullWidth size="small">
          <InputLabel>–¢–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞</InputLabel>
          <Select
            value={element.variant || 'linear'}
            onChange={(e) => handleChange('variant', e.target.value)}
          >
            <MenuItem value="linear">–õ–∏–Ω–µ–π–Ω—ã–π</MenuItem>
            <MenuItem value="circular">–ö—Ä—É–≥–æ–≤–æ–π</MenuItem>
          </Select>
        </FormControl>
      </Box>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
        <ColorSettings
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
          colorSettings={element.colorSettings || {}}
          onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
          availableFields={[
            { name: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞', defaultColor: '#333333' },
            { name: 'text', label: '–¢–µ–∫—Å—Ç', description: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', defaultColor: '#666666' },
            { name: 'background', label: '–§–æ–Ω', description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞', defaultColor: '#e0e0e0' },
            { name: 'progress', label: '–ü—Ä–æ–≥—Ä–µ—Å—Å', description: '–¶–≤–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏', defaultColor: '#1976d2' }
          ]}
          defaultColors={{
            title: '#333333',
            text: '#666666',
            background: '#e0e0e0',
            progress: '#1976d2'
          }}
        />
      </Box>
    </Stack>
  );

  const renderRichTextEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–ë–æ–≥–∞—Ç—ã–π —Ç–µ–∫—Å—Ç'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (Markdown)"
        value={element.content || '–¢–µ–∫—Å—Ç —Å **–∂–∏—Ä–Ω—ã–º**, *–∫—É—Ä—Å–∏–≤–æ–º*, ***–∂–∏—Ä–Ω—ã–º –∫—É—Ä—Å–∏–≤–æ–º***\n\n–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Å [—Å—Å—ã–ª–∫–æ–π](https://example.com)\n\n## –ó–∞–≥–æ–ª–æ–≤–æ–∫\n\n* –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞\n* –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞\n\n`–∫–æ–¥` –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ —Ç–µ–∫—Å—Ç'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={8}
        placeholder="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown —Ä–∞–∑–º–µ—Ç–∫—É:
**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, [—Å—Å—ã–ª–∫–∞](url)
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1, ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2
* —Å–ø–∏—Å–æ–∫, `–∫–æ–¥`"
        helperText="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: –∑–∞–≥–æ–ª–æ–≤–∫–∏ (# ## ###), –∂–∏—Ä–Ω—ã–π (**—Ç–µ–∫—Å—Ç**), –∫—É—Ä—Å–∏–≤ (*—Ç–µ–∫—Å—Ç*), —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url), –∫–æ–¥ (`–∫–æ–¥`), —Å–ø–∏—Å–∫–∏ (* –ø—É–Ω–∫—Ç)"
      />
      
      {/* –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤ */}
      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
        <TextField
          fullWidth
          type="color"
          label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞"
          value={element.backgroundColor || '#ffffff'}
          onChange={(e) => handleChange('backgroundColor', e.target.value)}
          sx={{ '& input': { height: 40 } }}
        />
        <TextField
          fullWidth
          type="color"
          label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
          value={element.textColor || '#000000'}
          onChange={(e) => handleChange('textColor', e.target.value)}
          sx={{ '& input': { height: 40 } }}
        />
      </Box>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
        üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      </Typography>
      <FormControlLabel
        control={
          <Switch
            checked={element.showTitle !== false}
            onChange={(e) => handleChange('showTitle', e.target.checked)}
          />
        }
        label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
      />
      
      {/* –¶–≤–µ—Ç–∞ */}
      <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
        üé® –¶–≤–µ—Ç–∞
      </Typography>
      <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        <TextField
          label="–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"
          type="color"
          value={element.titleColor || '#1976d2'}
          onChange={(e) => handleChange('titleColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
          type="color"
          value={element.textColor || '#333333'}
          onChange={(e) => handleChange('textColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞"
          type="color"
          value={element.backgroundColor || 'rgba(0, 0, 0, 0.8)'}
          onChange={(e) => handleChange('backgroundColor', e.target.value)}
          sx={{ width: 120 }}
        />
      </Box>
      
      {/* –†–∞–∑–º–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã */}
      <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
        üìè –†–∞–∑–º–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
      </Typography>
      <Box>
        <Typography gutterBottom>–û—Ç—Å—Ç—É–ø—ã: {element.padding || 30}px</Typography>
        <Slider
          value={element.padding || 30}
          onChange={(_, value) => handleChange('padding', value)}
          min={0}
          max={100}
          step={5}
        />
      </Box>
      <Box>
        <Typography gutterBottom>–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤: {element.borderRadius || 12}px</Typography>
        <Slider
          value={element.borderRadius || 12}
          onChange={(_, value) => handleChange('borderRadius', value)}
          min={0}
          max={50}
          step={1}
        />
      </Box>
      
      {/* –ê–Ω–∏–º–∞—Ü–∏–∏ */}
      <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
        üé≠ –ê–Ω–∏–º–∞—Ü–∏–∏
      </Typography>
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏</InputLabel>
        <Select
          value={element.animationSettings?.animationType || 'fadeIn'}
          onChange={(e) => handleChange('animationSettings', { 
            ...element.animationSettings, 
            animationType: e.target.value 
          })}
        >
          <MenuItem value="fadeIn">–ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ</MenuItem>
          <MenuItem value="fadeInUp">–ü–æ—è–≤–ª–µ–Ω–∏–µ —Å–Ω–∏–∑—É</MenuItem>
          <MenuItem value="fadeInDown">–ü–æ—è–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É</MenuItem>
          <MenuItem value="fadeInLeft">–ü–æ—è–≤–ª–µ–Ω–∏–µ —Å–ª–µ–≤–∞</MenuItem>
          <MenuItem value="fadeInRight">–ü–æ—è–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</MenuItem>
          <MenuItem value="slideInUp">–í—ã–µ–∑–¥ —Å–Ω–∏–∑—É</MenuItem>
          <MenuItem value="slideInDown">–í—ã–µ–∑–¥ —Å–≤–µ—Ä—Ö—É</MenuItem>
          <MenuItem value="zoomIn">–£–≤–µ–ª–∏—á–µ–Ω–∏–µ</MenuItem>
          <MenuItem value="bounceIn">–û—Ç—Å–∫–æ–∫</MenuItem>
          <MenuItem value="pulse">–ü—É–ª—å—Å–∞—Ü–∏—è</MenuItem>
        </Select>
      </FormControl>
      
      <Box>
        <Typography gutterBottom>–ó–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {element.animationSettings?.delay || 0}–º—Å</Typography>
        <Slider
          value={element.animationSettings?.delay || 0}
          onChange={(_, value) => handleChange('animationSettings', { 
            ...element.animationSettings, 
            delay: value 
          })}
          min={0}
          max={2000}
          step={100}
        />
      </Box>
      
      <FormControlLabel
        control={
          <Switch
            checked={element.animationSettings?.triggerOnView !== false}
            onChange={(e) => handleChange('animationSettings', { 
              ...element.animationSettings, 
              triggerOnView: e.target.checked 
            })}
          />
        }
        label="–ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"
      />
      
      <FormControlLabel
        control={
          <Switch
            checked={element.animationSettings?.triggerOnce !== false}
            onChange={(e) => handleChange('animationSettings', { 
              ...element.animationSettings, 
              triggerOnce: e.target.checked 
            })}
          />
        }
        label="–ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"
      />
      
      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <Box sx={{ mt: 2, p: 2, border: '1px solid #e0e0e0', borderRadius: 1, backgroundColor: '#f9f9f9' }}>
        <Typography variant="subtitle2" gutterBottom>
          –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:
        </Typography>
        <RichTextEditor
          title={element.title || '–ë–æ–≥–∞—Ç—ã–π —Ç–µ–∫—Å—Ç'}
          content={element.content || '–¢–µ–∫—Å—Ç —Å **–∂–∏—Ä–Ω—ã–º**, *–∫—É—Ä—Å–∏–≤–æ–º*'}
          showTitle={element.showTitle !== false}
          titleColor={element.titleColor || '#1976d2'}
          textColor={element.textColor || '#333333'}
          backgroundColor={element.backgroundColor || 'rgba(0, 0, 0, 0.8)'}
          padding={element.padding || 30}
          borderRadius={element.borderRadius || 12}
          isPreview={true}
        />
      </Box>
    </Stack>
  );

  const renderCodeBlockEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–ë–ª–æ–∫ –∫–æ–¥–∞'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <FormControl fullWidth size="small">
        <InputLabel>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</InputLabel>
        <Select
          value={element.language || 'javascript'}
          onChange={(e) => handleChange('language', e.target.value)}
        >
          <MenuItem value="javascript">JavaScript</MenuItem>
          <MenuItem value="python">Python</MenuItem>
          <MenuItem value="html">HTML</MenuItem>
          <MenuItem value="css">CSS</MenuItem>
          <MenuItem value="sql">SQL</MenuItem>
          <MenuItem value="json">JSON</MenuItem>
          <MenuItem value="yaml">YAML</MenuItem>
          <MenuItem value="bash">Bash</MenuItem>
          <MenuItem value="php">PHP</MenuItem>
          <MenuItem value="java">Java</MenuItem>
          <MenuItem value="cpp">C++</MenuItem>
          <MenuItem value="csharp">C#</MenuItem>
        </Select>
      </FormControl>
      <TextField
        fullWidth
        label="–ö–æ–¥"
        value={element.code || 'function hello() {\n  console.log("Hello, World!");\n}'}
        onChange={(e) => handleChange('code', e.target.value)}
        multiline
        rows={6}
        sx={{ fontFamily: 'monospace' }}
      />
      <FormControlLabel
        control={
          <Switch
            checked={element.showLineNumbers !== false}
            onChange={(e) => handleChange('showLineNumbers', e.target.checked)}
          />
        }
        label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫"
      />
      <FormControlLabel
        control={
          <Switch
            checked={element.showTitle !== false}
            onChange={(e) => handleChange('showTitle', e.target.checked)}
          />
        }
        label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
      />
    </Stack>
  );

  const renderCalloutEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        value={element.content || '–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–º–µ—Ç–∏—Ç—å.'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={4}
      />
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø –±–ª–æ–∫–∞</InputLabel>
        <Select
          value={element.calloutType || 'info'}
          onChange={(e) => handleChange('calloutType', e.target.value)}
        >
          <MenuItem value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</MenuItem>
          <MenuItem value="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</MenuItem>
          <MenuItem value="error">–û—à–∏–±–∫–∞</MenuItem>
          <MenuItem value="success">–£—Å–ø–µ—Ö</MenuItem>
          <MenuItem value="note">–ó–∞–º–µ—Ç–∫–∞</MenuItem>
          <MenuItem value="tip">–°–æ–≤–µ—Ç</MenuItem>
        </Select>
      </FormControl>
      <FormControlLabel
        control={
          <Switch
            checked={element.showIcon !== false}
            onChange={(e) => handleChange('showIcon', e.target.checked)}
          />
        }
        label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É"
      />
      <Box sx={{ display: 'flex', gap: 2 }}>
        <TextField
          label="–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"
          type="color"
          value={element.titleColor || '#1976d2'}
          onChange={(e) => handleChange('titleColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"
          type="color"
          value={element.contentColor || '#333333'}
          onChange={(e) => handleChange('contentColor', e.target.value)}
          sx={{ width: 120 }}
        />
      </Box>
    </Stack>
  );

  const renderAccordionEditor = () => {
    const accordionItems = element.accordionItems || [
      { title: '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç', content: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' },
      { title: '–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç', content: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' }
    ];
    
    return (
      <Stack spacing={3}>
        <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        </Typography>
        
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="subtitle2" gutterBottom>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
          
          <TextField
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞"
            value={element.title || '–ê–∫–∫–æ—Ä–¥–µ–æ–Ω'}
            onChange={(e) => handleChange('title', e.target.value)}
            fullWidth
            size="small"
            sx={{ mb: 2 }}
          />
        </Box>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="subtitle2" gutterBottom>–≠–ª–µ–º–µ–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞:</Typography>
          {accordionItems.map((item, index) => (
            <Box key={index} sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 1, mb: 2 }}>
              <TextField
                fullWidth
                label={`–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${index + 1}`}
                value={item.title}
                onChange={(e) => {
                  const newItems = [...accordionItems];
                  newItems[index].title = e.target.value;
                  handleChange('accordionItems', newItems);
                }}
                size="small"
                sx={{ mb: 1 }}
              />
              <TextField
                fullWidth
                label={`–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ ${index + 1}`}
                value={item.content}
                onChange={(e) => {
                  const newItems = [...accordionItems];
                  newItems[index].content = e.target.value;
                  handleChange('accordionItems', newItems);
                }}
                multiline
                rows={3}
                size="small"
              />
            </Box>
          ))}
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button
              variant="outlined"
              size="small"
              onClick={() => {
                const newItems = [...accordionItems, { title: '–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç', content: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' }];
                handleChange('accordionItems', newItems);
              }}
            >
              –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
            </Button>
            {accordionItems.length > 1 && (
              <Button
                variant="outlined"
                color="error"
                size="small"
                onClick={() => {
                  const newItems = accordionItems.slice(0, -1);
                  handleChange('accordionItems', newItems);
                }}
              >
                –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π
              </Button>
            )}
          </Box>
        </Box>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="subtitle2" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤:</Typography>
          <ColorSettings
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞"
            colorSettings={element.colorSettings || {}}
            onUpdate={(newColorSettings) => handleChange('colorSettings', newColorSettings)}
            availableFields={[
              { name: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', description: '–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞', defaultColor: '#333333' },
              { name: 'text', label: '–¢–µ–∫—Å—Ç', description: '–¶–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', defaultColor: '#666666' },
              { name: 'background', label: '–§–æ–Ω', description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞', defaultColor: '#ffffff' },
              { name: 'border', label: '–ì—Ä–∞–Ω–∏—Ü–∞', description: '–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü —ç–ª–µ–º–µ–Ω—Ç–æ–≤', defaultColor: '#e0e0e0' },
              { name: 'hover', label: '–ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏', description: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω', defaultColor: 'rgba(196,30,58,0.15)' }
            ]}
            defaultColors={{
              title: '#333333',
              text: '#666666',
              background: '#ffffff',
              border: '#e0e0e0',
              hover: 'rgba(196,30,58,0.15)'
            }}
          />
        </Box>
      </Stack>
    );
  };



  const renderConfettiEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ!'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"
        value={element.buttonText || '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏'}
        onChange={(e) => handleChange('buttonText', e.target.value)}
      />
      <Box>
        <Typography gutterBottom>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {element.intensity || 100}</Typography>
        <Slider
          value={element.intensity || 100}
          onChange={(_, value) => handleChange('intensity', value)}
          min={10}
          max={500}
          step={10}
        />
      </Box>
      <Box>
        <Typography gutterBottom>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {element.duration || 3000}–º—Å</Typography>
        <Slider
          value={element.duration || 3000}
          onChange={(_, value) => handleChange('duration', value)}
          min={1000}
          max={10000}
          step={500}
        />
      </Box>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <TextField
          label="–¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏"
          type="color"
          value={element.buttonColor || '#4caf50'}
          onChange={(e) => handleChange('buttonColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
          type="color"
          value={element.textColor || '#ffffff'}
          onChange={(e) => handleChange('textColor', e.target.value)}
          sx={{ width: 120 }}
        />
      </Box>
    </Stack>
  );



  const renderAnimatedBoxEditor = () => (
    <Stack spacing={2}>
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={element.title || '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫'}
        onChange={(e) => handleChange('title', e.target.value)}
      />
      <TextField
        fullWidth
        label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        value={element.content || '–≠—Ç–æ—Ç –±–ª–æ–∫ –∏–º–µ–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é'}
        onChange={(e) => handleChange('content', e.target.value)}
        multiline
        rows={3}
      />
      <FormControl fullWidth size="small">
        <InputLabel>–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏</InputLabel>
        <Select
          value={element.animationType || 'fadeIn'}
          onChange={(e) => handleChange('animationType', e.target.value)}
        >
          <MenuItem value="fadeIn">–ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ</MenuItem>
          <MenuItem value="slideUp">–í—ã–µ–∑–¥ —Å–Ω–∏–∑—É</MenuItem>
          <MenuItem value="slideLeft">–í—ã–µ–∑–¥ —Å–ª–µ–≤–∞</MenuItem>
          <MenuItem value="slideRight">–í—ã–µ–∑–¥ —Å–ø—Ä–∞–≤–∞</MenuItem>
          <MenuItem value="zoomIn">–£–≤–µ–ª–∏—á–µ–Ω–∏–µ</MenuItem>
          <MenuItem value="bounce">–ü–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ</MenuItem>
          <MenuItem value="pulse">–ü—É–ª—å—Å–∞—Ü–∏—è</MenuItem>
          <MenuItem value="shake">–¢—Ä—è—Å–∫–∞</MenuItem>
        </Select>
      </FormControl>
      <Box>
        <Typography gutterBottom>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {element.duration || 1000}–º—Å</Typography>
        <Slider
          value={element.duration || 1000}
          onChange={(_, value) => handleChange('duration', value)}
          min={300}
          max={3000}
          step={100}
        />
      </Box>
      <FormControlLabel
        control={
          <Switch
            checked={element.loop !== false}
            onChange={(e) => handleChange('loop', e.target.checked)}
          />
        }
        label="–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é"
      />
      <Box sx={{ display: 'flex', gap: 2 }}>
        <TextField
          label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞"
          type="color"
          value={element.backgroundColor || '#f5f5f5'}
          onChange={(e) => handleChange('backgroundColor', e.target.value)}
          sx={{ width: 120 }}
        />
        <TextField
          label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
          type="color"
          value={element.textColor || '#333333'}
          onChange={(e) => handleChange('textColor', e.target.value)}
          sx={{ width: 120 }}
        />
      </Box>
    </Stack>
  );

  const renderMultipleCardsEditor = () => (
    <Stack spacing={2}>
      <Typography variant="h6" gutterBottom>
        –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      </Typography>
      
      <TextField
        fullWidth
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"
        value={element.data?.title || ''}
        onChange={(e) => handleChange('title', e.target.value)}
        placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å–µ–π —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"
      />
      
      <TextField
        fullWidth
        label="–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"
        value={element.data?.description || ''}
        onChange={(e) => handleChange('description', e.target.value)}
        multiline
        rows={2}
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"
      />
      
                <FormControl fullWidth size="small">
            <InputLabel>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤</InputLabel>
            <Select
              value={element.data?.gridSize || 'medium'}
              onChange={(e) => handleChange('gridSize', e.target.value)}
            >
              <MenuItem value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π (4 —Å—Ç–æ–ª–±—Ü–∞)</MenuItem>
              <MenuItem value="medium">–°—Ä–µ–¥–Ω–∏–π (3 —Å—Ç–æ–ª–±—Ü–∞)</MenuItem>
              <MenuItem value="large">–ë–æ–ª—å—à–æ–π (2 —Å—Ç–æ–ª–±—Ü–∞)</MenuItem>
              <MenuItem value="extra-large">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π (1 —Å—Ç–æ–ª–±–µ—Ü)</MenuItem>
            </Select>
          </FormControl>
      
      <Typography variant="subtitle2" gutterBottom>
        –ö–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–µ–∫—Ü–∏–∏: {element.data?.cards?.length || 0}
      </Typography>
      
      {element.data?.cards?.map((card, index) => (
        <Paper key={card.id} sx={{ p: 2, border: '1px solid #e0e0e0' }}>
          <Typography variant="subtitle2" gutterBottom>
            –ö–∞—Ä—Ç–æ—á–∫–∞ {index + 1}
          </Typography>
          <TextField
            fullWidth
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
            value={card.title || ''}
            onChange={(e) => {
              const updatedCards = [...element.data.cards];
              updatedCards[index] = { ...card, title: e.target.value };
              handleChange('cards', updatedCards);
            }}
            size="small"
            sx={{ mb: 1 }}
          />
          <TextField
            fullWidth
            label="–û–ø–∏—Å–∞–Ω–∏–µ"
            value={card.content || ''}
            onChange={(e) => {
              const updatedCards = [...element.data.cards];
              updatedCards[index] = { ...card, content: e.target.value };
              handleChange('cards', updatedCards);
            }}
            multiline
            rows={2}
            size="small"
            sx={{ mb: 1 }}
          />
          <TextField
            fullWidth
            label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            value={card.imageUrl || ''}
            onChange={(e) => {
              const updatedCards = [...element.data.cards];
              updatedCards[index] = { ...card, imageUrl: e.target.value };
              handleChange('cards', updatedCards);
            }}
            size="small"
            sx={{ mb: 1 }}
          />
        </Paper>
      ))}
    </Stack>
  );

  const renderElementEditor = () => {
    switch (element.type) {
      case 'gradient-text':
        return renderGradientTextEditor();
      case 'animated-counter':
        return renderAnimatedCounterEditor();
      case 'typewriter-text':
        return renderTypewriterTextEditor();
      case 'highlight-text':
        return renderHighlightTextEditor();
      case 'markdown-editor':
        return renderMarkdownEditor();
      case 'code-editor':
        return renderCodeEditor();
      case 'testimonial-card':
        return renderTestimonialEditor();
      case 'faq-section':
        return renderFaqEditor();
      case 'timeline-component':
        return renderTimelineEditor();
      case 'alert-component':
        return renderAlertEditor();
      case 'image-gallery':
        return renderImageGalleryEditor();
      
      // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      case 'typography':
        return renderTypographyEditor();
      case 'blockquote':
        return renderBlockquoteEditor();
      case 'list':
        return renderListEditor();
      
      // –ö–∞—Ä—Ç–æ—á–∫–∏
      case 'basic-card':
        return renderBasicCardEditor();
      case 'image-card':
        return renderImageCardEditor();
      
      case 'cards-grid':
        return renderCardsGridEditor();
      case 'multiple-cards':
        return renderMultipleCardsEditor();
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      case 'rich-text':
        return renderRichTextEditor();
      case 'code-block':
        return renderCodeBlockEditor();
      case 'callout':
        return renderCalloutEditor();
      
      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      case 'video-player':
        return renderVideoPlayerEditor();
      case 'qr-code':
        return renderQrCodeEditor();
      case 'rating':
        return renderRatingEditor();
      case 'progress-bars':
        return renderProgressBarEditor();
      case 'accordion':
        return renderAccordionEditor();

      case 'confetti':
        return renderConfettiEditor();

      case 'animated-box':
        return renderAnimatedBoxEditor();
      
      default:
        return (
          <Typography color="text.secondary">
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ "{element.type}" –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
          </Typography>
        );
    }
  };

  return (
    <Paper 
      elevation={isSelected ? 4 : 2} 
      sx={{ 
        mb: 2, 
        border: isSelected ? '2px solid #1976d2' : expanded ? '2px solid #1976d2' : '1px solid #e0e0e0',
        borderRadius: 2,
        backgroundColor: isSelected ? 'rgba(25, 118, 210, 0.04)' : 'transparent',
        boxShadow: isSelected ? '0 0 20px rgba(25, 118, 210, 0.3)' : undefined,
        position: 'relative'
      }}
    >
      {isSelected && (
        <Box
          sx={{
            position: 'absolute',
            top: -10,
            right: -10,
            backgroundColor: '#1976d2',
            color: 'white',
            borderRadius: '50%',
            width: 24,
            height: 24,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '12px',
            fontWeight: 'bold',
            zIndex: 10,
            boxShadow: '0 2px 4px rgba(0,0,0,0.3)'
          }}
        >
          ‚úì
        </Box>
      )}
      <Accordion 
        expanded={expanded} 
        onChange={() => setExpanded(!expanded)}
        sx={{ 
          '&:before': { display: 'none' },
          boxShadow: 'none'
        }}
      >
        <AccordionSummary 
          expandIcon={<ExpandMoreIcon />}
          sx={{ 
            backgroundColor: isSelected ? 'rgba(25, 118, 210, 0.08)' : expanded ? '#f8f9fa' : 'transparent',
            '&:hover': { backgroundColor: isSelected ? 'rgba(25, 118, 210, 0.12)' : '#f8f9fa' }
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="h6">{getElementIcon(element.type)}</Typography>
              <Box>
                <Typography 
                  variant="subtitle1" 
                  sx={{ 
                    fontWeight: 'bold',
                    color: isSelected ? '#1976d2' : 'inherit'
                  }}
                >
                  {element.data?.name || element.type}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {element.data?.description || `–≠–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ ${element.type}`}
                </Typography>
              </Box>
            </Box>
            <Box sx={{ display: 'flex', gap: 1 }} onClick={(e) => e.stopPropagation()}>
              <Tooltip title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                <IconButton size="small" onClick={() => onElementDuplicate(element)}>
                  <ContentCopyIcon fontSize="small" />
                </IconButton>
              </Tooltip>
              <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                <IconButton size="small" color="error" onClick={() => onElementDelete(element.id)}>
                  <DeleteIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        </AccordionSummary>
        
        <AccordionDetails sx={{ pt: 0 }}>
          <Divider sx={{ mb: 2 }} />
          {renderElementEditor()}
        </AccordionDetails>
      </Accordion>
    </Paper>
  );
};

export default ElementEditor; 