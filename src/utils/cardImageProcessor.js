import { imageCacheService } from './imageCacheService';

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
export const generateEnhancedCardImageFileName = (cardData, sectionData, file) => {
  const sectionId = sectionData.id || 'section';
  const cardId = cardData.id || Date.now();
  const cardTitle = cardData.title || `card_${cardId}`;
  
  // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
  const sanitizedSectionId = sectionId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase().substring(0, 20);
  const sanitizedCardTitle = cardTitle.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase().substring(0, 30);
  const timestamp = Date.now();
  const randomId = Math.random().toString(36).substring(2, 8);
  
  // üî• –ù–û–í–´–ô –§–û–†–ú–ê–¢: card_[—Å–µ–∫—Ü–∏—è]_[ID_–∫–∞—Ä—Ç–æ—á–∫–∏]_[–Ω–∞–∑–≤–∞–Ω–∏–µ]_[timestamp]_[random].jpg
  return `card_${sanitizedSectionId}_${cardId}_${sanitizedCardTitle}_${timestamp}_${randomId}.jpg`;
};

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const validateImageFile = (file) => {
  const maxSize = 10 * 1024 * 1024; // 10MB
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/bmp'];
  
  if (!file) {
    return { valid: false, error: '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω' };
  }
  
  if (!allowedTypes.includes(file.type)) {
    return { valid: false, error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, GIF, WebP, BMP' };
  }
  
  if (file.size > maxSize) {
    return { valid: false, error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB' };
  }
  
  return { valid: true };
};

// –§—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const compressAndConvertImage = (file) => {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫: 600x400
      const maxWidth = 600;
      const maxHeight = 400;
      
      let { width, height } = img;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
      if (width > maxWidth || height > maxHeight) {
        const ratio = Math.min(maxWidth / width, maxHeight / height);
        width = Math.round(width * ratio);
        height = Math.round(height * ratio);
      }
      
      canvas.width = width;
      canvas.height = height;
      
      // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
      ctx.drawImage(img, 0, 0, width, height);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85%
      canvas.toBlob((blob) => {
        if (blob) {
          resolve({
            blob,
            width,
            height,
            size: blob.size
          });
        } else {
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
        }
      }, 'image/jpeg', 0.85);
    };
    
    img.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
    const reader = new FileReader();
    reader.onload = (e) => {
      img.src = e.target.result;
    };
    reader.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª'));
    reader.readAsDataURL(file);
  });
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
export const processCardImage = async (file, cardData, sectionData) => {
  try {
    console.log(`üñºÔ∏è Processing image for card ${cardData.id} in section ${sectionData.id}`);
    console.log(`üñºÔ∏è File details:`, { name: file.name, size: file.size, type: file.type });
    
    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ê–ô–õ–ê
    console.log(`üîç Validating file...`);
    const validation = validateImageFile(file);
    console.log(`üîç Validation result:`, validation);
    if (!validation.valid) {
      throw new Error(validation.error);
    }
    
    // ‚úÖ –°–ñ–ê–¢–ò–ï –ò –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø
    console.log(`üîß Compressing and converting image...`);
    const processedResult = await compressAndConvertImage(file);
    console.log(`üîß Compression result:`, { width: processedResult.width, height: processedResult.height, size: processedResult.size });
    
    // ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ú–ï–ù–ò
    console.log(`üìù Generating filename...`);
    const fileName = generateEnhancedCardImageFileName(cardData, sectionData, file);
    console.log(`üìù Generated filename:`, fileName);
    
    // ‚úÖ –°–û–ó–î–ê–ù–ò–ï BLOB URL
    console.log(`üîó Creating blob URL...`);
    const url = URL.createObjectURL(processedResult.blob);
    console.log(`üîó Blob URL created:`, url);
    
    // ‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ö–ï–®–ï
    console.log(`üíæ Saving to IndexedDB cache...`);
    await imageCacheService.saveImage(fileName, processedResult.blob);
    console.log(`üíæ Saved to cache successfully`);
    
    // ‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–´–• –ú–ï–¢–ê–î–ê–ù–ù–´–•
    const metadata = {
      fileName,
      originalName: file.name,
      originalType: file.type,
      cardId: cardData.id,
      cardTitle: cardData.title,
      sectionId: sectionData.id,
      sectionTitle: sectionData.title,
      size: processedResult.size,
      width: processedResult.width,
      height: processedResult.height,
      uploadDate: new Date().toISOString(),
      processed: true,
      format: 'jpg',
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–∞–π—Ç–∞
      pageContext: {
        isMultiPage: true,
        sectionPage: `${sectionData.id}.html`,
        cardIndex: cardData.index || 0
      }
    };
    
    await imageCacheService.saveMetadata(`card-image-metadata-${fileName}`, metadata);
    
    console.log(`‚úÖ Card image processed successfully: ${fileName}`);
    console.log(`üìä Image details: ${processedResult.width}x${processedResult.height}, ${Math.round(processedResult.size/1024)}KB`);
    
    return { 
      fileName, 
      url, 
      blob: processedResult.blob, 
      metadata,
      success: true 
    };
    
  } catch (error) {
    console.error('‚ùå Error processing card image:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –∫–µ—à–∞
export const getAllCardImages = async () => {
  try {
    const allMetadata = imageCacheService.getAllMetadata();
    const cardImages = [];
    
    for (const [key, metadata] of Object.entries(allMetadata)) {
      if (key.startsWith('card-image-metadata-') && metadata.cardId) {
        const blob = await imageCacheService.getImage(metadata.fileName);
        if (blob) {
          cardImages.push({
            fileName: metadata.fileName,
            url: URL.createObjectURL(blob),
            metadata: metadata,
            blob: blob
          });
        }
      }
    }
    
    console.log(`üìä Found ${cardImages.length} card images in cache`);
    return cardImages;
    
  } catch (error) {
    console.error('‚ùå Error getting card images from cache:', error);
    return [];
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏
export const clearCardImages = async (cardId) => {
  try {
    const allMetadata = imageCacheService.getAllMetadata();
    let deletedCount = 0;
    
    for (const [key, metadata] of Object.entries(allMetadata)) {
      if (key.startsWith('card-image-metadata-') && metadata.cardId === cardId) {
        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        await imageCacheService.deleteImage(metadata.fileName);
        // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        imageCacheService.deleteMetadata(key);
        deletedCount++;
        console.log(`üóëÔ∏è Deleted card image: ${metadata.fileName}`);
      }
    }
    
    console.log(`‚úÖ Cleared ${deletedCount} images for card ${cardId}`);
    return deletedCount;
    
  } catch (error) {
    console.error('‚ùå Error clearing card images:', error);
    return 0;
  }
};
